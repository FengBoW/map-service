// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agv_map.proto

#include "agv_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace agv_map {
PROTOBUF_CONSTEXPR MAP_ARR_StoreOffConfigEntry_DoNotUse::MAP_ARR_StoreOffConfigEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MAP_ARR_StoreOffConfigEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAP_ARR_StoreOffConfigEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAP_ARR_StoreOffConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MAP_ARR_StoreOffConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAP_ARR_StoreOffConfigEntry_DoNotUseDefaultTypeInternal _MAP_ARR_StoreOffConfigEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MAP_ARR_AgvparamEntry_DoNotUse::MAP_ARR_AgvparamEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MAP_ARR_AgvparamEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAP_ARR_AgvparamEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAP_ARR_AgvparamEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MAP_ARR_AgvparamEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAP_ARR_AgvparamEntry_DoNotUseDefaultTypeInternal _MAP_ARR_AgvparamEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MAP_ARR_ReplaceBatteryStationEntry_DoNotUse::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MAP_ARR_ReplaceBatteryStationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAP_ARR_ReplaceBatteryStationEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAP_ARR_ReplaceBatteryStationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MAP_ARR_ReplaceBatteryStationEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAP_ARR_ReplaceBatteryStationEntry_DoNotUseDefaultTypeInternal _MAP_ARR_ReplaceBatteryStationEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MAP_ARR_PalletEntry_DoNotUse::MAP_ARR_PalletEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MAP_ARR_PalletEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAP_ARR_PalletEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAP_ARR_PalletEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MAP_ARR_PalletEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAP_ARR_PalletEntry_DoNotUseDefaultTypeInternal _MAP_ARR_PalletEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MAP_ARR_DefaultFrokEntry_DoNotUse::MAP_ARR_DefaultFrokEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MAP_ARR_DefaultFrokEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAP_ARR_DefaultFrokEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAP_ARR_DefaultFrokEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MAP_ARR_DefaultFrokEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAP_ARR_DefaultFrokEntry_DoNotUseDefaultTypeInternal _MAP_ARR_DefaultFrokEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MAP_ARR::MAP_ARR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_)*/{}
  , /*decltype(_impl_.store_off_config_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.agvparam_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.replace_battery_station_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.pallet_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.default_frok_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.describe_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MAP_ARRDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAP_ARRDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAP_ARRDefaultTypeInternal() {}
  union {
    MAP_ARR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAP_ARRDefaultTypeInternal _MAP_ARR_default_instance_;
PROTOBUF_CONSTEXPR Map_NodeEntry_DoNotUse::Map_NodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Map_NodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Map_NodeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Map_NodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Map_NodeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Map_NodeEntry_DoNotUseDefaultTypeInternal _Map_NodeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Map_SegmentEntry_DoNotUse::Map_SegmentEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Map_SegmentEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Map_SegmentEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Map_SegmentEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Map_SegmentEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Map_SegmentEntry_DoNotUseDefaultTypeInternal _Map_SegmentEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Map_AreaEntry_DoNotUse::Map_AreaEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Map_AreaEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Map_AreaEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Map_AreaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Map_AreaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Map_AreaEntry_DoNotUseDefaultTypeInternal _Map_AreaEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Map_LabelEntry_DoNotUse::Map_LabelEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Map_LabelEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Map_LabelEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Map_LabelEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Map_LabelEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Map_LabelEntry_DoNotUseDefaultTypeInternal _Map_LabelEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Map_ShelfEntry_DoNotUse::Map_ShelfEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Map_ShelfEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Map_ShelfEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Map_ShelfEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Map_ShelfEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Map_ShelfEntry_DoNotUseDefaultTypeInternal _Map_ShelfEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Map::Map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.segment_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.area_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.label_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.shelf_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.conf_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDefaultTypeInternal _Map_default_instance_;
PROTOBUF_CONSTEXPR Conf_AgvIdsEntry_DoNotUse::Conf_AgvIdsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Conf_AgvIdsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Conf_AgvIdsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Conf_AgvIdsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Conf_AgvIdsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Conf_AgvIdsEntry_DoNotUseDefaultTypeInternal _Conf_AgvIdsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Conf_param::Conf_param(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Conf_paramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Conf_paramDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Conf_paramDefaultTypeInternal() {}
  union {
    Conf_param _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Conf_paramDefaultTypeInternal _Conf_param_default_instance_;
PROTOBUF_CONSTEXPR Conf::Conf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agv_ids_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mission_type_list_)*/{}
  , /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.project_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gcood_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_ts_)*/int64_t{0}
  , /*decltype(_impl_.map_zone_)*/0
  , /*decltype(_impl_.max_x_)*/0
  , /*decltype(_impl_.min_x_)*/0
  , /*decltype(_impl_.max_y_)*/0
  , /*decltype(_impl_.min_y_)*/0
  , /*decltype(_impl_.gcood_dm_value_)*/0
  , /*decltype(_impl_.background_pos_x_)*/0
  , /*decltype(_impl_.background_pos_y_)*/0
  , /*decltype(_impl_.background_length_)*/0
  , /*decltype(_impl_.background_width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfDefaultTypeInternal() {}
  union {
    Conf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfDefaultTypeInternal _Conf_default_instance_;
PROTOBUF_CONSTEXPR sceneData_ParamMapEntry_DoNotUse::sceneData_ParamMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct sceneData_ParamMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sceneData_ParamMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sceneData_ParamMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    sceneData_ParamMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sceneData_ParamMapEntry_DoNotUseDefaultTypeInternal _sceneData_ParamMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR sceneData_data_ParamMapEntry_DoNotUse::sceneData_data_ParamMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct sceneData_data_ParamMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sceneData_data_ParamMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sceneData_data_ParamMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    sceneData_data_ParamMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sceneData_data_ParamMapEntry_DoNotUseDefaultTypeInternal _sceneData_data_ParamMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR sceneData_data_IndexMapEntry_DoNotUse::sceneData_data_IndexMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct sceneData_data_IndexMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sceneData_data_IndexMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sceneData_data_IndexMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    sceneData_data_IndexMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sceneData_data_IndexMapEntry_DoNotUseDefaultTypeInternal _sceneData_data_IndexMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR sceneData_data::sceneData_data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.index_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct sceneData_dataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sceneData_dataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sceneData_dataDefaultTypeInternal() {}
  union {
    sceneData_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sceneData_dataDefaultTypeInternal _sceneData_data_default_instance_;
PROTOBUF_CONSTEXPR sceneData::sceneData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct sceneDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sceneDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sceneDataDefaultTypeInternal() {}
  union {
    sceneData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sceneDataDefaultTypeInternal _sceneData_default_instance_;
PROTOBUF_CONSTEXPR ShelfCofig_GetHighEntry_DoNotUse::ShelfCofig_GetHighEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ShelfCofig_GetHighEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShelfCofig_GetHighEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShelfCofig_GetHighEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ShelfCofig_GetHighEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShelfCofig_GetHighEntry_DoNotUseDefaultTypeInternal _ShelfCofig_GetHighEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ShelfCofig_PutHighEntry_DoNotUse::ShelfCofig_PutHighEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ShelfCofig_PutHighEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShelfCofig_PutHighEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShelfCofig_PutHighEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ShelfCofig_PutHighEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShelfCofig_PutHighEntry_DoNotUseDefaultTypeInternal _ShelfCofig_PutHighEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ShelfCofig::ShelfCofig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.get_high_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.put_high_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layernum_)*/0
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.proto_type_)*/0
  , /*decltype(_impl_.shelf_width_)*/0
  , /*decltype(_impl_.shelf_depth_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShelfCofigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShelfCofigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShelfCofigDefaultTypeInternal() {}
  union {
    ShelfCofig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShelfCofigDefaultTypeInternal _ShelfCofig_default_instance_;
PROTOBUF_CONSTEXPR Node_Basic_AgvTypeEntry_DoNotUse::Node_Basic_AgvTypeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Node_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Node_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Node_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Node_Basic_AgvTypeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Node_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal _Node_Basic_AgvTypeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Node_Basic::Node_Basic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agv_type_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.qrcode_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mission_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coord_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.qrcode_)*/0
  , /*decltype(_impl_.node_info_)*/0
  , /*decltype(_impl_.floor_)*/0
  , /*decltype(_impl_.stype_)*/0
  , /*decltype(_impl_.instapnt_id_)*/0
  , /*decltype(_impl_.pallet_dir_)*/0
  , /*decltype(_impl_.virtual__)*/false
  , /*decltype(_impl_.additional_type_)*/0
  , /*decltype(_impl_.shelf_id_)*/0
  , /*decltype(_impl_.shelf_dir_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Node_BasicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Node_BasicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Node_BasicDefaultTypeInternal() {}
  union {
    Node_Basic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Node_BasicDefaultTypeInternal _Node_Basic_default_instance_;
PROTOBUF_CONSTEXPR Node_Sim_param::Node_Sim_param(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enable_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.interval_)*/0
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_.target_area_)*/0
  , /*decltype(_impl_.target_sta_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Node_Sim_paramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Node_Sim_paramDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Node_Sim_paramDefaultTypeInternal() {}
  union {
    Node_Sim_param _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Node_Sim_paramDefaultTypeInternal _Node_Sim_param_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.in_area_)*/{}
  , /*decltype(_impl_._in_area_cached_byte_size_)*/{0}
  , /*decltype(_impl_.edge_list_)*/{}
  , /*decltype(_impl_._edge_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.basic_)*/nullptr
  , /*decltype(_impl_.agv_param_)*/nullptr
  , /*decltype(_impl_.avo_param_)*/nullptr
  , /*decltype(_impl_.ctl_param_)*/nullptr
  , /*decltype(_impl_.rut_param_)*/nullptr
  , /*decltype(_impl_.act_param_)*/nullptr
  , /*decltype(_impl_.sim_param_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR Edge_Basic_AgvTypeEntry_DoNotUse::Edge_Basic_AgvTypeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Edge_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Edge_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Edge_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Edge_Basic_AgvTypeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Edge_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal _Edge_Basic_AgvTypeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Edge_Basic::Edge_Basic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agv_type_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.start_pos_)*/nullptr
  , /*decltype(_impl_.end_pos_)*/nullptr
  , /*decltype(_impl_.arc_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.start_id_)*/0
  , /*decltype(_impl_.end_id_)*/0
  , /*decltype(_impl_.seglen_)*/0
  , /*decltype(_impl_.enable_)*/0
  , /*decltype(_impl_.floor_)*/0
  , /*decltype(_impl_.trans_angle_)*/0
  , /*decltype(_impl_.orientation_angle_)*/0
  , /*decltype(_impl_.bothways_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.c_)*/0
  , /*decltype(_impl_.speed_max_)*/0
  , /*decltype(_impl_.bond_seg_id_)*/0
  , /*decltype(_impl_.virtual__)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Edge_BasicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Edge_BasicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Edge_BasicDefaultTypeInternal() {}
  union {
    Edge_Basic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Edge_BasicDefaultTypeInternal _Edge_Basic_default_instance_;
PROTOBUF_CONSTEXPR Edge_Arc::Edge_Arc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cen_pnt_)*/nullptr
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.clockdir_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Edge_ArcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Edge_ArcDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Edge_ArcDefaultTypeInternal() {}
  union {
    Edge_Arc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Edge_ArcDefaultTypeInternal _Edge_Arc_default_instance_;
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.in_area_)*/{}
  , /*decltype(_impl_._in_area_cached_byte_size_)*/{0}
  , /*decltype(_impl_.control_point_)*/{}
  , /*decltype(_impl_.curve_point_)*/{}
  , /*decltype(_impl_.basic_)*/nullptr
  , /*decltype(_impl_.agv_param_)*/nullptr
  , /*decltype(_impl_.avo_param_)*/nullptr
  , /*decltype(_impl_.ctl_param_)*/nullptr
  , /*decltype(_impl_.rut_param_)*/nullptr
  , /*decltype(_impl_.act_param_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
PROTOBUF_CONSTEXPR Area_ParamEntry_DoNotUse::Area_ParamEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Area_ParamEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Area_ParamEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Area_ParamEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Area_ParamEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Area_ParamEntry_DoNotUseDefaultTypeInternal _Area_ParamEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Area_AgvNumEntry_DoNotUse::Area_AgvNumEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Area_AgvNumEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Area_AgvNumEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Area_AgvNumEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Area_AgvNumEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Area_AgvNumEntry_DoNotUseDefaultTypeInternal _Area_AgvNumEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Area_Basic::Area_Basic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Area_BasicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Area_BasicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Area_BasicDefaultTypeInternal() {}
  union {
    Area_Basic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Area_BasicDefaultTypeInternal _Area_Basic_default_instance_;
PROTOBUF_CONSTEXPR Area::Area(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.vertex_list_)*/{}
  , /*decltype(_impl_.node_in_)*/{}
  , /*decltype(_impl_._node_in_cached_byte_size_)*/{0}
  , /*decltype(_impl_.agv_num_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.relate_area_)*/{}
  , /*decltype(_impl_._relate_area_cached_byte_size_)*/{0}
  , /*decltype(_impl_.basic_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AreaDefaultTypeInternal() {}
  union {
    Area _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AreaDefaultTypeInternal _Area_default_instance_;
PROTOBUF_CONSTEXPR Coord::Coord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordDefaultTypeInternal() {}
  union {
    Coord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordDefaultTypeInternal _Coord_default_instance_;
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR Segment::Segment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edge_1_)*/nullptr
  , /*decltype(_impl_.edge_2_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.dir_mode_)*/0
  , /*decltype(_impl_.lock_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentDefaultTypeInternal() {}
  union {
    Segment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentDefaultTypeInternal _Segment_default_instance_;
PROTOBUF_CONSTEXPR Describe_AgvDescEntry_DoNotUse::Describe_AgvDescEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_AgvDescEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_AgvDescEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_AgvDescEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_AgvDescEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_AgvDescEntry_DoNotUseDefaultTypeInternal _Describe_AgvDescEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_CtlDescEntry_DoNotUse::Describe_CtlDescEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_CtlDescEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_CtlDescEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_CtlDescEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_CtlDescEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_CtlDescEntry_DoNotUseDefaultTypeInternal _Describe_CtlDescEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_AvoDescEntry_DoNotUse::Describe_AvoDescEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_AvoDescEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_AvoDescEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_AvoDescEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_AvoDescEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_AvoDescEntry_DoNotUseDefaultTypeInternal _Describe_AvoDescEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_RutDescEntry_DoNotUse::Describe_RutDescEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_RutDescEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_RutDescEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_RutDescEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_RutDescEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_RutDescEntry_DoNotUseDefaultTypeInternal _Describe_RutDescEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_ActionDescEntry_DoNotUse::Describe_ActionDescEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_ActionDescEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_ActionDescEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_ActionDescEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_ActionDescEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_ActionDescEntry_DoNotUseDefaultTypeInternal _Describe_ActionDescEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_AreaDescEntry_DoNotUse::Describe_AreaDescEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_AreaDescEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_AreaDescEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_AreaDescEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_AreaDescEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_AreaDescEntry_DoNotUseDefaultTypeInternal _Describe_AreaDescEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_ParamTmplEntry_DoNotUse::Describe_ParamTmplEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_ParamTmplEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_ParamTmplEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_ParamTmplEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_ParamTmplEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_ParamTmplEntry_DoNotUseDefaultTypeInternal _Describe_ParamTmplEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_ActionTmplEntry_DoNotUse::Describe_ActionTmplEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_ActionTmplEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_ActionTmplEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_ActionTmplEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_ActionTmplEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_ActionTmplEntry_DoNotUseDefaultTypeInternal _Describe_ActionTmplEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_TaskActionTmplEntry_DoNotUse::Describe_TaskActionTmplEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_TaskActionTmplEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_TaskActionTmplEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_TaskActionTmplEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_TaskActionTmplEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_TaskActionTmplEntry_DoNotUseDefaultTypeInternal _Describe_TaskActionTmplEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_ParamTmpl_DataEntry_DoNotUse::Describe_ParamTmpl_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_ParamTmpl_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_ParamTmpl_DataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_ParamTmpl_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_ParamTmpl_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_ParamTmpl_DataEntry_DoNotUseDefaultTypeInternal _Describe_ParamTmpl_DataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_ParamTmpl_ParamInstanceListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_ParamTmpl_ParamInstanceListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_ParamTmpl_ParamInstanceListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_ParamTmpl_ParamInstanceListEntry_DoNotUseDefaultTypeInternal _Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUseDefaultTypeInternal _Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_ParamTmpl_paramTmplInstance::Describe_ParamTmpl_paramTmplInstance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.describe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_ParamTmpl_paramTmplInstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_ParamTmpl_paramTmplInstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_ParamTmpl_paramTmplInstanceDefaultTypeInternal() {}
  union {
    Describe_ParamTmpl_paramTmplInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_ParamTmpl_paramTmplInstanceDefaultTypeInternal _Describe_ParamTmpl_paramTmplInstance_default_instance_;
PROTOBUF_CONSTEXPR Describe_ParamTmpl::Describe_ParamTmpl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.param_instance_list_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_ParamTmplDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_ParamTmplDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_ParamTmplDefaultTypeInternal() {}
  union {
    Describe_ParamTmpl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_ParamTmplDefaultTypeInternal _Describe_ParamTmpl_default_instance_;
PROTOBUF_CONSTEXPR Describe_actionTmpl_ActInstanceListEntry_DoNotUse::Describe_actionTmpl_ActInstanceListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_actionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_actionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_actionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_actionTmpl_ActInstanceListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_actionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal _Describe_actionTmpl_ActInstanceListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_actionTmpl_action::Describe_actionTmpl_action(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_actionTmpl_actionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_actionTmpl_actionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_actionTmpl_actionDefaultTypeInternal() {}
  union {
    Describe_actionTmpl_action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_actionTmpl_actionDefaultTypeInternal _Describe_actionTmpl_action_default_instance_;
PROTOBUF_CONSTEXPR Describe_actionTmpl_actTmplInstance::Describe_actionTmpl_actTmplInstance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.act_list_)*/{}
  , /*decltype(_impl_.describe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_actionTmpl_actTmplInstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_actionTmpl_actTmplInstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_actionTmpl_actTmplInstanceDefaultTypeInternal() {}
  union {
    Describe_actionTmpl_actTmplInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_actionTmpl_actTmplInstanceDefaultTypeInternal _Describe_actionTmpl_actTmplInstance_default_instance_;
PROTOBUF_CONSTEXPR Describe_actionTmpl::Describe_actionTmpl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.act_instance_list_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.descibe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_actionTmplDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_actionTmplDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_actionTmplDefaultTypeInternal() {}
  union {
    Describe_actionTmpl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_actionTmplDefaultTypeInternal _Describe_actionTmpl_default_instance_;
PROTOBUF_CONSTEXPR Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_taskActionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_taskActionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_taskActionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_taskActionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal _Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_taskActionTmpl_action::Describe_taskActionTmpl_action(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_taskActionTmpl_actionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_taskActionTmpl_actionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_taskActionTmpl_actionDefaultTypeInternal() {}
  union {
    Describe_taskActionTmpl_action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_taskActionTmpl_actionDefaultTypeInternal _Describe_taskActionTmpl_action_default_instance_;
PROTOBUF_CONSTEXPR Describe_taskActionTmpl_actTmplInstance::Describe_taskActionTmpl_actTmplInstance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.act_list_)*/{}
  , /*decltype(_impl_.describe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stype_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gtype_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agv_type_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layer_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_taskActionTmpl_actTmplInstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_taskActionTmpl_actTmplInstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_taskActionTmpl_actTmplInstanceDefaultTypeInternal() {}
  union {
    Describe_taskActionTmpl_actTmplInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_taskActionTmpl_actTmplInstanceDefaultTypeInternal _Describe_taskActionTmpl_actTmplInstance_default_instance_;
PROTOBUF_CONSTEXPR Describe_taskActionTmpl::Describe_taskActionTmpl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.act_instance_list_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.descibe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agv_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layer_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_taskActionTmplDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_taskActionTmplDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_taskActionTmplDefaultTypeInternal() {}
  union {
    Describe_taskActionTmpl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_taskActionTmplDefaultTypeInternal _Describe_taskActionTmpl_default_instance_;
PROTOBUF_CONSTEXPR Describe_dataDesc_ParamEntry_DoNotUse::Describe_dataDesc_ParamEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Describe_dataDesc_ParamEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_dataDesc_ParamEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_dataDesc_ParamEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Describe_dataDesc_ParamEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_dataDesc_ParamEntry_DoNotUseDefaultTypeInternal _Describe_dataDesc_ParamEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Describe_dataDesc::Describe_dataDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.describe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Describe_dataDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Describe_dataDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Describe_dataDescDefaultTypeInternal() {}
  union {
    Describe_dataDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Describe_dataDescDefaultTypeInternal _Describe_dataDesc_default_instance_;
PROTOBUF_CONSTEXPR Describe::Describe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agv_desc_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.ctl_desc_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.avo_desc_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.rut_desc_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.action_desc_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.area_desc_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.param_tmpl_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.action_tmpl_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.task_action_tmpl_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescribeDefaultTypeInternal() {}
  union {
    Describe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescribeDefaultTypeInternal _Describe_default_instance_;
PROTOBUF_CONSTEXPR Store_offset::Store_offset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layer1_)*/nullptr
  , /*decltype(_impl_.layer2_)*/nullptr
  , /*decltype(_impl_.layer3_)*/nullptr
  , /*decltype(_impl_.layer4_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Store_offsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Store_offsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Store_offsetDefaultTypeInternal() {}
  union {
    Store_offset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Store_offsetDefaultTypeInternal _Store_offset_default_instance_;
PROTOBUF_CONSTEXPR store_offset_by_layer::store_offset_by_layer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.high_)*/0
  , /*decltype(_impl_.horizontal_offset_)*/0
  , /*decltype(_impl_.vertical_offset_)*/0
  , /*decltype(_impl_.fork_high_offset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct store_offset_by_layerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR store_offset_by_layerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~store_offset_by_layerDefaultTypeInternal() {}
  union {
    store_offset_by_layer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 store_offset_by_layerDefaultTypeInternal _store_offset_by_layer_default_instance_;
PROTOBUF_CONSTEXPR Label::Label(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coord_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_.color_r_)*/0
  , /*decltype(_impl_.color_g_)*/0
  , /*decltype(_impl_.color_b_)*/0
  , /*decltype(_impl_.opacity_)*/0
  , /*decltype(_impl_.bold_)*/0
  , /*decltype(_impl_.italic_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.rotate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelDefaultTypeInternal() {}
  union {
    Label _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelDefaultTypeInternal _Label_default_instance_;
PROTOBUF_CONSTEXPR AgvParam_ProtectionEntry_DoNotUse::AgvParam_ProtectionEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AgvParam_ProtectionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgvParam_ProtectionEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgvParam_ProtectionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AgvParam_ProtectionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgvParam_ProtectionEntry_DoNotUseDefaultTypeInternal _AgvParam_ProtectionEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AgvParam_ReflectorEntry_DoNotUse::AgvParam_ReflectorEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AgvParam_ReflectorEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgvParam_ReflectorEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgvParam_ReflectorEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AgvParam_ReflectorEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgvParam_ReflectorEntry_DoNotUseDefaultTypeInternal _AgvParam_ReflectorEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AgvParam_opto_elec::AgvParam_opto_elec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.signal_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgvParam_opto_elecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgvParam_opto_elecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgvParam_opto_elecDefaultTypeInternal() {}
  union {
    AgvParam_opto_elec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgvParam_opto_elecDefaultTypeInternal _AgvParam_opto_elec_default_instance_;
PROTOBUF_CONSTEXPR AgvParam::AgvParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.opto_elec_pos_)*/{}
  , /*decltype(_impl_.protection_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.reflector_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.agv_subtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_pos_)*/nullptr
  , /*decltype(_impl_.pallet_pos_)*/nullptr
  , /*decltype(_impl_.body_width_)*/0
  , /*decltype(_impl_.body_length_)*/0
  , /*decltype(_impl_.body_high_)*/0
  , /*decltype(_impl_.wheel_base_)*/0
  , /*decltype(_impl_.rotate_radius_)*/0
  , /*decltype(_impl_.p2head_)*/0
  , /*decltype(_impl_.p2tail_)*/0
  , /*decltype(_impl_.p2nav_)*/0
  , /*decltype(_impl_.fork_min_)*/0
  , /*decltype(_impl_.fork_max_)*/0
  , /*decltype(_impl_.fork_noload_high_)*/0
  , /*decltype(_impl_.fork_load_high_)*/0
  , /*decltype(_impl_.fork_noload_back_high_)*/0
  , /*decltype(_impl_.shelf_num_)*/0
  , /*decltype(_impl_.layer_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgvParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgvParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgvParamDefaultTypeInternal() {}
  union {
    AgvParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgvParamDefaultTypeInternal _AgvParam_default_instance_;
PROTOBUF_CONSTEXPR Protection_Mode::Protection_Mode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.area1_)*/nullptr
  , /*decltype(_impl_.area2_)*/nullptr
  , /*decltype(_impl_.area3_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Protection_ModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Protection_ModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Protection_ModeDefaultTypeInternal() {}
  union {
    Protection_Mode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Protection_ModeDefaultTypeInternal _Protection_Mode_default_instance_;
PROTOBUF_CONSTEXPR Protection_Polygon::Protection_Polygon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coord_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Protection_PolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Protection_PolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Protection_PolygonDefaultTypeInternal() {}
  union {
    Protection_Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Protection_PolygonDefaultTypeInternal _Protection_Polygon_default_instance_;
PROTOBUF_CONSTEXPR Protection::Protection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mode_)*/{}
  , /*decltype(_impl_.dev_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.scan_height_)*/0
  , /*decltype(_impl_.pos_up_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtectionDefaultTypeInternal() {}
  union {
    Protection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtectionDefaultTypeInternal _Protection_default_instance_;
PROTOBUF_CONSTEXPR ReplaceBatteryStation_SpaceEntry_DoNotUse::ReplaceBatteryStation_SpaceEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ReplaceBatteryStation_SpaceEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplaceBatteryStation_SpaceEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplaceBatteryStation_SpaceEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ReplaceBatteryStation_SpaceEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplaceBatteryStation_SpaceEntry_DoNotUseDefaultTypeInternal _ReplaceBatteryStation_SpaceEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ReplaceBatteryStation_Space::ReplaceBatteryStation_Space(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.pos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplaceBatteryStation_SpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplaceBatteryStation_SpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplaceBatteryStation_SpaceDefaultTypeInternal() {}
  union {
    ReplaceBatteryStation_Space _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplaceBatteryStation_SpaceDefaultTypeInternal _ReplaceBatteryStation_Space_default_instance_;
PROTOBUF_CONSTEXPR ReplaceBatteryStation::ReplaceBatteryStation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.space_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.dist_p1_p2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplaceBatteryStationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplaceBatteryStationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplaceBatteryStationDefaultTypeInternal() {}
  union {
    ReplaceBatteryStation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplaceBatteryStationDefaultTypeInternal _ReplaceBatteryStation_default_instance_;
PROTOBUF_CONSTEXPR Reflector::Reflector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coord_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.area_)*/0
  , /*decltype(_impl_.ap_area_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReflectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReflectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReflectorDefaultTypeInternal() {}
  union {
    Reflector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReflectorDefaultTypeInternal _Reflector_default_instance_;
PROTOBUF_CONSTEXPR Pallet::Pallet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.describe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.high_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PalletDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PalletDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PalletDefaultTypeInternal() {}
  union {
    Pallet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PalletDefaultTypeInternal _Pallet_default_instance_;
PROTOBUF_CONSTEXPR DefautForkSet_PalletLoadHighsEntry_DoNotUse::DefautForkSet_PalletLoadHighsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DefautForkSet_PalletLoadHighsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefautForkSet_PalletLoadHighsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefautForkSet_PalletLoadHighsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DefautForkSet_PalletLoadHighsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefautForkSet_PalletLoadHighsEntry_DoNotUseDefaultTypeInternal _DefautForkSet_PalletLoadHighsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DefautForkSet::DefautForkSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pallet_load_highs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.agv_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pallet_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.load_high_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DefautForkSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefautForkSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefautForkSetDefaultTypeInternal() {}
  union {
    DefautForkSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefautForkSetDefaultTypeInternal _DefautForkSet_default_instance_;
}  // namespace agv_map
static ::_pb::Metadata file_level_metadata_agv_5fmap_2eproto[80];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_agv_5fmap_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_agv_5fmap_2eproto = nullptr;

const uint32_t TableStruct_agv_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_AgvparamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_AgvparamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_AgvparamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_AgvparamEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_PalletEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_PalletEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_PalletEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_PalletEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _impl_.describe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _impl_.store_off_config_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _impl_.agvparam_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _impl_.replace_battery_station_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _impl_.pallet_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _impl_.default_frok_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_NodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_NodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_NodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_NodeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_SegmentEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_SegmentEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_SegmentEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_SegmentEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_AreaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_AreaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_AreaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_AreaEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_LabelEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_LabelEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_LabelEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_LabelEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_ShelfEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_ShelfEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_ShelfEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_ShelfEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, _impl_.conf_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, _impl_.segment_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, _impl_.area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, _impl_.shelf_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf_AgvIdsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf_AgvIdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf_AgvIdsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf_AgvIdsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf_param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf_param, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf_param, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.map_ts_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.map_zone_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.map_name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.max_x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.min_x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.max_y_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.min_y_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.project_name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.agv_ids_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.gcood_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.gcood_dm_value_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.background_pos_x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.background_pos_y_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.background_length_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.background_width_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _impl_.mission_type_list_),
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_ParamMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_ParamMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_ParamMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_ParamMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data_ParamMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data_ParamMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data_ParamMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data_ParamMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data_IndexMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data_IndexMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data_IndexMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data_IndexMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data, _impl_.param_map_),
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData_data, _impl_.index_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::sceneData, _impl_.param_map_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig_GetHighEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig_GetHighEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig_GetHighEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig_GetHighEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig_PutHighEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig_PutHighEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig_PutHighEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig_PutHighEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _impl_.layernum_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _impl_.proto_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _impl_.get_high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _impl_.put_high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _impl_.shelf_width_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ShelfCofig, _impl_.shelf_depth_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic_AgvTypeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic_AgvTypeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic_AgvTypeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic_AgvTypeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.coord_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.qrcode_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.node_info_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.floor_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.agv_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.qrcode_str_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.stype_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.mission_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.instapnt_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.pallet_dir_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.virtual__),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.additional_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.shelf_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Basic, _impl_.shelf_dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Sim_param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Sim_param, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Sim_param, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Sim_param, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Sim_param, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Sim_param, _impl_.target_area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Sim_param, _impl_.target_sta_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node_Sim_param, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.basic_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.in_area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.edge_list_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.agv_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.avo_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.ctl_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.rut_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.act_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Node, _impl_.sim_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.start_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.start_pos_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.end_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.end_pos_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.seglen_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.agv_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.floor_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.trans_angle_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.orientation_angle_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.arc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.bothways_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.c_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.speed_max_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.bond_seg_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Basic, _impl_.virtual__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Arc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Arc, _impl_.cen_pnt_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Arc, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge_Arc, _impl_.clockdir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.basic_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.in_area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.agv_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.avo_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.ctl_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.rut_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.act_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.control_point_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Edge, _impl_.curve_point_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_ParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_ParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_ParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_ParamEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_AgvNumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_AgvNumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_AgvNumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_AgvNumEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Basic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Basic, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Basic, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Basic, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, _impl_.basic_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, _impl_.param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, _impl_.vertex_list_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, _impl_.node_in_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, _impl_.agv_num_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, _impl_.relate_area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Coord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Coord, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Coord, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Position, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Position, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Position, _impl_.angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, _impl_.dir_mode_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, _impl_.lock_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, _impl_.edge_1_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, _impl_.edge_2_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AgvDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AgvDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AgvDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AgvDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_CtlDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_CtlDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_CtlDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_CtlDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AvoDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AvoDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AvoDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AvoDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_RutDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_RutDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_RutDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_RutDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ActionDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ActionDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ActionDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ActionDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AreaDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AreaDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AreaDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AreaDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmplEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmplEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmplEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmplEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ActionTmplEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ActionTmplEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ActionTmplEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ActionTmplEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_TaskActionTmplEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_TaskActionTmplEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_TaskActionTmplEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_TaskActionTmplEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_paramTmplInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_paramTmplInstance, _impl_.describe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_paramTmplInstance, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl_paramTmplInstance, _impl_.param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_ParamTmpl, _impl_.param_instance_list_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_action, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_action, _impl_.block_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_action, _impl_.param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_actTmplInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_actTmplInstance, _impl_.describe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl_actTmplInstance, _impl_.act_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl, _impl_.descibe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_actionTmpl, _impl_.act_instance_list_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_action, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_action, _impl_.action_name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_action, _impl_.block_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_action, _impl_.param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_actTmplInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_actTmplInstance, _impl_.describe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_actTmplInstance, _impl_.stype_value_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_actTmplInstance, _impl_.gtype_value_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_actTmplInstance, _impl_.agv_type_value_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_actTmplInstance, _impl_.layer_value_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl_actTmplInstance, _impl_.act_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl, _impl_.descibe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl, _impl_.stype_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl, _impl_.gtype_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl, _impl_.agv_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_taskActionTmpl, _impl_.act_instance_list_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_dataDesc_ParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_dataDesc_ParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_dataDesc_ParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_dataDesc_ParamEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_dataDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_dataDesc, _impl_.describe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_dataDesc, _impl_.param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.agv_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.ctl_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.avo_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.rut_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.action_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.area_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.param_tmpl_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.action_tmpl_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _impl_.task_action_tmpl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, _impl_.layer1_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, _impl_.layer2_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, _impl_.layer3_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, _impl_.layer4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, _impl_.horizontal_offset_),
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, _impl_.vertical_offset_),
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, _impl_.fork_high_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.coord_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.color_r_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.color_g_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.color_b_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.opacity_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.bold_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.italic_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Label, _impl_.rotate_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_ProtectionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_ProtectionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_ProtectionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_ProtectionEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_ReflectorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_ReflectorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_ReflectorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_ReflectorEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_opto_elec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_opto_elec, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_opto_elec, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam_opto_elec, _impl_.signal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.agv_subtype_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.body_width_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.body_length_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.body_high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.wheel_base_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.rotate_radius_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.p2head_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.p2tail_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.p2nav_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.fork_min_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.fork_max_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.fork_noload_high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.id_pos_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.pallet_pos_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.opto_elec_pos_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.protection_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.reflector_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.fork_load_high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.fork_noload_back_high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.shelf_num_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AgvParam, _impl_.layer_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection_Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection_Mode, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection_Mode, _impl_.area1_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection_Mode, _impl_.area2_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection_Mode, _impl_.area3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection_Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection_Polygon, _impl_.coord_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection, _impl_.scan_height_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection, _impl_.dev_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection, _impl_.pos_up_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Protection, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation_Space, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation_Space, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation_Space, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation_Space, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation, _impl_.dist_p1_p2_),
  PROTOBUF_FIELD_OFFSET(::agv_map::ReplaceBatteryStation, _impl_.space_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Reflector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Reflector, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Reflector, _impl_.coord_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Reflector, _impl_.area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Reflector, _impl_.ap_area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Pallet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::Pallet, _impl_.describe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Pallet, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Pallet, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Pallet, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Pallet, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Pallet, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet, _impl_.agv_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet, _impl_.pallet_name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet, _impl_.load_high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::DefautForkSet, _impl_.pallet_load_highs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::agv_map::MAP_ARR_AgvparamEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse)},
  { 30, 38, -1, sizeof(::agv_map::MAP_ARR_PalletEntry_DoNotUse)},
  { 40, 48, -1, sizeof(::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse)},
  { 50, -1, -1, sizeof(::agv_map::MAP_ARR)},
  { 63, 71, -1, sizeof(::agv_map::Map_NodeEntry_DoNotUse)},
  { 73, 81, -1, sizeof(::agv_map::Map_SegmentEntry_DoNotUse)},
  { 83, 91, -1, sizeof(::agv_map::Map_AreaEntry_DoNotUse)},
  { 93, 101, -1, sizeof(::agv_map::Map_LabelEntry_DoNotUse)},
  { 103, 111, -1, sizeof(::agv_map::Map_ShelfEntry_DoNotUse)},
  { 113, -1, -1, sizeof(::agv_map::Map)},
  { 125, 133, -1, sizeof(::agv_map::Conf_AgvIdsEntry_DoNotUse)},
  { 135, -1, -1, sizeof(::agv_map::Conf_param)},
  { 143, -1, -1, sizeof(::agv_map::Conf)},
  { 165, 173, -1, sizeof(::agv_map::sceneData_ParamMapEntry_DoNotUse)},
  { 175, 183, -1, sizeof(::agv_map::sceneData_data_ParamMapEntry_DoNotUse)},
  { 185, 193, -1, sizeof(::agv_map::sceneData_data_IndexMapEntry_DoNotUse)},
  { 195, -1, -1, sizeof(::agv_map::sceneData_data)},
  { 203, -1, -1, sizeof(::agv_map::sceneData)},
  { 210, 218, -1, sizeof(::agv_map::ShelfCofig_GetHighEntry_DoNotUse)},
  { 220, 228, -1, sizeof(::agv_map::ShelfCofig_PutHighEntry_DoNotUse)},
  { 230, -1, -1, sizeof(::agv_map::ShelfCofig)},
  { 244, 252, -1, sizeof(::agv_map::Node_Basic_AgvTypeEntry_DoNotUse)},
  { 254, -1, -1, sizeof(::agv_map::Node_Basic)},
  { 278, -1, -1, sizeof(::agv_map::Node_Sim_param)},
  { 291, -1, -1, sizeof(::agv_map::Node)},
  { 306, 314, -1, sizeof(::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse)},
  { 316, -1, -1, sizeof(::agv_map::Edge_Basic)},
  { 342, -1, -1, sizeof(::agv_map::Edge_Arc)},
  { 351, -1, -1, sizeof(::agv_map::Edge)},
  { 366, 374, -1, sizeof(::agv_map::Area_ParamEntry_DoNotUse)},
  { 376, 384, -1, sizeof(::agv_map::Area_AgvNumEntry_DoNotUse)},
  { 386, -1, -1, sizeof(::agv_map::Area_Basic)},
  { 395, -1, -1, sizeof(::agv_map::Area)},
  { 407, -1, -1, sizeof(::agv_map::Coord)},
  { 415, -1, -1, sizeof(::agv_map::Position)},
  { 424, -1, -1, sizeof(::agv_map::Segment)},
  { 436, 444, -1, sizeof(::agv_map::Describe_AgvDescEntry_DoNotUse)},
  { 446, 454, -1, sizeof(::agv_map::Describe_CtlDescEntry_DoNotUse)},
  { 456, 464, -1, sizeof(::agv_map::Describe_AvoDescEntry_DoNotUse)},
  { 466, 474, -1, sizeof(::agv_map::Describe_RutDescEntry_DoNotUse)},
  { 476, 484, -1, sizeof(::agv_map::Describe_ActionDescEntry_DoNotUse)},
  { 486, 494, -1, sizeof(::agv_map::Describe_AreaDescEntry_DoNotUse)},
  { 496, 504, -1, sizeof(::agv_map::Describe_ParamTmplEntry_DoNotUse)},
  { 506, 514, -1, sizeof(::agv_map::Describe_ActionTmplEntry_DoNotUse)},
  { 516, 524, -1, sizeof(::agv_map::Describe_TaskActionTmplEntry_DoNotUse)},
  { 526, 534, -1, sizeof(::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse)},
  { 536, 544, -1, sizeof(::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse)},
  { 546, 554, -1, sizeof(::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse)},
  { 556, -1, -1, sizeof(::agv_map::Describe_ParamTmpl_paramTmplInstance)},
  { 565, -1, -1, sizeof(::agv_map::Describe_ParamTmpl)},
  { 574, 582, -1, sizeof(::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse)},
  { 584, -1, -1, sizeof(::agv_map::Describe_actionTmpl_action)},
  { 593, -1, -1, sizeof(::agv_map::Describe_actionTmpl_actTmplInstance)},
  { 601, -1, -1, sizeof(::agv_map::Describe_actionTmpl)},
  { 610, 618, -1, sizeof(::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse)},
  { 620, -1, -1, sizeof(::agv_map::Describe_taskActionTmpl_action)},
  { 630, -1, -1, sizeof(::agv_map::Describe_taskActionTmpl_actTmplInstance)},
  { 642, -1, -1, sizeof(::agv_map::Describe_taskActionTmpl)},
  { 655, 663, -1, sizeof(::agv_map::Describe_dataDesc_ParamEntry_DoNotUse)},
  { 665, -1, -1, sizeof(::agv_map::Describe_dataDesc)},
  { 673, -1, -1, sizeof(::agv_map::Describe)},
  { 688, -1, -1, sizeof(::agv_map::Store_offset)},
  { 698, -1, -1, sizeof(::agv_map::store_offset_by_layer)},
  { 708, -1, -1, sizeof(::agv_map::Label)},
  { 727, 735, -1, sizeof(::agv_map::AgvParam_ProtectionEntry_DoNotUse)},
  { 737, 745, -1, sizeof(::agv_map::AgvParam_ReflectorEntry_DoNotUse)},
  { 747, -1, -1, sizeof(::agv_map::AgvParam_opto_elec)},
  { 756, -1, -1, sizeof(::agv_map::AgvParam)},
  { 783, -1, -1, sizeof(::agv_map::Protection_Mode)},
  { 793, -1, -1, sizeof(::agv_map::Protection_Polygon)},
  { 800, -1, -1, sizeof(::agv_map::Protection)},
  { 811, 819, -1, sizeof(::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse)},
  { 821, -1, -1, sizeof(::agv_map::ReplaceBatteryStation_Space)},
  { 830, -1, -1, sizeof(::agv_map::ReplaceBatteryStation)},
  { 839, -1, -1, sizeof(::agv_map::Reflector)},
  { 849, -1, -1, sizeof(::agv_map::Pallet)},
  { 861, 869, -1, sizeof(::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse)},
  { 871, -1, -1, sizeof(::agv_map::DefautForkSet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::agv_map::_MAP_ARR_StoreOffConfigEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_MAP_ARR_AgvparamEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_MAP_ARR_ReplaceBatteryStationEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_MAP_ARR_PalletEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_MAP_ARR_DefaultFrokEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_MAP_ARR_default_instance_._instance,
  &::agv_map::_Map_NodeEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Map_SegmentEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Map_AreaEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Map_LabelEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Map_ShelfEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Map_default_instance_._instance,
  &::agv_map::_Conf_AgvIdsEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Conf_param_default_instance_._instance,
  &::agv_map::_Conf_default_instance_._instance,
  &::agv_map::_sceneData_ParamMapEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_sceneData_data_ParamMapEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_sceneData_data_IndexMapEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_sceneData_data_default_instance_._instance,
  &::agv_map::_sceneData_default_instance_._instance,
  &::agv_map::_ShelfCofig_GetHighEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_ShelfCofig_PutHighEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_ShelfCofig_default_instance_._instance,
  &::agv_map::_Node_Basic_AgvTypeEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Node_Basic_default_instance_._instance,
  &::agv_map::_Node_Sim_param_default_instance_._instance,
  &::agv_map::_Node_default_instance_._instance,
  &::agv_map::_Edge_Basic_AgvTypeEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Edge_Basic_default_instance_._instance,
  &::agv_map::_Edge_Arc_default_instance_._instance,
  &::agv_map::_Edge_default_instance_._instance,
  &::agv_map::_Area_ParamEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Area_AgvNumEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Area_Basic_default_instance_._instance,
  &::agv_map::_Area_default_instance_._instance,
  &::agv_map::_Coord_default_instance_._instance,
  &::agv_map::_Position_default_instance_._instance,
  &::agv_map::_Segment_default_instance_._instance,
  &::agv_map::_Describe_AgvDescEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_CtlDescEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_AvoDescEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_RutDescEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_ActionDescEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_AreaDescEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_ParamTmplEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_ActionTmplEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_TaskActionTmplEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_ParamTmpl_DataEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_ParamTmpl_paramTmplInstance_default_instance_._instance,
  &::agv_map::_Describe_ParamTmpl_default_instance_._instance,
  &::agv_map::_Describe_actionTmpl_ActInstanceListEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_actionTmpl_action_default_instance_._instance,
  &::agv_map::_Describe_actionTmpl_actTmplInstance_default_instance_._instance,
  &::agv_map::_Describe_actionTmpl_default_instance_._instance,
  &::agv_map::_Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_taskActionTmpl_action_default_instance_._instance,
  &::agv_map::_Describe_taskActionTmpl_actTmplInstance_default_instance_._instance,
  &::agv_map::_Describe_taskActionTmpl_default_instance_._instance,
  &::agv_map::_Describe_dataDesc_ParamEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_Describe_dataDesc_default_instance_._instance,
  &::agv_map::_Describe_default_instance_._instance,
  &::agv_map::_Store_offset_default_instance_._instance,
  &::agv_map::_store_offset_by_layer_default_instance_._instance,
  &::agv_map::_Label_default_instance_._instance,
  &::agv_map::_AgvParam_ProtectionEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_AgvParam_ReflectorEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_AgvParam_opto_elec_default_instance_._instance,
  &::agv_map::_AgvParam_default_instance_._instance,
  &::agv_map::_Protection_Mode_default_instance_._instance,
  &::agv_map::_Protection_Polygon_default_instance_._instance,
  &::agv_map::_Protection_default_instance_._instance,
  &::agv_map::_ReplaceBatteryStation_SpaceEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_ReplaceBatteryStation_Space_default_instance_._instance,
  &::agv_map::_ReplaceBatteryStation_default_instance_._instance,
  &::agv_map::_Reflector_default_instance_._instance,
  &::agv_map::_Pallet_default_instance_._instance,
  &::agv_map::_DefautForkSet_PalletLoadHighsEntry_DoNotUse_default_instance_._instance,
  &::agv_map::_DefautForkSet_default_instance_._instance,
};

const char descriptor_table_protodef_agv_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ragv_map.proto\022\007agv_map\"\354\005\n\007MAP_ARR\022\031\n\003"
  "map\030\001 \003(\0132\014.agv_map.Map\022#\n\010describe\030\002 \001("
  "\0132\021.agv_map.Describe\022>\n\020store_off_config"
  "\030\003 \003(\0132$.agv_map.MAP_ARR.StoreOffConfigE"
  "ntry\0220\n\010agvparam\030\004 \003(\0132\036.agv_map.MAP_ARR"
  ".AgvparamEntry\022L\n\027replace_battery_statio"
  "n\030\005 \003(\0132+.agv_map.MAP_ARR.ReplaceBattery"
  "StationEntry\022,\n\006pallet\030\006 \003(\0132\034.agv_map.M"
  "AP_ARR.PalletEntry\0227\n\014default_frok\030\007 \003(\013"
  "2!.agv_map.MAP_ARR.DefaultFrokEntry\032L\n\023S"
  "toreOffConfigEntry\022\013\n\003key\030\001 \001(\005\022$\n\005value"
  "\030\002 \001(\0132\025.agv_map.Store_offset:\0028\001\032B\n\rAgv"
  "paramEntry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021"
  ".agv_map.AgvParam:\0028\001\032\\\n\032ReplaceBatteryS"
  "tationEntry\022\013\n\003key\030\001 \001(\005\022-\n\005value\030\002 \001(\0132"
  "\036.agv_map.ReplaceBatteryStation:\0028\001\032>\n\013P"
  "alletEntry\022\013\n\003key\030\001 \001(\005\022\036\n\005value\030\002 \001(\0132\017"
  ".agv_map.Pallet:\0028\001\032J\n\020DefaultFrokEntry\022"
  "\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.agv_map.De"
  "fautForkSet:\0028\001\"\245\004\n\003Map\022\033\n\004conf\030\001 \001(\0132\r."
  "agv_map.Conf\022$\n\004node\030\002 \003(\0132\026.agv_map.Map"
  ".NodeEntry\022*\n\007segment\030\003 \003(\0132\031.agv_map.Ma"
  "p.SegmentEntry\022$\n\004area\030\004 \003(\0132\026.agv_map.M"
  "ap.AreaEntry\022&\n\005label\030\005 \003(\0132\027.agv_map.Ma"
  "p.LabelEntry\022&\n\005shelf\030\006 \003(\0132\027.agv_map.Ma"
  "p.ShelfEntry\032:\n\tNodeEntry\022\013\n\003key\030\001 \001(\005\022\034"
  "\n\005value\030\002 \001(\0132\r.agv_map.Node:\0028\001\032@\n\014Segm"
  "entEntry\022\013\n\003key\030\001 \001(\005\022\037\n\005value\030\002 \001(\0132\020.a"
  "gv_map.Segment:\0028\001\032:\n\tAreaEntry\022\013\n\003key\030\001"
  " \001(\005\022\034\n\005value\030\002 \001(\0132\r.agv_map.Area:\0028\001\032<"
  "\n\nLabelEntry\022\013\n\003key\030\001 \001(\005\022\035\n\005value\030\002 \001(\013"
  "2\016.agv_map.Label:\0028\001\032A\n\nShelfEntry\022\013\n\003ke"
  "y\030\001 \001(\005\022\"\n\005value\030\002 \001(\0132\023.agv_map.ShelfCo"
  "fig:\0028\001\"\321\003\n\004Conf\022\016\n\006map_ts\030\001 \001(\003\022\020\n\010map_"
  "zone\030\002 \001(\005\022\020\n\010map_name\030\003 \001(\t\022\r\n\005max_x\030\004 "
  "\001(\005\022\r\n\005min_x\030\005 \001(\005\022\r\n\005max_y\030\006 \001(\005\022\r\n\005min"
  "_y\030\007 \001(\005\022\024\n\014project_name\030\010 \001(\t\022*\n\007agv_id"
  "s\030\t \003(\0132\031.agv_map.Conf.AgvIdsEntry\022\022\n\ngc"
  "ood_type\030\n \001(\t\022\026\n\016gcood_dm_value\030\013 \001(\005\022\030"
  "\n\020background_pos_x\030\014 \001(\005\022\030\n\020background_p"
  "os_y\030\r \001(\005\022\031\n\021background_length\030\016 \001(\005\022\030\n"
  "\020background_width\030\017 \001(\005\022.\n\021mission_type_"
  "list\030\020 \003(\0132\023.agv_map.Conf.param\032-\n\013AgvId"
  "sEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\032#"
  "\n\005param\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\351\002\n\t"
  "sceneData\0223\n\tparam_map\030\001 \003(\0132 .agv_map.s"
  "ceneData.ParamMapEntry\032H\n\rParamMapEntry\022"
  "\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.agv_map.sc"
  "eneData.data:\0028\001\032\334\001\n\004data\0228\n\tparam_map\030\001"
  " \003(\0132%.agv_map.sceneData.data.ParamMapEn"
  "try\0228\n\tindex_map\030\002 \003(\0132%.agv_map.sceneDa"
  "ta.data.IndexMapEntry\032/\n\rParamMapEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032/\n\rIndexM"
  "apEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
  "\301\002\n\nShelfCofig\022\014\n\004name\030\001 \001(\t\022\020\n\010layerNum"
  "\030\002 \001(\005\022\r\n\005depth\030\003 \001(\005\022\022\n\nproto_type\030\004 \001("
  "\005\0222\n\010get_high\030\005 \003(\0132 .agv_map.ShelfCofig"
  ".GetHighEntry\0222\n\010put_high\030\006 \003(\0132 .agv_ma"
  "p.ShelfCofig.PutHighEntry\022\023\n\013shelf_width"
  "\030\007 \001(\005\022\023\n\013shelf_depth\030\010 \001(\005\032.\n\014GetHighEn"
  "try\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\032.\n\014P"
  "utHighEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:"
  "\0028\001\"\356\006\n\004Node\022\"\n\005basic\030\001 \001(\0132\023.agv_map.No"
  "de.Basic\022\017\n\007in_area\030\002 \003(\005\022\021\n\tedge_list\030\003"
  " \003(\005\022%\n\tagv_param\030\004 \001(\0132\022.agv_map.sceneD"
  "ata\022%\n\tavo_param\030\005 \001(\0132\022.agv_map.sceneDa"
  "ta\022%\n\tctl_param\030\006 \001(\0132\022.agv_map.sceneDat"
  "a\022%\n\trut_param\030\007 \001(\0132\022.agv_map.sceneData"
  "\022%\n\tact_param\030\010 \001(\0132\022.agv_map.sceneData\022"
  "*\n\tsim_param\030\t \001(\0132\027.agv_map.Node.Sim_pa"
  "ram\032\247\003\n\005Basic\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022"
  "\014\n\004type\030\003 \001(\005\022\035\n\005coord\030\004 \001(\0132\016.agv_map.C"
  "oord\022\020\n\010group_id\030\005 \001(\005\022\016\n\006QRcode\030\006 \001(\021\022\021"
  "\n\tnode_info\030\007 \001(\005\022\r\n\005floor\030\010 \001(\021\0222\n\010agv_"
  "type\030\t \003(\0132 .agv_map.Node.Basic.AgvTypeE"
  "ntry\022\022\n\nqrcode_str\030\n \001(\t\022\r\n\005stype\030\013 \001(\005\022"
  "\024\n\014mission_type\030\014 \001(\t\022\023\n\013instapnt_id\030\r \001"
  "(\005\022\022\n\npallet_dir\030\016 \001(\005\022\017\n\007virtual\030\017 \001(\010\022"
  "\027\n\017additional_type\030\020 \001(\005\022\020\n\010shelf_id\030\021 \001"
  "(\005\022\021\n\tshelf_dir\030\022 \001(\005\032.\n\014AgvTypeEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032\204\001\n\tSim_pa"
  "ram\022\016\n\006enable\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\020\n\010int"
  "erval\030\003 \001(\005\022\016\n\006offset\030\004 \001(\021\022\023\n\013target_ar"
  "ea\030\005 \001(\021\022\022\n\ntarget_sta\030\006 \001(\021\022\016\n\006target\030\007"
  " \001(\t\"\366\006\n\004Edge\022\"\n\005basic\030\001 \001(\0132\023.agv_map.E"
  "dge.Basic\022\017\n\007in_area\030\002 \003(\005\022%\n\tagv_param\030"
  "\003 \001(\0132\022.agv_map.sceneData\022%\n\tavo_param\030\004"
  " \001(\0132\022.agv_map.sceneData\022%\n\tctl_param\030\005 "
  "\001(\0132\022.agv_map.sceneData\022%\n\trut_param\030\006 \001"
  "(\0132\022.agv_map.sceneData\022%\n\tact_param\030\007 \001("
  "\0132\022.agv_map.sceneData\022%\n\rcontrol_point\030\010"
  " \003(\0132\016.agv_map.Coord\022&\n\013curve_point\030\t \003("
  "\0132\021.agv_map.Position\032\334\003\n\005Basic\022\n\n\002id\030\001 \001"
  "(\005\022\014\n\004type\030\002 \001(\005\022\020\n\010start_id\030\003 \001(\005\022$\n\tst"
  "art_pos\030\004 \001(\0132\021.agv_map.Position\022\016\n\006end_"
  "id\030\005 \001(\005\022\"\n\007end_pos\030\006 \001(\0132\021.agv_map.Posi"
  "tion\022\016\n\006seglen\030\007 \001(\005\0222\n\010agv_type\030\010 \003(\0132 "
  ".agv_map.Edge.Basic.AgvTypeEntry\022\016\n\006enab"
  "le\030\t \001(\005\022\r\n\005floor\030\n \001(\021\022\023\n\013trans_angle\030\013"
  " \001(\005\022\031\n\021orientation_angle\030\014 \001(\002\022\036\n\003arc\030\r"
  " \001(\0132\021.agv_map.Edge.Arc\022\020\n\010bothways\030\016 \001("
  "\021\022\t\n\001a\030\017 \001(\005\022\t\n\001b\030\020 \001(\005\022\t\n\001c\030\021 \001(\005\022\021\n\tsp"
  "eed_max\030\022 \001(\005\022\023\n\013bond_seg_id\030\023 \001(\005\022\017\n\007vi"
  "rtual\030\024 \001(\010\032.\n\014AgvTypeEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\032H\n\003Arc\022\037\n\007cen_pnt\030\001 "
  "\001(\0132\016.agv_map.Coord\022\016\n\006radius\030\002 \001(\005\022\020\n\010c"
  "lockdir\030\003 \001(\021\"\330\002\n\004Area\022\"\n\005basic\030\001 \001(\0132\023."
  "agv_map.Area.Basic\022\'\n\005param\030\002 \003(\0132\030.agv_"
  "map.Area.ParamEntry\022#\n\013vertex_list\030\003 \003(\013"
  "2\016.agv_map.Coord\022\017\n\007node_in\030\004 \003(\005\022*\n\007agv"
  "_num\030\005 \003(\0132\031.agv_map.Area.AgvNumEntry\022\023\n"
  "\013relate_area\030\006 \003(\005\032,\n\nParamEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032-\n\013AgvNumEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032/\n\005Basic"
  "\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\t\022\014\n\004name\030\003 \001(\t"
  "\"\035\n\005Coord\022\t\n\001x\030\001 \001(\021\022\t\n\001y\030\002 \001(\021\"/\n\010Posit"
  "ion\022\t\n\001x\030\001 \001(\021\022\t\n\001y\030\002 \001(\021\022\r\n\005angle\030\003 \001(\002"
  "\"\201\001\n\007Segment\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\020"
  "\n\010dir_mode\030\003 \001(\021\022\014\n\004lock\030\004 \001(\005\022\035\n\006edge_1"
  "\030\005 \001(\0132\r.agv_map.Edge\022\035\n\006edge_2\030\006 \001(\0132\r."
  "agv_map.Edge\"\254\025\n\010Describe\0220\n\010agv_desc\030\001 "
  "\003(\0132\036.agv_map.Describe.AgvDescEntry\0220\n\010c"
  "tl_desc\030\002 \003(\0132\036.agv_map.Describe.CtlDesc"
  "Entry\0220\n\010avo_desc\030\003 \003(\0132\036.agv_map.Descri"
  "be.AvoDescEntry\0220\n\010rut_desc\030\004 \003(\0132\036.agv_"
  "map.Describe.RutDescEntry\0226\n\013action_desc"
  "\030\005 \003(\0132!.agv_map.Describe.ActionDescEntr"
  "y\0222\n\tarea_desc\030\006 \003(\0132\037.agv_map.Describe."
  "AreaDescEntry\0224\n\nparam_tmpl\030\007 \003(\0132 .agv_"
  "map.Describe.ParamTmplEntry\0226\n\013action_tm"
  "pl\030\010 \003(\0132!.agv_map.Describe.ActionTmplEn"
  "try\022\?\n\020task_action_tmpl\030\t \003(\0132%.agv_map."
  "Describe.TaskActionTmplEntry\032.\n\014AgvDescE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032.\n\014"
  "CtlDescEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
  ":\0028\001\032.\n\014AvoDescEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\032.\n\014RutDescEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\032M\n\017ActionDescEntry\022"
  "\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.agv_map.De"
  "scribe.dataDesc:\0028\001\032K\n\rAreaDescEntry\022\013\n\003"
  "key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.agv_map.Descr"
  "ibe.dataDesc:\0028\001\032M\n\016ParamTmplEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.agv_map.Describ"
  "e.ParamTmpl:\0028\001\032O\n\017ActionTmplEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.agv_map.Describ"
  "e.actionTmpl:\0028\001\032W\n\023TaskActionTmplEntry\022"
  "\013\n\003key\030\001 \001(\t\022/\n\005value\030\002 \001(\0132 .agv_map.De"
  "scribe.taskActionTmpl:\0028\001\032\341\003\n\tParamTmpl\022"
  "\014\n\004desc\030\001 \001(\t\0223\n\004data\030\002 \003(\0132%.agv_map.De"
  "scribe.ParamTmpl.DataEntry\022O\n\023param_inst"
  "ance_list\030\003 \003(\01322.agv_map.Describe.Param"
  "Tmpl.ParamInstanceListEntry\032+\n\tDataEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032g\n\026Para"
  "mInstanceListEntry\022\013\n\003key\030\001 \001(\t\022<\n\005value"
  "\030\002 \001(\0132-.agv_map.Describe.ParamTmpl.para"
  "mTmplInstance:\0028\001\032\251\001\n\021paramTmplInstance\022"
  "\020\n\010describe\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022G\n\005param\030"
  "\003 \003(\01328.agv_map.Describe.ParamTmpl.param"
  "TmplInstance.ParamEntry\032,\n\nParamEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032\233\003\n\naction"
  "Tmpl\022\017\n\007descibe\030\001 \001(\t\0221\n\004data\030\002 \003(\0132#.ag"
  "v_map.Describe.actionTmpl.action\022L\n\021act_"
  "instance_list\030\003 \003(\01321.agv_map.Describe.a"
  "ctionTmpl.ActInstanceListEntry\032d\n\024ActIns"
  "tanceListEntry\022\013\n\003key\030\001 \001(\t\022;\n\005value\030\002 \001"
  "(\0132,.agv_map.Describe.actionTmpl.actTmpl"
  "Instance:\0028\001\0329\n\006action\022\014\n\004name\030\001 \001(\t\022\022\n\n"
  "block_type\030\002 \001(\t\022\r\n\005param\030\003 \001(\t\032Z\n\017actTm"
  "plInstance\022\020\n\010describe\030\001 \001(\t\0225\n\010act_list"
  "\030\002 \003(\0132#.agv_map.Describe.actionTmpl.act"
  "ion\032\342\004\n\016taskActionTmpl\022\017\n\007descibe\030\001 \001(\t\022"
  "\r\n\005stype\030\002 \001(\t\022\r\n\005gtype\030\003 \001(\t\022\020\n\010agv_typ"
  "e\030\004 \001(\t\022\r\n\005layer\030\005 \001(\005\0225\n\004data\030\006 \003(\0132\'.a"
  "gv_map.Describe.taskActionTmpl.action\022P\n"
  "\021act_instance_list\030\007 \003(\01325.agv_map.Descr"
  "ibe.taskActionTmpl.ActInstanceListEntry\032"
  "h\n\024ActInstanceListEntry\022\013\n\003key\030\001 \001(\t\022\?\n\005"
  "value\030\002 \001(\01320.agv_map.Describe.taskActio"
  "nTmpl.actTmplInstance:\0028\001\032U\n\006action\022\023\n\013a"
  "ction_type\030\001 \001(\t\022\023\n\013action_name\030\002 \001(\t\022\022\n"
  "\nblock_type\030\003 \001(\t\022\r\n\005param\030\004 \001(\t\032\265\001\n\017act"
  "TmplInstance\022\020\n\010describe\030\001 \001(\t\022\023\n\013stype_"
  "value\030\002 \001(\t\022\023\n\013gtype_value\030\003 \001(\t\022\026\n\016agv_"
  "type_value\030\004 \001(\t\022\023\n\013layer_value\030\005 \001(\005\0229\n"
  "\010act_list\030\006 \003(\0132\'.agv_map.Describe.taskA"
  "ctionTmpl.action\032\200\001\n\010dataDesc\022\020\n\010describ"
  "e\030\001 \001(\t\0224\n\005param\030\002 \003(\0132%.agv_map.Describ"
  "e.dataDesc.ParamEntry\032,\n\nParamEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\316\001\n\014Store_of"
  "fset\022.\n\006layer1\030\001 \001(\0132\036.agv_map.store_off"
  "set_by_layer\022.\n\006layer2\030\002 \001(\0132\036.agv_map.s"
  "tore_offset_by_layer\022.\n\006layer3\030\003 \001(\0132\036.a"
  "gv_map.store_offset_by_layer\022.\n\006layer4\030\004"
  " \001(\0132\036.agv_map.store_offset_by_layer\"s\n\025"
  "store_offset_by_layer\022\014\n\004high\030\001 \001(\002\022\031\n\021h"
  "orizontal_offset\030\002 \001(\002\022\027\n\017vertical_offse"
  "t\030\003 \001(\002\022\030\n\020fork_high_offset\030\004 \001(\002\"\333\001\n\005La"
  "bel\022\n\n\002id\030\001 \001(\021\022\014\n\004type\030\002 \001(\005\022\014\n\004text\030\003 "
  "\001(\t\022\035\n\005coord\030\004 \001(\0132\016.agv_map.Coord\022\014\n\004si"
  "ze\030\005 \001(\021\022\017\n\007color_r\030\006 \001(\021\022\017\n\007color_g\030\007 \001"
  "(\021\022\017\n\007color_b\030\010 \001(\021\022\017\n\007opacity\030\t \001(\021\022\014\n\004"
  "bold\030\n \001(\005\022\016\n\006italic\030\013 \001(\005\022\013\n\003dir\030\014 \001(\005\022"
  "\016\n\006rotate\030\r \001(\021\"\215\006\n\010AgvParam\022\023\n\013agv_subt"
  "ype\030\001 \001(\t\022\022\n\nbody_Width\030\002 \001(\005\022\023\n\013body_Le"
  "ngth\030\003 \001(\005\022\021\n\tbody_High\030\004 \001(\005\022\022\n\nwheel_b"
  "ase\030\005 \001(\005\022\025\n\rrotate_radius\030\006 \001(\005\022\016\n\006p2he"
  "ad\030\007 \001(\005\022\016\n\006p2tail\030\010 \001(\005\022\r\n\005p2nav\030\t \001(\005\022"
  "\020\n\010fork_min\030\n \001(\021\022\020\n\010fork_max\030\013 \001(\021\022\030\n\020f"
  "ork_noload_high\030\r \001(\021\022\036\n\006id_pos\030\016 \001(\0132\016."
  "agv_map.Coord\022\"\n\npallet_pos\030\017 \001(\0132\016.agv_"
  "map.Coord\0222\n\ropto_elec_pos\030\020 \003(\0132\033.agv_m"
  "ap.AgvParam.opto_elec\0225\n\nprotection\030\021 \003("
  "\0132!.agv_map.AgvParam.ProtectionEntry\0223\n\t"
  "reflector\030\022 \003(\0132 .agv_map.AgvParam.Refle"
  "ctorEntry\022\026\n\016fork_load_high\030\023 \001(\021\022\035\n\025for"
  "k_noload_back_high\030\024 \001(\021\022\021\n\tshelf_num\030\025 "
  "\001(\021\022\021\n\tlayer_num\030\026 \001(\021\032F\n\017ProtectionEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\"\n\005value\030\002 \001(\0132\023.agv_map."
  "Protection:\0028\001\032D\n\016ReflectorEntry\022\013\n\003key\030"
  "\001 \001(\005\022!\n\005value\030\002 \001(\0132\022.agv_map.Reflector"
  ":\0028\001\032I\n\topto_elec\022\014\n\004name\030\001 \001(\t\022\036\n\003pos\030\002"
  " \001(\0132\021.agv_map.Position\022\016\n\006signal\030\003 \001(\005\""
  "\316\002\n\nProtection\022\023\n\013scan_height\030\001 \001(\005\022\020\n\010d"
  "ev_type\030\002 \001(\t\022\036\n\003pos\030\003 \001(\0132\021.agv_map.Pos"
  "ition\022\016\n\006pos_up\030\004 \001(\021\022&\n\004mode\030\005 \003(\0132\030.ag"
  "v_map.Protection.Mode\032\226\001\n\004Mode\022\n\n\002id\030\001 \001"
  "(\005\022*\n\005area1\030\002 \001(\0132\033.agv_map.Protection.P"
  "olygon\022*\n\005area2\030\003 \001(\0132\033.agv_map.Protecti"
  "on.Polygon\022*\n\005area3\030\004 \001(\0132\033.agv_map.Prot"
  "ection.Polygon\032(\n\007Polygon\022\035\n\005coord\030\001 \003(\013"
  "2\016.agv_map.Coord\"\370\001\n\025ReplaceBatteryStati"
  "on\022\r\n\005index\030\001 \001(\005\022\022\n\ndist_p1_p2\030\002 \001(\005\0228\n"
  "\005space\030\003 \003(\0132).agv_map.ReplaceBatterySta"
  "tion.SpaceEntry\032R\n\nSpaceEntry\022\013\n\003key\030\001 \001"
  "(\005\0223\n\005value\030\002 \001(\0132$.agv_map.ReplaceBatte"
  "ryStation.Space:\0028\001\032.\n\005Space\022\n\n\002id\030\001 \001(\005"
  "\022\014\n\004type\030\002 \001(\005\022\013\n\003pos\030\003 \001(\021\"U\n\tReflector"
  "\022\n\n\002id\030\001 \001(\005\022\035\n\005coord\030\002 \001(\0132\016.agv_map.Co"
  "ord\022\014\n\004area\030\003 \001(\005\022\017\n\007ap_area\030\004 \001(\005\"c\n\006Pa"
  "llet\022\020\n\010describe\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004"
  "type\030\003 \001(\005\022\016\n\006length\030\004 \001(\005\022\r\n\005width\030\005 \001("
  "\005\022\014\n\004high\030\006 \001(\005\"\311\001\n\rDefautForkSet\022\020\n\010agv"
  "_type\030\001 \001(\t\022\023\n\013pallet_name\030\002 \001(\t\022\021\n\tload"
  "_high\030\003 \001(\005\022F\n\021pallet_load_highs\030\004 \003(\0132+"
  ".agv_map.DefautForkSet.PalletLoadHighsEn"
  "try\0326\n\024PalletLoadHighsEntry\022\013\n\003key\030\001 \001(\005"
  "\022\r\n\005value\030\002 \001(\005:\0028\001*\252\003\n\tnode_type\022\023\n\017STA"
  "_TYPE_NORMAL\020\000\022\022\n\016STA_TYPE_HOUSE\020\001\022\023\n\017ST"
  "A_TYPE_CHARGE\020\002\022\024\n\020STA_TYPE_STORAGE\020\003\022\021\n"
  "\rSTA_TYPE_DOOR\020\004\022\021\n\rSTA_TYPE_LIFT\020\005\022\022\n\016S"
  "TA_TYPE_WEIGH\020\006\022\022\n\016STA_TYPE_HOIST\020\007\022\027\n\023S"
  "TA_TYPE_HIGH_SPEED\020\010\022\025\n\021STA_TYPE_RESERVE"
  "D\020\t\022\030\n\024STA_TYPE_TRAYSTACKER\020\n\022\026\n\022STA_TYP"
  "E_RESERVED1\020\013\022\027\n\023STA_TYPE_WAIT_QUEUE\020\014\022\022"
  "\n\016STA_TYPE_SHELF\020\r\022\033\n\027STA_TYPE_SHELF_WOR"
  "KNODE\020\016\022\030\n\024STA_TYPE_WORKSTATION\020\017\022\034\n\030STA"
  "_TYPE_SORTING_STATION\020\020\022\027\n\023STA_TYPE_AIR_"
  "SHOWER\020\021b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_agv_5fmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_agv_5fmap_2eproto = {
    false, false, 10296, descriptor_table_protodef_agv_5fmap_2eproto,
    "agv_map.proto",
    &descriptor_table_agv_5fmap_2eproto_once, nullptr, 0, 80,
    schemas, file_default_instances, TableStruct_agv_5fmap_2eproto::offsets,
    file_level_metadata_agv_5fmap_2eproto, file_level_enum_descriptors_agv_5fmap_2eproto,
    file_level_service_descriptors_agv_5fmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_agv_5fmap_2eproto_getter() {
  return &descriptor_table_agv_5fmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_agv_5fmap_2eproto(&descriptor_table_agv_5fmap_2eproto);
namespace agv_map {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* node_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_agv_5fmap_2eproto);
  return file_level_enum_descriptors_agv_5fmap_2eproto[0];
}
bool node_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

MAP_ARR_StoreOffConfigEntry_DoNotUse::MAP_ARR_StoreOffConfigEntry_DoNotUse() {}
MAP_ARR_StoreOffConfigEntry_DoNotUse::MAP_ARR_StoreOffConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MAP_ARR_StoreOffConfigEntry_DoNotUse::MergeFrom(const MAP_ARR_StoreOffConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MAP_ARR_StoreOffConfigEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[0]);
}

// ===================================================================

MAP_ARR_AgvparamEntry_DoNotUse::MAP_ARR_AgvparamEntry_DoNotUse() {}
MAP_ARR_AgvparamEntry_DoNotUse::MAP_ARR_AgvparamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MAP_ARR_AgvparamEntry_DoNotUse::MergeFrom(const MAP_ARR_AgvparamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MAP_ARR_AgvparamEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[1]);
}

// ===================================================================

MAP_ARR_ReplaceBatteryStationEntry_DoNotUse::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse() {}
MAP_ARR_ReplaceBatteryStationEntry_DoNotUse::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MAP_ARR_ReplaceBatteryStationEntry_DoNotUse::MergeFrom(const MAP_ARR_ReplaceBatteryStationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MAP_ARR_ReplaceBatteryStationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[2]);
}

// ===================================================================

MAP_ARR_PalletEntry_DoNotUse::MAP_ARR_PalletEntry_DoNotUse() {}
MAP_ARR_PalletEntry_DoNotUse::MAP_ARR_PalletEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MAP_ARR_PalletEntry_DoNotUse::MergeFrom(const MAP_ARR_PalletEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MAP_ARR_PalletEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[3]);
}

// ===================================================================

MAP_ARR_DefaultFrokEntry_DoNotUse::MAP_ARR_DefaultFrokEntry_DoNotUse() {}
MAP_ARR_DefaultFrokEntry_DoNotUse::MAP_ARR_DefaultFrokEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MAP_ARR_DefaultFrokEntry_DoNotUse::MergeFrom(const MAP_ARR_DefaultFrokEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MAP_ARR_DefaultFrokEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[4]);
}

// ===================================================================

class MAP_ARR::_Internal {
 public:
  static const ::agv_map::Describe& describe(const MAP_ARR* msg);
};

const ::agv_map::Describe&
MAP_ARR::_Internal::describe(const MAP_ARR* msg) {
  return *msg->_impl_.describe_;
}
MAP_ARR::MAP_ARR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MAP_ARR::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.MAP_ARR)
}
MAP_ARR::MAP_ARR(const MAP_ARR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MAP_ARR* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_){from._impl_.map_}
    , /*decltype(_impl_.store_off_config_)*/{}
    , /*decltype(_impl_.agvparam_)*/{}
    , /*decltype(_impl_.replace_battery_station_)*/{}
    , /*decltype(_impl_.pallet_)*/{}
    , /*decltype(_impl_.default_frok_)*/{}
    , decltype(_impl_.describe_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.store_off_config_.MergeFrom(from._impl_.store_off_config_);
  _this->_impl_.agvparam_.MergeFrom(from._impl_.agvparam_);
  _this->_impl_.replace_battery_station_.MergeFrom(from._impl_.replace_battery_station_);
  _this->_impl_.pallet_.MergeFrom(from._impl_.pallet_);
  _this->_impl_.default_frok_.MergeFrom(from._impl_.default_frok_);
  if (from._internal_has_describe()) {
    _this->_impl_.describe_ = new ::agv_map::Describe(*from._impl_.describe_);
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.MAP_ARR)
}

inline void MAP_ARR::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_){arena}
    , /*decltype(_impl_.store_off_config_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.agvparam_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.replace_battery_station_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.pallet_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.default_frok_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.describe_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MAP_ARR::~MAP_ARR() {
  // @@protoc_insertion_point(destructor:agv_map.MAP_ARR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MAP_ARR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_.~RepeatedPtrField();
  _impl_.store_off_config_.Destruct();
  _impl_.store_off_config_.~MapField();
  _impl_.agvparam_.Destruct();
  _impl_.agvparam_.~MapField();
  _impl_.replace_battery_station_.Destruct();
  _impl_.replace_battery_station_.~MapField();
  _impl_.pallet_.Destruct();
  _impl_.pallet_.~MapField();
  _impl_.default_frok_.Destruct();
  _impl_.default_frok_.~MapField();
  if (this != internal_default_instance()) delete _impl_.describe_;
}

void MAP_ARR::ArenaDtor(void* object) {
  MAP_ARR* _this = reinterpret_cast< MAP_ARR* >(object);
  _this->_impl_.store_off_config_.Destruct();
  _this->_impl_.agvparam_.Destruct();
  _this->_impl_.replace_battery_station_.Destruct();
  _this->_impl_.pallet_.Destruct();
  _this->_impl_.default_frok_.Destruct();
}
void MAP_ARR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MAP_ARR::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.MAP_ARR)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_.Clear();
  _impl_.store_off_config_.Clear();
  _impl_.agvparam_.Clear();
  _impl_.replace_battery_station_.Clear();
  _impl_.pallet_.Clear();
  _impl_.default_frok_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.describe_ != nullptr) {
    delete _impl_.describe_;
  }
  _impl_.describe_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MAP_ARR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .agv_map.Map map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Describe describe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_describe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.Store_offset> store_off_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.store_off_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.AgvParam> agvparam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.agvparam_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.ReplaceBatteryStation> replace_battery_station = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.replace_battery_station_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.Pallet> pallet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.pallet_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.DefautForkSet> default_frok = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.default_frok_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MAP_ARR::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.MAP_ARR)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agv_map.Map map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .agv_map.Describe describe = 2;
  if (this->_internal_has_describe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::describe(this),
        _Internal::describe(this).GetCachedSize(), target, stream);
  }

  // map<int32, .agv_map.Store_offset> store_off_config = 3;
  if (!this->_internal_store_off_config().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::Store_offset>;
    using WireHelper = MAP_ARR_StoreOffConfigEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_store_off_config();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, .agv_map.AgvParam> agvparam = 4;
  if (!this->_internal_agvparam().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::AgvParam>;
    using WireHelper = MAP_ARR_AgvparamEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_agvparam();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.MAP_ARR.AgvparamEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<int32, .agv_map.ReplaceBatteryStation> replace_battery_station = 5;
  if (!this->_internal_replace_battery_station().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::ReplaceBatteryStation>;
    using WireHelper = MAP_ARR_ReplaceBatteryStationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_replace_battery_station();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Pallet> pallet = 6;
  if (!this->_internal_pallet().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::Pallet>;
    using WireHelper = MAP_ARR_PalletEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_pallet();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, .agv_map.DefautForkSet> default_frok = 7;
  if (!this->_internal_default_frok().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::DefautForkSet>;
    using WireHelper = MAP_ARR_DefaultFrokEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_default_frok();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.MAP_ARR.DefaultFrokEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.MAP_ARR)
  return target;
}

size_t MAP_ARR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.MAP_ARR)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Map map = 1;
  total_size += 1UL * this->_internal_map_size();
  for (const auto& msg : this->_impl_.map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, .agv_map.Store_offset> store_off_config = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_store_off_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >::const_iterator
      it = this->_internal_store_off_config().begin();
      it != this->_internal_store_off_config().end(); ++it) {
    total_size += MAP_ARR_StoreOffConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .agv_map.AgvParam> agvparam = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agvparam_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >::const_iterator
      it = this->_internal_agvparam().begin();
      it != this->_internal_agvparam().end(); ++it) {
    total_size += MAP_ARR_AgvparamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.ReplaceBatteryStation> replace_battery_station = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_replace_battery_station_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >::const_iterator
      it = this->_internal_replace_battery_station().begin();
      it != this->_internal_replace_battery_station().end(); ++it) {
    total_size += MAP_ARR_ReplaceBatteryStationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Pallet> pallet = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pallet_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >::const_iterator
      it = this->_internal_pallet().begin();
      it != this->_internal_pallet().end(); ++it) {
    total_size += MAP_ARR_PalletEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .agv_map.DefautForkSet> default_frok = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_default_frok_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >::const_iterator
      it = this->_internal_default_frok().begin();
      it != this->_internal_default_frok().end(); ++it) {
    total_size += MAP_ARR_DefaultFrokEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .agv_map.Describe describe = 2;
  if (this->_internal_has_describe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.describe_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MAP_ARR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MAP_ARR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MAP_ARR::GetClassData() const { return &_class_data_; }


void MAP_ARR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MAP_ARR*>(&to_msg);
  auto& from = static_cast<const MAP_ARR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.MAP_ARR)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_.MergeFrom(from._impl_.map_);
  _this->_impl_.store_off_config_.MergeFrom(from._impl_.store_off_config_);
  _this->_impl_.agvparam_.MergeFrom(from._impl_.agvparam_);
  _this->_impl_.replace_battery_station_.MergeFrom(from._impl_.replace_battery_station_);
  _this->_impl_.pallet_.MergeFrom(from._impl_.pallet_);
  _this->_impl_.default_frok_.MergeFrom(from._impl_.default_frok_);
  if (from._internal_has_describe()) {
    _this->_internal_mutable_describe()->::agv_map::Describe::MergeFrom(
        from._internal_describe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MAP_ARR::CopyFrom(const MAP_ARR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.MAP_ARR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAP_ARR::IsInitialized() const {
  return true;
}

void MAP_ARR::InternalSwap(MAP_ARR* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_.InternalSwap(&other->_impl_.map_);
  _impl_.store_off_config_.InternalSwap(&other->_impl_.store_off_config_);
  _impl_.agvparam_.InternalSwap(&other->_impl_.agvparam_);
  _impl_.replace_battery_station_.InternalSwap(&other->_impl_.replace_battery_station_);
  _impl_.pallet_.InternalSwap(&other->_impl_.pallet_);
  _impl_.default_frok_.InternalSwap(&other->_impl_.default_frok_);
  swap(_impl_.describe_, other->_impl_.describe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MAP_ARR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[5]);
}

// ===================================================================

Map_NodeEntry_DoNotUse::Map_NodeEntry_DoNotUse() {}
Map_NodeEntry_DoNotUse::Map_NodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_NodeEntry_DoNotUse::MergeFrom(const Map_NodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_NodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[6]);
}

// ===================================================================

Map_SegmentEntry_DoNotUse::Map_SegmentEntry_DoNotUse() {}
Map_SegmentEntry_DoNotUse::Map_SegmentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_SegmentEntry_DoNotUse::MergeFrom(const Map_SegmentEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_SegmentEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[7]);
}

// ===================================================================

Map_AreaEntry_DoNotUse::Map_AreaEntry_DoNotUse() {}
Map_AreaEntry_DoNotUse::Map_AreaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_AreaEntry_DoNotUse::MergeFrom(const Map_AreaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_AreaEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[8]);
}

// ===================================================================

Map_LabelEntry_DoNotUse::Map_LabelEntry_DoNotUse() {}
Map_LabelEntry_DoNotUse::Map_LabelEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_LabelEntry_DoNotUse::MergeFrom(const Map_LabelEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_LabelEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[9]);
}

// ===================================================================

Map_ShelfEntry_DoNotUse::Map_ShelfEntry_DoNotUse() {}
Map_ShelfEntry_DoNotUse::Map_ShelfEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_ShelfEntry_DoNotUse::MergeFrom(const Map_ShelfEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_ShelfEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[10]);
}

// ===================================================================

class Map::_Internal {
 public:
  static const ::agv_map::Conf& conf(const Map* msg);
};

const ::agv_map::Conf&
Map::_Internal::conf(const Map* msg) {
  return *msg->_impl_.conf_;
}
Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Map::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Map* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.node_)*/{}
    , /*decltype(_impl_.segment_)*/{}
    , /*decltype(_impl_.area_)*/{}
    , /*decltype(_impl_.label_)*/{}
    , /*decltype(_impl_.shelf_)*/{}
    , decltype(_impl_.conf_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.node_.MergeFrom(from._impl_.node_);
  _this->_impl_.segment_.MergeFrom(from._impl_.segment_);
  _this->_impl_.area_.MergeFrom(from._impl_.area_);
  _this->_impl_.label_.MergeFrom(from._impl_.label_);
  _this->_impl_.shelf_.MergeFrom(from._impl_.shelf_);
  if (from._internal_has_conf()) {
    _this->_impl_.conf_ = new ::agv_map::Conf(*from._impl_.conf_);
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Map)
}

inline void Map::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.node_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.segment_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.area_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.label_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.shelf_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.conf_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:agv_map.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Map::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.Destruct();
  _impl_.node_.~MapField();
  _impl_.segment_.Destruct();
  _impl_.segment_.~MapField();
  _impl_.area_.Destruct();
  _impl_.area_.~MapField();
  _impl_.label_.Destruct();
  _impl_.label_.~MapField();
  _impl_.shelf_.Destruct();
  _impl_.shelf_.~MapField();
  if (this != internal_default_instance()) delete _impl_.conf_;
}

void Map::ArenaDtor(void* object) {
  Map* _this = reinterpret_cast< Map* >(object);
  _this->_impl_.node_.Destruct();
  _this->_impl_.segment_.Destruct();
  _this->_impl_.area_.Destruct();
  _this->_impl_.label_.Destruct();
  _this->_impl_.shelf_.Destruct();
}
void Map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Map)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.Clear();
  _impl_.segment_.Clear();
  _impl_.area_.Clear();
  _impl_.label_.Clear();
  _impl_.shelf_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.conf_ != nullptr) {
    delete _impl_.conf_;
  }
  _impl_.conf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .agv_map.Conf conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.Node> node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.node_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.Segment> segment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.segment_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.Area> area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.area_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.Label> label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.label_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.ShelfCofig> shelf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.shelf_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Map::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Map)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Conf conf = 1;
  if (this->_internal_has_conf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conf(this),
        _Internal::conf(this).GetCachedSize(), target, stream);
  }

  // map<int32, .agv_map.Node> node = 2;
  if (!this->_internal_node().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::Node>;
    using WireHelper = Map_NodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_node();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Segment> segment = 3;
  if (!this->_internal_segment().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::Segment>;
    using WireHelper = Map_SegmentEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_segment();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Area> area = 4;
  if (!this->_internal_area().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::Area>;
    using WireHelper = Map_AreaEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_area();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Label> label = 5;
  if (!this->_internal_label().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::Label>;
    using WireHelper = Map_LabelEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_label();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.ShelfCofig> shelf = 6;
  if (!this->_internal_shelf().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::ShelfCofig>;
    using WireHelper = Map_ShelfEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_shelf();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Map)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .agv_map.Node> node = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_node_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >::const_iterator
      it = this->_internal_node().begin();
      it != this->_internal_node().end(); ++it) {
    total_size += Map_NodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Segment> segment = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_segment_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >::const_iterator
      it = this->_internal_segment().begin();
      it != this->_internal_segment().end(); ++it) {
    total_size += Map_SegmentEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Area> area = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_area_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >::const_iterator
      it = this->_internal_area().begin();
      it != this->_internal_area().end(); ++it) {
    total_size += Map_AreaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Label> label = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >::const_iterator
      it = this->_internal_label().begin();
      it != this->_internal_label().end(); ++it) {
    total_size += Map_LabelEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.ShelfCofig> shelf = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shelf_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ShelfCofig >::const_iterator
      it = this->_internal_shelf().begin();
      it != this->_internal_shelf().end(); ++it) {
    total_size += Map_ShelfEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .agv_map.Conf conf = 1;
  if (this->_internal_has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conf_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Map::GetClassData() const { return &_class_data_; }


void Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Map*>(&to_msg);
  auto& from = static_cast<const Map&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Map)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_.MergeFrom(from._impl_.node_);
  _this->_impl_.segment_.MergeFrom(from._impl_.segment_);
  _this->_impl_.area_.MergeFrom(from._impl_.area_);
  _this->_impl_.label_.MergeFrom(from._impl_.label_);
  _this->_impl_.shelf_.MergeFrom(from._impl_.shelf_);
  if (from._internal_has_conf()) {
    _this->_internal_mutable_conf()->::agv_map::Conf::MergeFrom(
        from._internal_conf());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.segment_.InternalSwap(&other->_impl_.segment_);
  _impl_.area_.InternalSwap(&other->_impl_.area_);
  _impl_.label_.InternalSwap(&other->_impl_.label_);
  _impl_.shelf_.InternalSwap(&other->_impl_.shelf_);
  swap(_impl_.conf_, other->_impl_.conf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[11]);
}

// ===================================================================

Conf_AgvIdsEntry_DoNotUse::Conf_AgvIdsEntry_DoNotUse() {}
Conf_AgvIdsEntry_DoNotUse::Conf_AgvIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Conf_AgvIdsEntry_DoNotUse::MergeFrom(const Conf_AgvIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Conf_AgvIdsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[12]);
}

// ===================================================================

class Conf_param::_Internal {
 public:
};

Conf_param::Conf_param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Conf.param)
}
Conf_param::Conf_param(const Conf_param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Conf_param* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Conf.param)
}

inline void Conf_param::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Conf_param::~Conf_param() {
  // @@protoc_insertion_point(destructor:agv_map.Conf.param)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Conf_param::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void Conf_param::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Conf_param::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Conf.param)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conf_param::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Conf.param.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Conf.param.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Conf_param::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Conf.param)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Conf.param.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Conf.param.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Conf.param)
  return target;
}

size_t Conf_param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Conf.param)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Conf_param::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Conf_param::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Conf_param::GetClassData() const { return &_class_data_; }


void Conf_param::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Conf_param*>(&to_msg);
  auto& from = static_cast<const Conf_param&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Conf.param)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Conf_param::CopyFrom(const Conf_param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Conf.param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conf_param::IsInitialized() const {
  return true;
}

void Conf_param::InternalSwap(Conf_param* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Conf_param::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[13]);
}

// ===================================================================

class Conf::_Internal {
 public:
};

Conf::Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Conf::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Conf)
}
Conf::Conf(const Conf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Conf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.agv_ids_)*/{}
    , decltype(_impl_.mission_type_list_){from._impl_.mission_type_list_}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.project_name_){}
    , decltype(_impl_.gcood_type_){}
    , decltype(_impl_.map_ts_){}
    , decltype(_impl_.map_zone_){}
    , decltype(_impl_.max_x_){}
    , decltype(_impl_.min_x_){}
    , decltype(_impl_.max_y_){}
    , decltype(_impl_.min_y_){}
    , decltype(_impl_.gcood_dm_value_){}
    , decltype(_impl_.background_pos_x_){}
    , decltype(_impl_.background_pos_y_){}
    , decltype(_impl_.background_length_){}
    , decltype(_impl_.background_width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.agv_ids_.MergeFrom(from._impl_.agv_ids_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_name().empty()) {
    _this->_impl_.map_name_.Set(from._internal_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.project_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project_name().empty()) {
    _this->_impl_.project_name_.Set(from._internal_project_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gcood_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gcood_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gcood_type().empty()) {
    _this->_impl_.gcood_type_.Set(from._internal_gcood_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.map_ts_, &from._impl_.map_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.background_width_) -
    reinterpret_cast<char*>(&_impl_.map_ts_)) + sizeof(_impl_.background_width_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Conf)
}

inline void Conf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.agv_ids_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mission_type_list_){arena}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.project_name_){}
    , decltype(_impl_.gcood_type_){}
    , decltype(_impl_.map_ts_){int64_t{0}}
    , decltype(_impl_.map_zone_){0}
    , decltype(_impl_.max_x_){0}
    , decltype(_impl_.min_x_){0}
    , decltype(_impl_.max_y_){0}
    , decltype(_impl_.min_y_){0}
    , decltype(_impl_.gcood_dm_value_){0}
    , decltype(_impl_.background_pos_x_){0}
    , decltype(_impl_.background_pos_y_){0}
    , decltype(_impl_.background_length_){0}
    , decltype(_impl_.background_width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.project_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gcood_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gcood_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Conf::~Conf() {
  // @@protoc_insertion_point(destructor:agv_map.Conf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Conf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agv_ids_.Destruct();
  _impl_.agv_ids_.~MapField();
  _impl_.mission_type_list_.~RepeatedPtrField();
  _impl_.map_name_.Destroy();
  _impl_.project_name_.Destroy();
  _impl_.gcood_type_.Destroy();
}

void Conf::ArenaDtor(void* object) {
  Conf* _this = reinterpret_cast< Conf* >(object);
  _this->_impl_.agv_ids_.Destruct();
}
void Conf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Conf::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Conf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agv_ids_.Clear();
  _impl_.mission_type_list_.Clear();
  _impl_.map_name_.ClearToEmpty();
  _impl_.project_name_.ClearToEmpty();
  _impl_.gcood_type_.ClearToEmpty();
  ::memset(&_impl_.map_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.background_width_) -
      reinterpret_cast<char*>(&_impl_.map_ts_)) + sizeof(_impl_.background_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 map_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.map_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Conf.map_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 max_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.min_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.max_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.min_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string project_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_project_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Conf.project_name"));
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> agv_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.agv_ids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string gcood_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_gcood_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Conf.gcood_type"));
        } else
          goto handle_unusual;
        continue;
      // int32 gcood_dm_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.gcood_dm_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 background_pos_x = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.background_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 background_pos_y = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.background_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 background_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.background_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 background_width = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.background_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Conf.param mission_type_list = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mission_type_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Conf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Conf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 map_ts = 1;
  if (this->_internal_map_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_map_ts(), target);
  }

  // int32 map_zone = 2;
  if (this->_internal_map_zone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_zone(), target);
  }

  // string map_name = 3;
  if (!this->_internal_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Conf.map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_name(), target);
  }

  // int32 max_x = 4;
  if (this->_internal_max_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_x(), target);
  }

  // int32 min_x = 5;
  if (this->_internal_min_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_min_x(), target);
  }

  // int32 max_y = 6;
  if (this->_internal_max_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_y(), target);
  }

  // int32 min_y = 7;
  if (this->_internal_min_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_min_y(), target);
  }

  // string project_name = 8;
  if (!this->_internal_project_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_name().data(), static_cast<int>(this->_internal_project_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Conf.project_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_project_name(), target);
  }

  // map<int32, int32> agv_ids = 9;
  if (!this->_internal_agv_ids().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = Conf_AgvIdsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_agv_ids();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    }
  }

  // string gcood_type = 10;
  if (!this->_internal_gcood_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gcood_type().data(), static_cast<int>(this->_internal_gcood_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Conf.gcood_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gcood_type(), target);
  }

  // int32 gcood_dm_value = 11;
  if (this->_internal_gcood_dm_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_gcood_dm_value(), target);
  }

  // int32 background_pos_x = 12;
  if (this->_internal_background_pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_background_pos_x(), target);
  }

  // int32 background_pos_y = 13;
  if (this->_internal_background_pos_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_background_pos_y(), target);
  }

  // int32 background_length = 14;
  if (this->_internal_background_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_background_length(), target);
  }

  // int32 background_width = 15;
  if (this->_internal_background_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_background_width(), target);
  }

  // repeated .agv_map.Conf.param mission_type_list = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mission_type_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_mission_type_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Conf)
  return target;
}

size_t Conf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Conf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> agv_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agv_ids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_agv_ids().begin();
      it != this->_internal_agv_ids().end(); ++it) {
    total_size += Conf_AgvIdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .agv_map.Conf.param mission_type_list = 16;
  total_size += 2UL * this->_internal_mission_type_list_size();
  for (const auto& msg : this->_impl_.mission_type_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string map_name = 3;
  if (!this->_internal_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // string project_name = 8;
  if (!this->_internal_project_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_name());
  }

  // string gcood_type = 10;
  if (!this->_internal_gcood_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gcood_type());
  }

  // int64 map_ts = 1;
  if (this->_internal_map_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_map_ts());
  }

  // int32 map_zone = 2;
  if (this->_internal_map_zone() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_zone());
  }

  // int32 max_x = 4;
  if (this->_internal_max_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_x());
  }

  // int32 min_x = 5;
  if (this->_internal_min_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_x());
  }

  // int32 max_y = 6;
  if (this->_internal_max_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_y());
  }

  // int32 min_y = 7;
  if (this->_internal_min_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_y());
  }

  // int32 gcood_dm_value = 11;
  if (this->_internal_gcood_dm_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gcood_dm_value());
  }

  // int32 background_pos_x = 12;
  if (this->_internal_background_pos_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_background_pos_x());
  }

  // int32 background_pos_y = 13;
  if (this->_internal_background_pos_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_background_pos_y());
  }

  // int32 background_length = 14;
  if (this->_internal_background_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_background_length());
  }

  // int32 background_width = 15;
  if (this->_internal_background_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_background_width());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Conf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Conf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Conf::GetClassData() const { return &_class_data_; }


void Conf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Conf*>(&to_msg);
  auto& from = static_cast<const Conf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Conf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agv_ids_.MergeFrom(from._impl_.agv_ids_);
  _this->_impl_.mission_type_list_.MergeFrom(from._impl_.mission_type_list_);
  if (!from._internal_map_name().empty()) {
    _this->_internal_set_map_name(from._internal_map_name());
  }
  if (!from._internal_project_name().empty()) {
    _this->_internal_set_project_name(from._internal_project_name());
  }
  if (!from._internal_gcood_type().empty()) {
    _this->_internal_set_gcood_type(from._internal_gcood_type());
  }
  if (from._internal_map_ts() != 0) {
    _this->_internal_set_map_ts(from._internal_map_ts());
  }
  if (from._internal_map_zone() != 0) {
    _this->_internal_set_map_zone(from._internal_map_zone());
  }
  if (from._internal_max_x() != 0) {
    _this->_internal_set_max_x(from._internal_max_x());
  }
  if (from._internal_min_x() != 0) {
    _this->_internal_set_min_x(from._internal_min_x());
  }
  if (from._internal_max_y() != 0) {
    _this->_internal_set_max_y(from._internal_max_y());
  }
  if (from._internal_min_y() != 0) {
    _this->_internal_set_min_y(from._internal_min_y());
  }
  if (from._internal_gcood_dm_value() != 0) {
    _this->_internal_set_gcood_dm_value(from._internal_gcood_dm_value());
  }
  if (from._internal_background_pos_x() != 0) {
    _this->_internal_set_background_pos_x(from._internal_background_pos_x());
  }
  if (from._internal_background_pos_y() != 0) {
    _this->_internal_set_background_pos_y(from._internal_background_pos_y());
  }
  if (from._internal_background_length() != 0) {
    _this->_internal_set_background_length(from._internal_background_length());
  }
  if (from._internal_background_width() != 0) {
    _this->_internal_set_background_width(from._internal_background_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Conf::CopyFrom(const Conf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conf::IsInitialized() const {
  return true;
}

void Conf::InternalSwap(Conf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agv_ids_.InternalSwap(&other->_impl_.agv_ids_);
  _impl_.mission_type_list_.InternalSwap(&other->_impl_.mission_type_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.project_name_, lhs_arena,
      &other->_impl_.project_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gcood_type_, lhs_arena,
      &other->_impl_.gcood_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Conf, _impl_.background_width_)
      + sizeof(Conf::_impl_.background_width_)
      - PROTOBUF_FIELD_OFFSET(Conf, _impl_.map_ts_)>(
          reinterpret_cast<char*>(&_impl_.map_ts_),
          reinterpret_cast<char*>(&other->_impl_.map_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Conf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[14]);
}

// ===================================================================

sceneData_ParamMapEntry_DoNotUse::sceneData_ParamMapEntry_DoNotUse() {}
sceneData_ParamMapEntry_DoNotUse::sceneData_ParamMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void sceneData_ParamMapEntry_DoNotUse::MergeFrom(const sceneData_ParamMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata sceneData_ParamMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[15]);
}

// ===================================================================

sceneData_data_ParamMapEntry_DoNotUse::sceneData_data_ParamMapEntry_DoNotUse() {}
sceneData_data_ParamMapEntry_DoNotUse::sceneData_data_ParamMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void sceneData_data_ParamMapEntry_DoNotUse::MergeFrom(const sceneData_data_ParamMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata sceneData_data_ParamMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[16]);
}

// ===================================================================

sceneData_data_IndexMapEntry_DoNotUse::sceneData_data_IndexMapEntry_DoNotUse() {}
sceneData_data_IndexMapEntry_DoNotUse::sceneData_data_IndexMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void sceneData_data_IndexMapEntry_DoNotUse::MergeFrom(const sceneData_data_IndexMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata sceneData_data_IndexMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[17]);
}

// ===================================================================

class sceneData_data::_Internal {
 public:
};

sceneData_data::sceneData_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &sceneData_data::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.sceneData.data)
}
sceneData_data::sceneData_data(const sceneData_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  sceneData_data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_map_)*/{}
    , /*decltype(_impl_.index_map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.param_map_.MergeFrom(from._impl_.param_map_);
  _this->_impl_.index_map_.MergeFrom(from._impl_.index_map_);
  // @@protoc_insertion_point(copy_constructor:agv_map.sceneData.data)
}

inline void sceneData_data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.index_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

sceneData_data::~sceneData_data() {
  // @@protoc_insertion_point(destructor:agv_map.sceneData.data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void sceneData_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.param_map_.Destruct();
  _impl_.param_map_.~MapField();
  _impl_.index_map_.Destruct();
  _impl_.index_map_.~MapField();
}

void sceneData_data::ArenaDtor(void* object) {
  sceneData_data* _this = reinterpret_cast< sceneData_data* >(object);
  _this->_impl_.param_map_.Destruct();
  _this->_impl_.index_map_.Destruct();
}
void sceneData_data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void sceneData_data::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.sceneData.data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_map_.Clear();
  _impl_.index_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sceneData_data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> param_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.param_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> index_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.index_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* sceneData_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.sceneData.data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> param_map = 1;
  if (!this->_internal_param_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = sceneData_data_ParamMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_param_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.sceneData.data.ParamMapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.sceneData.data.ParamMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> index_map = 2;
  if (!this->_internal_index_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = sceneData_data_IndexMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_index_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.sceneData.data.IndexMapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.sceneData.data.IndexMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.sceneData.data)
  return target;
}

size_t sceneData_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.sceneData.data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> param_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_param_map().begin();
      it != this->_internal_param_map().end(); ++it) {
    total_size += sceneData_data_ParamMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> index_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_index_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_index_map().begin();
      it != this->_internal_index_map().end(); ++it) {
    total_size += sceneData_data_IndexMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sceneData_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    sceneData_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sceneData_data::GetClassData() const { return &_class_data_; }


void sceneData_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<sceneData_data*>(&to_msg);
  auto& from = static_cast<const sceneData_data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.sceneData.data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_map_.MergeFrom(from._impl_.param_map_);
  _this->_impl_.index_map_.MergeFrom(from._impl_.index_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sceneData_data::CopyFrom(const sceneData_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.sceneData.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sceneData_data::IsInitialized() const {
  return true;
}

void sceneData_data::InternalSwap(sceneData_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_map_.InternalSwap(&other->_impl_.param_map_);
  _impl_.index_map_.InternalSwap(&other->_impl_.index_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sceneData_data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[18]);
}

// ===================================================================

class sceneData::_Internal {
 public:
};

sceneData::sceneData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &sceneData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.sceneData)
}
sceneData::sceneData(const sceneData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  sceneData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.param_map_.MergeFrom(from._impl_.param_map_);
  // @@protoc_insertion_point(copy_constructor:agv_map.sceneData)
}

inline void sceneData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

sceneData::~sceneData() {
  // @@protoc_insertion_point(destructor:agv_map.sceneData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void sceneData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.param_map_.Destruct();
  _impl_.param_map_.~MapField();
}

void sceneData::ArenaDtor(void* object) {
  sceneData* _this = reinterpret_cast< sceneData* >(object);
  _this->_impl_.param_map_.Destruct();
}
void sceneData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void sceneData::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.sceneData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sceneData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .agv_map.sceneData.data> param_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.param_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* sceneData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.sceneData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .agv_map.sceneData.data> param_map = 1;
  if (!this->_internal_param_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::sceneData_data>;
    using WireHelper = sceneData_ParamMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_param_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.sceneData.ParamMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.sceneData)
  return target;
}

size_t sceneData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.sceneData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .agv_map.sceneData.data> param_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >::const_iterator
      it = this->_internal_param_map().begin();
      it != this->_internal_param_map().end(); ++it) {
    total_size += sceneData_ParamMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sceneData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    sceneData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sceneData::GetClassData() const { return &_class_data_; }


void sceneData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<sceneData*>(&to_msg);
  auto& from = static_cast<const sceneData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.sceneData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_map_.MergeFrom(from._impl_.param_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sceneData::CopyFrom(const sceneData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.sceneData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sceneData::IsInitialized() const {
  return true;
}

void sceneData::InternalSwap(sceneData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_map_.InternalSwap(&other->_impl_.param_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sceneData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[19]);
}

// ===================================================================

ShelfCofig_GetHighEntry_DoNotUse::ShelfCofig_GetHighEntry_DoNotUse() {}
ShelfCofig_GetHighEntry_DoNotUse::ShelfCofig_GetHighEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ShelfCofig_GetHighEntry_DoNotUse::MergeFrom(const ShelfCofig_GetHighEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ShelfCofig_GetHighEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[20]);
}

// ===================================================================

ShelfCofig_PutHighEntry_DoNotUse::ShelfCofig_PutHighEntry_DoNotUse() {}
ShelfCofig_PutHighEntry_DoNotUse::ShelfCofig_PutHighEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ShelfCofig_PutHighEntry_DoNotUse::MergeFrom(const ShelfCofig_PutHighEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ShelfCofig_PutHighEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[21]);
}

// ===================================================================

class ShelfCofig::_Internal {
 public:
};

ShelfCofig::ShelfCofig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ShelfCofig::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.ShelfCofig)
}
ShelfCofig::ShelfCofig(const ShelfCofig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShelfCofig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.get_high_)*/{}
    , /*decltype(_impl_.put_high_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.layernum_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.proto_type_){}
    , decltype(_impl_.shelf_width_){}
    , decltype(_impl_.shelf_depth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.get_high_.MergeFrom(from._impl_.get_high_);
  _this->_impl_.put_high_.MergeFrom(from._impl_.put_high_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.layernum_, &from._impl_.layernum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shelf_depth_) -
    reinterpret_cast<char*>(&_impl_.layernum_)) + sizeof(_impl_.shelf_depth_));
  // @@protoc_insertion_point(copy_constructor:agv_map.ShelfCofig)
}

inline void ShelfCofig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.get_high_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.put_high_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.layernum_){0}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.proto_type_){0}
    , decltype(_impl_.shelf_width_){0}
    , decltype(_impl_.shelf_depth_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShelfCofig::~ShelfCofig() {
  // @@protoc_insertion_point(destructor:agv_map.ShelfCofig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ShelfCofig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.get_high_.Destruct();
  _impl_.get_high_.~MapField();
  _impl_.put_high_.Destruct();
  _impl_.put_high_.~MapField();
  _impl_.name_.Destroy();
}

void ShelfCofig::ArenaDtor(void* object) {
  ShelfCofig* _this = reinterpret_cast< ShelfCofig* >(object);
  _this->_impl_.get_high_.Destruct();
  _this->_impl_.put_high_.Destruct();
}
void ShelfCofig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShelfCofig::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.ShelfCofig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.get_high_.Clear();
  _impl_.put_high_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.layernum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shelf_depth_) -
      reinterpret_cast<char*>(&_impl_.layernum_)) + sizeof(_impl_.shelf_depth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShelfCofig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.ShelfCofig.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 layerNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.layernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 proto_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.proto_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> get_high = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.get_high_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> put_high = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.put_high_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 shelf_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.shelf_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shelf_depth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.shelf_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShelfCofig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.ShelfCofig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.ShelfCofig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 layerNum = 2;
  if (this->_internal_layernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_layernum(), target);
  }

  // int32 depth = 3;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  // int32 proto_type = 4;
  if (this->_internal_proto_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_proto_type(), target);
  }

  // map<int32, int32> get_high = 5;
  if (!this->_internal_get_high().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = ShelfCofig_GetHighEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_get_high();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, int32> put_high = 6;
  if (!this->_internal_put_high().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = ShelfCofig_PutHighEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_put_high();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  // int32 shelf_width = 7;
  if (this->_internal_shelf_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_shelf_width(), target);
  }

  // int32 shelf_depth = 8;
  if (this->_internal_shelf_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_shelf_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.ShelfCofig)
  return target;
}

size_t ShelfCofig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.ShelfCofig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> get_high = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_get_high_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_get_high().begin();
      it != this->_internal_get_high().end(); ++it) {
    total_size += ShelfCofig_GetHighEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, int32> put_high = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_put_high_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_put_high().begin();
      it != this->_internal_put_high().end(); ++it) {
    total_size += ShelfCofig_PutHighEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 layerNum = 2;
  if (this->_internal_layernum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layernum());
  }

  // int32 depth = 3;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // int32 proto_type = 4;
  if (this->_internal_proto_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_proto_type());
  }

  // int32 shelf_width = 7;
  if (this->_internal_shelf_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shelf_width());
  }

  // int32 shelf_depth = 8;
  if (this->_internal_shelf_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shelf_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShelfCofig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShelfCofig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShelfCofig::GetClassData() const { return &_class_data_; }


void ShelfCofig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShelfCofig*>(&to_msg);
  auto& from = static_cast<const ShelfCofig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.ShelfCofig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.get_high_.MergeFrom(from._impl_.get_high_);
  _this->_impl_.put_high_.MergeFrom(from._impl_.put_high_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_layernum() != 0) {
    _this->_internal_set_layernum(from._internal_layernum());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_proto_type() != 0) {
    _this->_internal_set_proto_type(from._internal_proto_type());
  }
  if (from._internal_shelf_width() != 0) {
    _this->_internal_set_shelf_width(from._internal_shelf_width());
  }
  if (from._internal_shelf_depth() != 0) {
    _this->_internal_set_shelf_depth(from._internal_shelf_depth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShelfCofig::CopyFrom(const ShelfCofig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.ShelfCofig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShelfCofig::IsInitialized() const {
  return true;
}

void ShelfCofig::InternalSwap(ShelfCofig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.get_high_.InternalSwap(&other->_impl_.get_high_);
  _impl_.put_high_.InternalSwap(&other->_impl_.put_high_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShelfCofig, _impl_.shelf_depth_)
      + sizeof(ShelfCofig::_impl_.shelf_depth_)
      - PROTOBUF_FIELD_OFFSET(ShelfCofig, _impl_.layernum_)>(
          reinterpret_cast<char*>(&_impl_.layernum_),
          reinterpret_cast<char*>(&other->_impl_.layernum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShelfCofig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[22]);
}

// ===================================================================

Node_Basic_AgvTypeEntry_DoNotUse::Node_Basic_AgvTypeEntry_DoNotUse() {}
Node_Basic_AgvTypeEntry_DoNotUse::Node_Basic_AgvTypeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Node_Basic_AgvTypeEntry_DoNotUse::MergeFrom(const Node_Basic_AgvTypeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Node_Basic_AgvTypeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[23]);
}

// ===================================================================

class Node_Basic::_Internal {
 public:
  static const ::agv_map::Coord& coord(const Node_Basic* msg);
};

const ::agv_map::Coord&
Node_Basic::_Internal::coord(const Node_Basic* msg) {
  return *msg->_impl_.coord_;
}
Node_Basic::Node_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Node_Basic::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Node.Basic)
}
Node_Basic::Node_Basic(const Node_Basic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node_Basic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.agv_type_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.qrcode_str_){}
    , decltype(_impl_.mission_type_){}
    , decltype(_impl_.coord_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.qrcode_){}
    , decltype(_impl_.node_info_){}
    , decltype(_impl_.floor_){}
    , decltype(_impl_.stype_){}
    , decltype(_impl_.instapnt_id_){}
    , decltype(_impl_.pallet_dir_){}
    , decltype(_impl_.virtual__){}
    , decltype(_impl_.additional_type_){}
    , decltype(_impl_.shelf_id_){}
    , decltype(_impl_.shelf_dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.agv_type_.MergeFrom(from._impl_.agv_type_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.qrcode_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qrcode_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_qrcode_str().empty()) {
    _this->_impl_.qrcode_str_.Set(from._internal_qrcode_str(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mission_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mission_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mission_type().empty()) {
    _this->_impl_.mission_type_.Set(from._internal_mission_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_coord()) {
    _this->_impl_.coord_ = new ::agv_map::Coord(*from._impl_.coord_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shelf_dir_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.shelf_dir_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Node.Basic)
}

inline void Node_Basic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.agv_type_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.qrcode_str_){}
    , decltype(_impl_.mission_type_){}
    , decltype(_impl_.coord_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.qrcode_){0}
    , decltype(_impl_.node_info_){0}
    , decltype(_impl_.floor_){0}
    , decltype(_impl_.stype_){0}
    , decltype(_impl_.instapnt_id_){0}
    , decltype(_impl_.pallet_dir_){0}
    , decltype(_impl_.virtual__){false}
    , decltype(_impl_.additional_type_){0}
    , decltype(_impl_.shelf_id_){0}
    , decltype(_impl_.shelf_dir_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.qrcode_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qrcode_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mission_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mission_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Node_Basic::~Node_Basic() {
  // @@protoc_insertion_point(destructor:agv_map.Node.Basic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Node_Basic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agv_type_.Destruct();
  _impl_.agv_type_.~MapField();
  _impl_.name_.Destroy();
  _impl_.qrcode_str_.Destroy();
  _impl_.mission_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.coord_;
}

void Node_Basic::ArenaDtor(void* object) {
  Node_Basic* _this = reinterpret_cast< Node_Basic* >(object);
  _this->_impl_.agv_type_.Destruct();
}
void Node_Basic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node_Basic::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Node.Basic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agv_type_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.qrcode_str_.ClearToEmpty();
  _impl_.mission_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.coord_ != nullptr) {
    delete _impl_.coord_;
  }
  _impl_.coord_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shelf_dir_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.shelf_dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node_Basic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Node.Basic.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Coord coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 QRcode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.qrcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 node_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.node_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 floor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> agv_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.agv_type_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string qrcode_str = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_qrcode_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Node.Basic.qrcode_str"));
        } else
          goto handle_unusual;
        continue;
      // int32 stype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.stype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mission_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_mission_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Node.Basic.mission_type"));
        } else
          goto handle_unusual;
        continue;
      // int32 instapnt_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.instapnt_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pallet_dir = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.pallet_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool virtual = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.virtual__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 additional_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.additional_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shelf_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.shelf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shelf_dir = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.shelf_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node_Basic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Node.Basic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Node.Basic.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // .agv_map.Coord coord = 4;
  if (this->_internal_has_coord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::coord(this),
        _Internal::coord(this).GetCachedSize(), target, stream);
  }

  // int32 group_id = 5;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_group_id(), target);
  }

  // sint32 QRcode = 6;
  if (this->_internal_qrcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_qrcode(), target);
  }

  // int32 node_info = 7;
  if (this->_internal_node_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_node_info(), target);
  }

  // sint32 floor = 8;
  if (this->_internal_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_floor(), target);
  }

  // map<string, string> agv_type = 9;
  if (!this->_internal_agv_type().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Node_Basic_AgvTypeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_agv_type();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Node.Basic.AgvTypeEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Node.Basic.AgvTypeEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string qrcode_str = 10;
  if (!this->_internal_qrcode_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_qrcode_str().data(), static_cast<int>(this->_internal_qrcode_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Node.Basic.qrcode_str");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_qrcode_str(), target);
  }

  // int32 stype = 11;
  if (this->_internal_stype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_stype(), target);
  }

  // string mission_type = 12;
  if (!this->_internal_mission_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mission_type().data(), static_cast<int>(this->_internal_mission_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Node.Basic.mission_type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_mission_type(), target);
  }

  // int32 instapnt_id = 13;
  if (this->_internal_instapnt_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_instapnt_id(), target);
  }

  // int32 pallet_dir = 14;
  if (this->_internal_pallet_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_pallet_dir(), target);
  }

  // bool virtual = 15;
  if (this->_internal_virtual_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_virtual_(), target);
  }

  // int32 additional_type = 16;
  if (this->_internal_additional_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_additional_type(), target);
  }

  // int32 shelf_id = 17;
  if (this->_internal_shelf_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_shelf_id(), target);
  }

  // int32 shelf_dir = 18;
  if (this->_internal_shelf_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_shelf_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Node.Basic)
  return target;
}

size_t Node_Basic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Node.Basic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> agv_type = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agv_type_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_agv_type().begin();
      it != this->_internal_agv_type().end(); ++it) {
    total_size += Node_Basic_AgvTypeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string qrcode_str = 10;
  if (!this->_internal_qrcode_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_qrcode_str());
  }

  // string mission_type = 12;
  if (!this->_internal_mission_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mission_type());
  }

  // .agv_map.Coord coord = 4;
  if (this->_internal_has_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 group_id = 5;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // sint32 QRcode = 6;
  if (this->_internal_qrcode() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_qrcode());
  }

  // int32 node_info = 7;
  if (this->_internal_node_info() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_info());
  }

  // sint32 floor = 8;
  if (this->_internal_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_floor());
  }

  // int32 stype = 11;
  if (this->_internal_stype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stype());
  }

  // int32 instapnt_id = 13;
  if (this->_internal_instapnt_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_instapnt_id());
  }

  // int32 pallet_dir = 14;
  if (this->_internal_pallet_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pallet_dir());
  }

  // bool virtual = 15;
  if (this->_internal_virtual_() != 0) {
    total_size += 1 + 1;
  }

  // int32 additional_type = 16;
  if (this->_internal_additional_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_additional_type());
  }

  // int32 shelf_id = 17;
  if (this->_internal_shelf_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_shelf_id());
  }

  // int32 shelf_dir = 18;
  if (this->_internal_shelf_dir() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_shelf_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node_Basic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node_Basic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node_Basic::GetClassData() const { return &_class_data_; }


void Node_Basic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node_Basic*>(&to_msg);
  auto& from = static_cast<const Node_Basic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Node.Basic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agv_type_.MergeFrom(from._impl_.agv_type_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_qrcode_str().empty()) {
    _this->_internal_set_qrcode_str(from._internal_qrcode_str());
  }
  if (!from._internal_mission_type().empty()) {
    _this->_internal_set_mission_type(from._internal_mission_type());
  }
  if (from._internal_has_coord()) {
    _this->_internal_mutable_coord()->::agv_map::Coord::MergeFrom(
        from._internal_coord());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_qrcode() != 0) {
    _this->_internal_set_qrcode(from._internal_qrcode());
  }
  if (from._internal_node_info() != 0) {
    _this->_internal_set_node_info(from._internal_node_info());
  }
  if (from._internal_floor() != 0) {
    _this->_internal_set_floor(from._internal_floor());
  }
  if (from._internal_stype() != 0) {
    _this->_internal_set_stype(from._internal_stype());
  }
  if (from._internal_instapnt_id() != 0) {
    _this->_internal_set_instapnt_id(from._internal_instapnt_id());
  }
  if (from._internal_pallet_dir() != 0) {
    _this->_internal_set_pallet_dir(from._internal_pallet_dir());
  }
  if (from._internal_virtual_() != 0) {
    _this->_internal_set_virtual_(from._internal_virtual_());
  }
  if (from._internal_additional_type() != 0) {
    _this->_internal_set_additional_type(from._internal_additional_type());
  }
  if (from._internal_shelf_id() != 0) {
    _this->_internal_set_shelf_id(from._internal_shelf_id());
  }
  if (from._internal_shelf_dir() != 0) {
    _this->_internal_set_shelf_dir(from._internal_shelf_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node_Basic::CopyFrom(const Node_Basic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Node.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Basic::IsInitialized() const {
  return true;
}

void Node_Basic::InternalSwap(Node_Basic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agv_type_.InternalSwap(&other->_impl_.agv_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.qrcode_str_, lhs_arena,
      &other->_impl_.qrcode_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mission_type_, lhs_arena,
      &other->_impl_.mission_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node_Basic, _impl_.shelf_dir_)
      + sizeof(Node_Basic::_impl_.shelf_dir_)
      - PROTOBUF_FIELD_OFFSET(Node_Basic, _impl_.coord_)>(
          reinterpret_cast<char*>(&_impl_.coord_),
          reinterpret_cast<char*>(&other->_impl_.coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node_Basic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[24]);
}

// ===================================================================

class Node_Sim_param::_Internal {
 public:
};

Node_Sim_param::Node_Sim_param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Node.Sim_param)
}
Node_Sim_param::Node_Sim_param(const Node_Sim_param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node_Sim_param* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.interval_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.target_area_){}
    , decltype(_impl_.target_sta_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.enable_, &from._impl_.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_sta_) -
    reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.target_sta_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Node.Sim_param)
}

inline void Node_Sim_param::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , decltype(_impl_.enable_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.interval_){0}
    , decltype(_impl_.offset_){0}
    , decltype(_impl_.target_area_){0}
    , decltype(_impl_.target_sta_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Node_Sim_param::~Node_Sim_param() {
  // @@protoc_insertion_point(destructor:agv_map.Node.Sim_param)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node_Sim_param::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_.Destroy();
}

void Node_Sim_param::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node_Sim_param::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Node.Sim_param)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  ::memset(&_impl_.enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_sta_) -
      reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.target_sta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node_Sim_param::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 target_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.target_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 target_sta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.target_sta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Node.Sim_param.target"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node_Sim_param::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Node.Sim_param)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_enable(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 interval = 3;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_interval(), target);
  }

  // sint32 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_offset(), target);
  }

  // sint32 target_area = 5;
  if (this->_internal_target_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_target_area(), target);
  }

  // sint32 target_sta = 6;
  if (this->_internal_target_sta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_target_sta(), target);
  }

  // string target = 7;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Node.Sim_param.target");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Node.Sim_param)
  return target;
}

size_t Node_Sim_param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Node.Sim_param)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 7;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // int32 enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enable());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 interval = 3;
  if (this->_internal_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_interval());
  }

  // sint32 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_offset());
  }

  // sint32 target_area = 5;
  if (this->_internal_target_area() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_target_area());
  }

  // sint32 target_sta = 6;
  if (this->_internal_target_sta() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_target_sta());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node_Sim_param::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node_Sim_param::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node_Sim_param::GetClassData() const { return &_class_data_; }


void Node_Sim_param::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node_Sim_param*>(&to_msg);
  auto& from = static_cast<const Node_Sim_param&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Node.Sim_param)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_target_area() != 0) {
    _this->_internal_set_target_area(from._internal_target_area());
  }
  if (from._internal_target_sta() != 0) {
    _this->_internal_set_target_sta(from._internal_target_sta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node_Sim_param::CopyFrom(const Node_Sim_param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Node.Sim_param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Sim_param::IsInitialized() const {
  return true;
}

void Node_Sim_param::InternalSwap(Node_Sim_param* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node_Sim_param, _impl_.target_sta_)
      + sizeof(Node_Sim_param::_impl_.target_sta_)
      - PROTOBUF_FIELD_OFFSET(Node_Sim_param, _impl_.enable_)>(
          reinterpret_cast<char*>(&_impl_.enable_),
          reinterpret_cast<char*>(&other->_impl_.enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node_Sim_param::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[25]);
}

// ===================================================================

class Node::_Internal {
 public:
  static const ::agv_map::Node_Basic& basic(const Node* msg);
  static const ::agv_map::sceneData& agv_param(const Node* msg);
  static const ::agv_map::sceneData& avo_param(const Node* msg);
  static const ::agv_map::sceneData& ctl_param(const Node* msg);
  static const ::agv_map::sceneData& rut_param(const Node* msg);
  static const ::agv_map::sceneData& act_param(const Node* msg);
  static const ::agv_map::Node_Sim_param& sim_param(const Node* msg);
};

const ::agv_map::Node_Basic&
Node::_Internal::basic(const Node* msg) {
  return *msg->_impl_.basic_;
}
const ::agv_map::sceneData&
Node::_Internal::agv_param(const Node* msg) {
  return *msg->_impl_.agv_param_;
}
const ::agv_map::sceneData&
Node::_Internal::avo_param(const Node* msg) {
  return *msg->_impl_.avo_param_;
}
const ::agv_map::sceneData&
Node::_Internal::ctl_param(const Node* msg) {
  return *msg->_impl_.ctl_param_;
}
const ::agv_map::sceneData&
Node::_Internal::rut_param(const Node* msg) {
  return *msg->_impl_.rut_param_;
}
const ::agv_map::sceneData&
Node::_Internal::act_param(const Node* msg) {
  return *msg->_impl_.act_param_;
}
const ::agv_map::Node_Sim_param&
Node::_Internal::sim_param(const Node* msg) {
  return *msg->_impl_.sim_param_;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.in_area_){from._impl_.in_area_}
    , /*decltype(_impl_._in_area_cached_byte_size_)*/{0}
    , decltype(_impl_.edge_list_){from._impl_.edge_list_}
    , /*decltype(_impl_._edge_list_cached_byte_size_)*/{0}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.agv_param_){nullptr}
    , decltype(_impl_.avo_param_){nullptr}
    , decltype(_impl_.ctl_param_){nullptr}
    , decltype(_impl_.rut_param_){nullptr}
    , decltype(_impl_.act_param_){nullptr}
    , decltype(_impl_.sim_param_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basic()) {
    _this->_impl_.basic_ = new ::agv_map::Node_Basic(*from._impl_.basic_);
  }
  if (from._internal_has_agv_param()) {
    _this->_impl_.agv_param_ = new ::agv_map::sceneData(*from._impl_.agv_param_);
  }
  if (from._internal_has_avo_param()) {
    _this->_impl_.avo_param_ = new ::agv_map::sceneData(*from._impl_.avo_param_);
  }
  if (from._internal_has_ctl_param()) {
    _this->_impl_.ctl_param_ = new ::agv_map::sceneData(*from._impl_.ctl_param_);
  }
  if (from._internal_has_rut_param()) {
    _this->_impl_.rut_param_ = new ::agv_map::sceneData(*from._impl_.rut_param_);
  }
  if (from._internal_has_act_param()) {
    _this->_impl_.act_param_ = new ::agv_map::sceneData(*from._impl_.act_param_);
  }
  if (from._internal_has_sim_param()) {
    _this->_impl_.sim_param_ = new ::agv_map::Node_Sim_param(*from._impl_.sim_param_);
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.in_area_){arena}
    , /*decltype(_impl_._in_area_cached_byte_size_)*/{0}
    , decltype(_impl_.edge_list_){arena}
    , /*decltype(_impl_._edge_list_cached_byte_size_)*/{0}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.agv_param_){nullptr}
    , decltype(_impl_.avo_param_){nullptr}
    , decltype(_impl_.ctl_param_){nullptr}
    , decltype(_impl_.rut_param_){nullptr}
    , decltype(_impl_.act_param_){nullptr}
    , decltype(_impl_.sim_param_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:agv_map.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.in_area_.~RepeatedField();
  _impl_.edge_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.basic_;
  if (this != internal_default_instance()) delete _impl_.agv_param_;
  if (this != internal_default_instance()) delete _impl_.avo_param_;
  if (this != internal_default_instance()) delete _impl_.ctl_param_;
  if (this != internal_default_instance()) delete _impl_.rut_param_;
  if (this != internal_default_instance()) delete _impl_.act_param_;
  if (this != internal_default_instance()) delete _impl_.sim_param_;
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.in_area_.Clear();
  _impl_.edge_list_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.basic_ != nullptr) {
    delete _impl_.basic_;
  }
  _impl_.basic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.agv_param_ != nullptr) {
    delete _impl_.agv_param_;
  }
  _impl_.agv_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.avo_param_ != nullptr) {
    delete _impl_.avo_param_;
  }
  _impl_.avo_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ctl_param_ != nullptr) {
    delete _impl_.ctl_param_;
  }
  _impl_.ctl_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rut_param_ != nullptr) {
    delete _impl_.rut_param_;
  }
  _impl_.rut_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.act_param_ != nullptr) {
    delete _impl_.act_param_;
  }
  _impl_.act_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sim_param_ != nullptr) {
    delete _impl_.sim_param_;
  }
  _impl_.sim_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .agv_map.Node.Basic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 in_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_in_area(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_in_area(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 edge_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_edge_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_edge_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData agv_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_agv_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData avo_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avo_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData ctl_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctl_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData rut_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rut_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData act_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_act_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Node.Sim_param sim_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sim_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Node.Basic basic = 1;
  if (this->_internal_has_basic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::basic(this),
        _Internal::basic(this).GetCachedSize(), target, stream);
  }

  // repeated int32 in_area = 2;
  {
    int byte_size = _impl_._in_area_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_in_area(), byte_size, target);
    }
  }

  // repeated int32 edge_list = 3;
  {
    int byte_size = _impl_._edge_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_edge_list(), byte_size, target);
    }
  }

  // .agv_map.sceneData agv_param = 4;
  if (this->_internal_has_agv_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::agv_param(this),
        _Internal::agv_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.sceneData avo_param = 5;
  if (this->_internal_has_avo_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::avo_param(this),
        _Internal::avo_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.sceneData ctl_param = 6;
  if (this->_internal_has_ctl_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::ctl_param(this),
        _Internal::ctl_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.sceneData rut_param = 7;
  if (this->_internal_has_rut_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::rut_param(this),
        _Internal::rut_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.sceneData act_param = 8;
  if (this->_internal_has_act_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::act_param(this),
        _Internal::act_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.Node.Sim_param sim_param = 9;
  if (this->_internal_has_sim_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::sim_param(this),
        _Internal::sim_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 in_area = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.in_area_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._in_area_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 edge_list = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.edge_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._edge_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .agv_map.Node.Basic basic = 1;
  if (this->_internal_has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basic_);
  }

  // .agv_map.sceneData agv_param = 4;
  if (this->_internal_has_agv_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.agv_param_);
  }

  // .agv_map.sceneData avo_param = 5;
  if (this->_internal_has_avo_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.avo_param_);
  }

  // .agv_map.sceneData ctl_param = 6;
  if (this->_internal_has_ctl_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ctl_param_);
  }

  // .agv_map.sceneData rut_param = 7;
  if (this->_internal_has_rut_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rut_param_);
  }

  // .agv_map.sceneData act_param = 8;
  if (this->_internal_has_act_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.act_param_);
  }

  // .agv_map.Node.Sim_param sim_param = 9;
  if (this->_internal_has_sim_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sim_param_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.in_area_.MergeFrom(from._impl_.in_area_);
  _this->_impl_.edge_list_.MergeFrom(from._impl_.edge_list_);
  if (from._internal_has_basic()) {
    _this->_internal_mutable_basic()->::agv_map::Node_Basic::MergeFrom(
        from._internal_basic());
  }
  if (from._internal_has_agv_param()) {
    _this->_internal_mutable_agv_param()->::agv_map::sceneData::MergeFrom(
        from._internal_agv_param());
  }
  if (from._internal_has_avo_param()) {
    _this->_internal_mutable_avo_param()->::agv_map::sceneData::MergeFrom(
        from._internal_avo_param());
  }
  if (from._internal_has_ctl_param()) {
    _this->_internal_mutable_ctl_param()->::agv_map::sceneData::MergeFrom(
        from._internal_ctl_param());
  }
  if (from._internal_has_rut_param()) {
    _this->_internal_mutable_rut_param()->::agv_map::sceneData::MergeFrom(
        from._internal_rut_param());
  }
  if (from._internal_has_act_param()) {
    _this->_internal_mutable_act_param()->::agv_map::sceneData::MergeFrom(
        from._internal_act_param());
  }
  if (from._internal_has_sim_param()) {
    _this->_internal_mutable_sim_param()->::agv_map::Node_Sim_param::MergeFrom(
        from._internal_sim_param());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.in_area_.InternalSwap(&other->_impl_.in_area_);
  _impl_.edge_list_.InternalSwap(&other->_impl_.edge_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.sim_param_)
      + sizeof(Node::_impl_.sim_param_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.basic_)>(
          reinterpret_cast<char*>(&_impl_.basic_),
          reinterpret_cast<char*>(&other->_impl_.basic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[26]);
}

// ===================================================================

Edge_Basic_AgvTypeEntry_DoNotUse::Edge_Basic_AgvTypeEntry_DoNotUse() {}
Edge_Basic_AgvTypeEntry_DoNotUse::Edge_Basic_AgvTypeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Edge_Basic_AgvTypeEntry_DoNotUse::MergeFrom(const Edge_Basic_AgvTypeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Edge_Basic_AgvTypeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[27]);
}

// ===================================================================

class Edge_Basic::_Internal {
 public:
  static const ::agv_map::Position& start_pos(const Edge_Basic* msg);
  static const ::agv_map::Position& end_pos(const Edge_Basic* msg);
  static const ::agv_map::Edge_Arc& arc(const Edge_Basic* msg);
};

const ::agv_map::Position&
Edge_Basic::_Internal::start_pos(const Edge_Basic* msg) {
  return *msg->_impl_.start_pos_;
}
const ::agv_map::Position&
Edge_Basic::_Internal::end_pos(const Edge_Basic* msg) {
  return *msg->_impl_.end_pos_;
}
const ::agv_map::Edge_Arc&
Edge_Basic::_Internal::arc(const Edge_Basic* msg) {
  return *msg->_impl_.arc_;
}
Edge_Basic::Edge_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Edge_Basic::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Edge.Basic)
}
Edge_Basic::Edge_Basic(const Edge_Basic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge_Basic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.agv_type_)*/{}
    , decltype(_impl_.start_pos_){nullptr}
    , decltype(_impl_.end_pos_){nullptr}
    , decltype(_impl_.arc_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.start_id_){}
    , decltype(_impl_.end_id_){}
    , decltype(_impl_.seglen_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.floor_){}
    , decltype(_impl_.trans_angle_){}
    , decltype(_impl_.orientation_angle_){}
    , decltype(_impl_.bothways_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.c_){}
    , decltype(_impl_.speed_max_){}
    , decltype(_impl_.bond_seg_id_){}
    , decltype(_impl_.virtual__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.agv_type_.MergeFrom(from._impl_.agv_type_);
  if (from._internal_has_start_pos()) {
    _this->_impl_.start_pos_ = new ::agv_map::Position(*from._impl_.start_pos_);
  }
  if (from._internal_has_end_pos()) {
    _this->_impl_.end_pos_ = new ::agv_map::Position(*from._impl_.end_pos_);
  }
  if (from._internal_has_arc()) {
    _this->_impl_.arc_ = new ::agv_map::Edge_Arc(*from._impl_.arc_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.virtual__) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.virtual__));
  // @@protoc_insertion_point(copy_constructor:agv_map.Edge.Basic)
}

inline void Edge_Basic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.agv_type_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.start_pos_){nullptr}
    , decltype(_impl_.end_pos_){nullptr}
    , decltype(_impl_.arc_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.start_id_){0}
    , decltype(_impl_.end_id_){0}
    , decltype(_impl_.seglen_){0}
    , decltype(_impl_.enable_){0}
    , decltype(_impl_.floor_){0}
    , decltype(_impl_.trans_angle_){0}
    , decltype(_impl_.orientation_angle_){0}
    , decltype(_impl_.bothways_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.c_){0}
    , decltype(_impl_.speed_max_){0}
    , decltype(_impl_.bond_seg_id_){0}
    , decltype(_impl_.virtual__){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Edge_Basic::~Edge_Basic() {
  // @@protoc_insertion_point(destructor:agv_map.Edge.Basic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Edge_Basic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agv_type_.Destruct();
  _impl_.agv_type_.~MapField();
  if (this != internal_default_instance()) delete _impl_.start_pos_;
  if (this != internal_default_instance()) delete _impl_.end_pos_;
  if (this != internal_default_instance()) delete _impl_.arc_;
}

void Edge_Basic::ArenaDtor(void* object) {
  Edge_Basic* _this = reinterpret_cast< Edge_Basic* >(object);
  _this->_impl_.agv_type_.Destruct();
}
void Edge_Basic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge_Basic::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Edge.Basic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agv_type_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.start_pos_ != nullptr) {
    delete _impl_.start_pos_;
  }
  _impl_.start_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_pos_ != nullptr) {
    delete _impl_.end_pos_;
  }
  _impl_.end_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arc_ != nullptr) {
    delete _impl_.arc_;
  }
  _impl_.arc_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.virtual__) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.virtual__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge_Basic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 start_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Position start_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 end_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.end_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Position end_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seglen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.seglen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> agv_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.agv_type_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 enable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 floor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 trans_angle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.trans_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float orientation_angle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.orientation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Edge.Arc arc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 bothways = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.bothways_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 b = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 c = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speed_max = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.speed_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bond_seg_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.bond_seg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool virtual = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.virtual__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge_Basic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Edge.Basic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 start_id = 3;
  if (this->_internal_start_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_id(), target);
  }

  // .agv_map.Position start_pos = 4;
  if (this->_internal_has_start_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::start_pos(this),
        _Internal::start_pos(this).GetCachedSize(), target, stream);
  }

  // int32 end_id = 5;
  if (this->_internal_end_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_end_id(), target);
  }

  // .agv_map.Position end_pos = 6;
  if (this->_internal_has_end_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::end_pos(this),
        _Internal::end_pos(this).GetCachedSize(), target, stream);
  }

  // int32 seglen = 7;
  if (this->_internal_seglen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_seglen(), target);
  }

  // map<string, string> agv_type = 8;
  if (!this->_internal_agv_type().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Edge_Basic_AgvTypeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_agv_type();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Edge.Basic.AgvTypeEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Edge.Basic.AgvTypeEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // int32 enable = 9;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_enable(), target);
  }

  // sint32 floor = 10;
  if (this->_internal_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(10, this->_internal_floor(), target);
  }

  // int32 trans_angle = 11;
  if (this->_internal_trans_angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_trans_angle(), target);
  }

  // float orientation_angle = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orientation_angle = this->_internal_orientation_angle();
  uint32_t raw_orientation_angle;
  memcpy(&raw_orientation_angle, &tmp_orientation_angle, sizeof(tmp_orientation_angle));
  if (raw_orientation_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_orientation_angle(), target);
  }

  // .agv_map.Edge.Arc arc = 13;
  if (this->_internal_has_arc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::arc(this),
        _Internal::arc(this).GetCachedSize(), target, stream);
  }

  // sint32 bothways = 14;
  if (this->_internal_bothways() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(14, this->_internal_bothways(), target);
  }

  // int32 a = 15;
  if (this->_internal_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_a(), target);
  }

  // int32 b = 16;
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_b(), target);
  }

  // int32 c = 17;
  if (this->_internal_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_c(), target);
  }

  // int32 speed_max = 18;
  if (this->_internal_speed_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_speed_max(), target);
  }

  // int32 bond_seg_id = 19;
  if (this->_internal_bond_seg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_bond_seg_id(), target);
  }

  // bool virtual = 20;
  if (this->_internal_virtual_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_virtual_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Edge.Basic)
  return target;
}

size_t Edge_Basic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Edge.Basic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> agv_type = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agv_type_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_agv_type().begin();
      it != this->_internal_agv_type().end(); ++it) {
    total_size += Edge_Basic_AgvTypeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .agv_map.Position start_pos = 4;
  if (this->_internal_has_start_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_pos_);
  }

  // .agv_map.Position end_pos = 6;
  if (this->_internal_has_end_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_pos_);
  }

  // .agv_map.Edge.Arc arc = 13;
  if (this->_internal_has_arc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arc_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 start_id = 3;
  if (this->_internal_start_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_id());
  }

  // int32 end_id = 5;
  if (this->_internal_end_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_id());
  }

  // int32 seglen = 7;
  if (this->_internal_seglen() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seglen());
  }

  // int32 enable = 9;
  if (this->_internal_enable() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enable());
  }

  // sint32 floor = 10;
  if (this->_internal_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_floor());
  }

  // int32 trans_angle = 11;
  if (this->_internal_trans_angle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trans_angle());
  }

  // float orientation_angle = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orientation_angle = this->_internal_orientation_angle();
  uint32_t raw_orientation_angle;
  memcpy(&raw_orientation_angle, &tmp_orientation_angle, sizeof(tmp_orientation_angle));
  if (raw_orientation_angle != 0) {
    total_size += 1 + 4;
  }

  // sint32 bothways = 14;
  if (this->_internal_bothways() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_bothways());
  }

  // int32 a = 15;
  if (this->_internal_a() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
  }

  // int32 b = 16;
  if (this->_internal_b() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  // int32 c = 17;
  if (this->_internal_c() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_c());
  }

  // int32 speed_max = 18;
  if (this->_internal_speed_max() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_speed_max());
  }

  // int32 bond_seg_id = 19;
  if (this->_internal_bond_seg_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bond_seg_id());
  }

  // bool virtual = 20;
  if (this->_internal_virtual_() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge_Basic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge_Basic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge_Basic::GetClassData() const { return &_class_data_; }


void Edge_Basic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge_Basic*>(&to_msg);
  auto& from = static_cast<const Edge_Basic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Edge.Basic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agv_type_.MergeFrom(from._impl_.agv_type_);
  if (from._internal_has_start_pos()) {
    _this->_internal_mutable_start_pos()->::agv_map::Position::MergeFrom(
        from._internal_start_pos());
  }
  if (from._internal_has_end_pos()) {
    _this->_internal_mutable_end_pos()->::agv_map::Position::MergeFrom(
        from._internal_end_pos());
  }
  if (from._internal_has_arc()) {
    _this->_internal_mutable_arc()->::agv_map::Edge_Arc::MergeFrom(
        from._internal_arc());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_start_id() != 0) {
    _this->_internal_set_start_id(from._internal_start_id());
  }
  if (from._internal_end_id() != 0) {
    _this->_internal_set_end_id(from._internal_end_id());
  }
  if (from._internal_seglen() != 0) {
    _this->_internal_set_seglen(from._internal_seglen());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  if (from._internal_floor() != 0) {
    _this->_internal_set_floor(from._internal_floor());
  }
  if (from._internal_trans_angle() != 0) {
    _this->_internal_set_trans_angle(from._internal_trans_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orientation_angle = from._internal_orientation_angle();
  uint32_t raw_orientation_angle;
  memcpy(&raw_orientation_angle, &tmp_orientation_angle, sizeof(tmp_orientation_angle));
  if (raw_orientation_angle != 0) {
    _this->_internal_set_orientation_angle(from._internal_orientation_angle());
  }
  if (from._internal_bothways() != 0) {
    _this->_internal_set_bothways(from._internal_bothways());
  }
  if (from._internal_a() != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  if (from._internal_b() != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  if (from._internal_c() != 0) {
    _this->_internal_set_c(from._internal_c());
  }
  if (from._internal_speed_max() != 0) {
    _this->_internal_set_speed_max(from._internal_speed_max());
  }
  if (from._internal_bond_seg_id() != 0) {
    _this->_internal_set_bond_seg_id(from._internal_bond_seg_id());
  }
  if (from._internal_virtual_() != 0) {
    _this->_internal_set_virtual_(from._internal_virtual_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge_Basic::CopyFrom(const Edge_Basic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Edge.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge_Basic::IsInitialized() const {
  return true;
}

void Edge_Basic::InternalSwap(Edge_Basic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agv_type_.InternalSwap(&other->_impl_.agv_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge_Basic, _impl_.virtual__)
      + sizeof(Edge_Basic::_impl_.virtual__)
      - PROTOBUF_FIELD_OFFSET(Edge_Basic, _impl_.start_pos_)>(
          reinterpret_cast<char*>(&_impl_.start_pos_),
          reinterpret_cast<char*>(&other->_impl_.start_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge_Basic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[28]);
}

// ===================================================================

class Edge_Arc::_Internal {
 public:
  static const ::agv_map::Coord& cen_pnt(const Edge_Arc* msg);
};

const ::agv_map::Coord&
Edge_Arc::_Internal::cen_pnt(const Edge_Arc* msg) {
  return *msg->_impl_.cen_pnt_;
}
Edge_Arc::Edge_Arc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Edge.Arc)
}
Edge_Arc::Edge_Arc(const Edge_Arc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge_Arc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cen_pnt_){nullptr}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.clockdir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cen_pnt()) {
    _this->_impl_.cen_pnt_ = new ::agv_map::Coord(*from._impl_.cen_pnt_);
  }
  ::memcpy(&_impl_.radius_, &from._impl_.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clockdir_) -
    reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.clockdir_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Edge.Arc)
}

inline void Edge_Arc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cen_pnt_){nullptr}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.clockdir_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Edge_Arc::~Edge_Arc() {
  // @@protoc_insertion_point(destructor:agv_map.Edge.Arc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge_Arc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cen_pnt_;
}

void Edge_Arc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge_Arc::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Edge.Arc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cen_pnt_ != nullptr) {
    delete _impl_.cen_pnt_;
  }
  _impl_.cen_pnt_ = nullptr;
  ::memset(&_impl_.radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clockdir_) -
      reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.clockdir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge_Arc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .agv_map.Coord cen_pnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cen_pnt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 clockdir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.clockdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge_Arc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Edge.Arc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Coord cen_pnt = 1;
  if (this->_internal_has_cen_pnt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cen_pnt(this),
        _Internal::cen_pnt(this).GetCachedSize(), target, stream);
  }

  // int32 radius = 2;
  if (this->_internal_radius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_radius(), target);
  }

  // sint32 clockdir = 3;
  if (this->_internal_clockdir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_clockdir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Edge.Arc)
  return target;
}

size_t Edge_Arc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Edge.Arc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agv_map.Coord cen_pnt = 1;
  if (this->_internal_has_cen_pnt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cen_pnt_);
  }

  // int32 radius = 2;
  if (this->_internal_radius() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_radius());
  }

  // sint32 clockdir = 3;
  if (this->_internal_clockdir() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_clockdir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge_Arc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge_Arc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge_Arc::GetClassData() const { return &_class_data_; }


void Edge_Arc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge_Arc*>(&to_msg);
  auto& from = static_cast<const Edge_Arc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Edge.Arc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cen_pnt()) {
    _this->_internal_mutable_cen_pnt()->::agv_map::Coord::MergeFrom(
        from._internal_cen_pnt());
  }
  if (from._internal_radius() != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  if (from._internal_clockdir() != 0) {
    _this->_internal_set_clockdir(from._internal_clockdir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge_Arc::CopyFrom(const Edge_Arc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Edge.Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge_Arc::IsInitialized() const {
  return true;
}

void Edge_Arc::InternalSwap(Edge_Arc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge_Arc, _impl_.clockdir_)
      + sizeof(Edge_Arc::_impl_.clockdir_)
      - PROTOBUF_FIELD_OFFSET(Edge_Arc, _impl_.cen_pnt_)>(
          reinterpret_cast<char*>(&_impl_.cen_pnt_),
          reinterpret_cast<char*>(&other->_impl_.cen_pnt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge_Arc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[29]);
}

// ===================================================================

class Edge::_Internal {
 public:
  static const ::agv_map::Edge_Basic& basic(const Edge* msg);
  static const ::agv_map::sceneData& agv_param(const Edge* msg);
  static const ::agv_map::sceneData& avo_param(const Edge* msg);
  static const ::agv_map::sceneData& ctl_param(const Edge* msg);
  static const ::agv_map::sceneData& rut_param(const Edge* msg);
  static const ::agv_map::sceneData& act_param(const Edge* msg);
};

const ::agv_map::Edge_Basic&
Edge::_Internal::basic(const Edge* msg) {
  return *msg->_impl_.basic_;
}
const ::agv_map::sceneData&
Edge::_Internal::agv_param(const Edge* msg) {
  return *msg->_impl_.agv_param_;
}
const ::agv_map::sceneData&
Edge::_Internal::avo_param(const Edge* msg) {
  return *msg->_impl_.avo_param_;
}
const ::agv_map::sceneData&
Edge::_Internal::ctl_param(const Edge* msg) {
  return *msg->_impl_.ctl_param_;
}
const ::agv_map::sceneData&
Edge::_Internal::rut_param(const Edge* msg) {
  return *msg->_impl_.rut_param_;
}
const ::agv_map::sceneData&
Edge::_Internal::act_param(const Edge* msg) {
  return *msg->_impl_.act_param_;
}
Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.in_area_){from._impl_.in_area_}
    , /*decltype(_impl_._in_area_cached_byte_size_)*/{0}
    , decltype(_impl_.control_point_){from._impl_.control_point_}
    , decltype(_impl_.curve_point_){from._impl_.curve_point_}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.agv_param_){nullptr}
    , decltype(_impl_.avo_param_){nullptr}
    , decltype(_impl_.ctl_param_){nullptr}
    , decltype(_impl_.rut_param_){nullptr}
    , decltype(_impl_.act_param_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basic()) {
    _this->_impl_.basic_ = new ::agv_map::Edge_Basic(*from._impl_.basic_);
  }
  if (from._internal_has_agv_param()) {
    _this->_impl_.agv_param_ = new ::agv_map::sceneData(*from._impl_.agv_param_);
  }
  if (from._internal_has_avo_param()) {
    _this->_impl_.avo_param_ = new ::agv_map::sceneData(*from._impl_.avo_param_);
  }
  if (from._internal_has_ctl_param()) {
    _this->_impl_.ctl_param_ = new ::agv_map::sceneData(*from._impl_.ctl_param_);
  }
  if (from._internal_has_rut_param()) {
    _this->_impl_.rut_param_ = new ::agv_map::sceneData(*from._impl_.rut_param_);
  }
  if (from._internal_has_act_param()) {
    _this->_impl_.act_param_ = new ::agv_map::sceneData(*from._impl_.act_param_);
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Edge)
}

inline void Edge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.in_area_){arena}
    , /*decltype(_impl_._in_area_cached_byte_size_)*/{0}
    , decltype(_impl_.control_point_){arena}
    , decltype(_impl_.curve_point_){arena}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.agv_param_){nullptr}
    , decltype(_impl_.avo_param_){nullptr}
    , decltype(_impl_.ctl_param_){nullptr}
    , decltype(_impl_.rut_param_){nullptr}
    , decltype(_impl_.act_param_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:agv_map.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.in_area_.~RepeatedField();
  _impl_.control_point_.~RepeatedPtrField();
  _impl_.curve_point_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.basic_;
  if (this != internal_default_instance()) delete _impl_.agv_param_;
  if (this != internal_default_instance()) delete _impl_.avo_param_;
  if (this != internal_default_instance()) delete _impl_.ctl_param_;
  if (this != internal_default_instance()) delete _impl_.rut_param_;
  if (this != internal_default_instance()) delete _impl_.act_param_;
}

void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.in_area_.Clear();
  _impl_.control_point_.Clear();
  _impl_.curve_point_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.basic_ != nullptr) {
    delete _impl_.basic_;
  }
  _impl_.basic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.agv_param_ != nullptr) {
    delete _impl_.agv_param_;
  }
  _impl_.agv_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.avo_param_ != nullptr) {
    delete _impl_.avo_param_;
  }
  _impl_.avo_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ctl_param_ != nullptr) {
    delete _impl_.ctl_param_;
  }
  _impl_.ctl_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rut_param_ != nullptr) {
    delete _impl_.rut_param_;
  }
  _impl_.rut_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.act_param_ != nullptr) {
    delete _impl_.act_param_;
  }
  _impl_.act_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .agv_map.Edge.Basic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 in_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_in_area(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_in_area(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData agv_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_agv_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData avo_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_avo_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData ctl_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctl_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData rut_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rut_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.sceneData act_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_act_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Coord control_point = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Position curve_point = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curve_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Edge.Basic basic = 1;
  if (this->_internal_has_basic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::basic(this),
        _Internal::basic(this).GetCachedSize(), target, stream);
  }

  // repeated int32 in_area = 2;
  {
    int byte_size = _impl_._in_area_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_in_area(), byte_size, target);
    }
  }

  // .agv_map.sceneData agv_param = 3;
  if (this->_internal_has_agv_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::agv_param(this),
        _Internal::agv_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.sceneData avo_param = 4;
  if (this->_internal_has_avo_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::avo_param(this),
        _Internal::avo_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.sceneData ctl_param = 5;
  if (this->_internal_has_ctl_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ctl_param(this),
        _Internal::ctl_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.sceneData rut_param = 6;
  if (this->_internal_has_rut_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::rut_param(this),
        _Internal::rut_param(this).GetCachedSize(), target, stream);
  }

  // .agv_map.sceneData act_param = 7;
  if (this->_internal_has_act_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::act_param(this),
        _Internal::act_param(this).GetCachedSize(), target, stream);
  }

  // repeated .agv_map.Coord control_point = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_control_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_control_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .agv_map.Position curve_point = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_curve_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_curve_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 in_area = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.in_area_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._in_area_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .agv_map.Coord control_point = 8;
  total_size += 1UL * this->_internal_control_point_size();
  for (const auto& msg : this->_impl_.control_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .agv_map.Position curve_point = 9;
  total_size += 1UL * this->_internal_curve_point_size();
  for (const auto& msg : this->_impl_.curve_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .agv_map.Edge.Basic basic = 1;
  if (this->_internal_has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basic_);
  }

  // .agv_map.sceneData agv_param = 3;
  if (this->_internal_has_agv_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.agv_param_);
  }

  // .agv_map.sceneData avo_param = 4;
  if (this->_internal_has_avo_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.avo_param_);
  }

  // .agv_map.sceneData ctl_param = 5;
  if (this->_internal_has_ctl_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ctl_param_);
  }

  // .agv_map.sceneData rut_param = 6;
  if (this->_internal_has_rut_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rut_param_);
  }

  // .agv_map.sceneData act_param = 7;
  if (this->_internal_has_act_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.act_param_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }


void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge*>(&to_msg);
  auto& from = static_cast<const Edge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Edge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.in_area_.MergeFrom(from._impl_.in_area_);
  _this->_impl_.control_point_.MergeFrom(from._impl_.control_point_);
  _this->_impl_.curve_point_.MergeFrom(from._impl_.curve_point_);
  if (from._internal_has_basic()) {
    _this->_internal_mutable_basic()->::agv_map::Edge_Basic::MergeFrom(
        from._internal_basic());
  }
  if (from._internal_has_agv_param()) {
    _this->_internal_mutable_agv_param()->::agv_map::sceneData::MergeFrom(
        from._internal_agv_param());
  }
  if (from._internal_has_avo_param()) {
    _this->_internal_mutable_avo_param()->::agv_map::sceneData::MergeFrom(
        from._internal_avo_param());
  }
  if (from._internal_has_ctl_param()) {
    _this->_internal_mutable_ctl_param()->::agv_map::sceneData::MergeFrom(
        from._internal_ctl_param());
  }
  if (from._internal_has_rut_param()) {
    _this->_internal_mutable_rut_param()->::agv_map::sceneData::MergeFrom(
        from._internal_rut_param());
  }
  if (from._internal_has_act_param()) {
    _this->_internal_mutable_act_param()->::agv_map::sceneData::MergeFrom(
        from._internal_act_param());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.in_area_.InternalSwap(&other->_impl_.in_area_);
  _impl_.control_point_.InternalSwap(&other->_impl_.control_point_);
  _impl_.curve_point_.InternalSwap(&other->_impl_.curve_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, _impl_.act_param_)
      + sizeof(Edge::_impl_.act_param_)
      - PROTOBUF_FIELD_OFFSET(Edge, _impl_.basic_)>(
          reinterpret_cast<char*>(&_impl_.basic_),
          reinterpret_cast<char*>(&other->_impl_.basic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[30]);
}

// ===================================================================

Area_ParamEntry_DoNotUse::Area_ParamEntry_DoNotUse() {}
Area_ParamEntry_DoNotUse::Area_ParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Area_ParamEntry_DoNotUse::MergeFrom(const Area_ParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Area_ParamEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[31]);
}

// ===================================================================

Area_AgvNumEntry_DoNotUse::Area_AgvNumEntry_DoNotUse() {}
Area_AgvNumEntry_DoNotUse::Area_AgvNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Area_AgvNumEntry_DoNotUse::MergeFrom(const Area_AgvNumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Area_AgvNumEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[32]);
}

// ===================================================================

class Area_Basic::_Internal {
 public:
};

Area_Basic::Area_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Area.Basic)
}
Area_Basic::Area_Basic(const Area_Basic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Area_Basic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:agv_map.Area.Basic)
}

inline void Area_Basic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Area_Basic::~Area_Basic() {
  // @@protoc_insertion_point(destructor:agv_map.Area.Basic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Area_Basic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
}

void Area_Basic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Area_Basic::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Area.Basic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Area_Basic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Area.Basic.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Area.Basic.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Area_Basic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Area.Basic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Area.Basic.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Area.Basic.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Area.Basic)
  return target;
}

size_t Area_Basic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Area.Basic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Area_Basic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Area_Basic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Area_Basic::GetClassData() const { return &_class_data_; }


void Area_Basic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Area_Basic*>(&to_msg);
  auto& from = static_cast<const Area_Basic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Area.Basic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Area_Basic::CopyFrom(const Area_Basic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Area.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area_Basic::IsInitialized() const {
  return true;
}

void Area_Basic::InternalSwap(Area_Basic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Area_Basic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[33]);
}

// ===================================================================

class Area::_Internal {
 public:
  static const ::agv_map::Area_Basic& basic(const Area* msg);
};

const ::agv_map::Area_Basic&
Area::_Internal::basic(const Area* msg) {
  return *msg->_impl_.basic_;
}
Area::Area(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Area::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Area)
}
Area::Area(const Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Area* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_)*/{}
    , decltype(_impl_.vertex_list_){from._impl_.vertex_list_}
    , decltype(_impl_.node_in_){from._impl_.node_in_}
    , /*decltype(_impl_._node_in_cached_byte_size_)*/{0}
    , /*decltype(_impl_.agv_num_)*/{}
    , decltype(_impl_.relate_area_){from._impl_.relate_area_}
    , /*decltype(_impl_._relate_area_cached_byte_size_)*/{0}
    , decltype(_impl_.basic_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  _this->_impl_.agv_num_.MergeFrom(from._impl_.agv_num_);
  if (from._internal_has_basic()) {
    _this->_impl_.basic_ = new ::agv_map::Area_Basic(*from._impl_.basic_);
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Area)
}

inline void Area::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.vertex_list_){arena}
    , decltype(_impl_.node_in_){arena}
    , /*decltype(_impl_._node_in_cached_byte_size_)*/{0}
    , /*decltype(_impl_.agv_num_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.relate_area_){arena}
    , /*decltype(_impl_._relate_area_cached_byte_size_)*/{0}
    , decltype(_impl_.basic_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Area::~Area() {
  // @@protoc_insertion_point(destructor:agv_map.Area)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Area::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.param_.Destruct();
  _impl_.param_.~MapField();
  _impl_.vertex_list_.~RepeatedPtrField();
  _impl_.node_in_.~RepeatedField();
  _impl_.agv_num_.Destruct();
  _impl_.agv_num_.~MapField();
  _impl_.relate_area_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.basic_;
}

void Area::ArenaDtor(void* object) {
  Area* _this = reinterpret_cast< Area* >(object);
  _this->_impl_.param_.Destruct();
  _this->_impl_.agv_num_.Destruct();
}
void Area::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Area::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Area)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_.Clear();
  _impl_.vertex_list_.Clear();
  _impl_.node_in_.Clear();
  _impl_.agv_num_.Clear();
  _impl_.relate_area_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.basic_ != nullptr) {
    delete _impl_.basic_;
  }
  _impl_.basic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Area::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .agv_map.Area.Basic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Coord vertex_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 node_in = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_node_in(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_node_in(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> agv_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.agv_num_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 relate_area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_relate_area(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_relate_area(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Area::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Area)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Area.Basic basic = 1;
  if (this->_internal_has_basic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::basic(this),
        _Internal::basic(this).GetCachedSize(), target, stream);
  }

  // map<string, string> param = 2;
  if (!this->_internal_param().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Area_ParamEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_param();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Area.ParamEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Area.ParamEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .agv_map.Coord vertex_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertex_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertex_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 node_in = 4;
  {
    int byte_size = _impl_._node_in_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_node_in(), byte_size, target);
    }
  }

  // map<string, string> agv_num = 5;
  if (!this->_internal_agv_num().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Area_AgvNumEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_agv_num();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Area.AgvNumEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Area.AgvNumEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated int32 relate_area = 6;
  {
    int byte_size = _impl_._relate_area_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_relate_area(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Area)
  return target;
}

size_t Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Area)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> param = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_param().begin();
      it != this->_internal_param().end(); ++it) {
    total_size += Area_ParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .agv_map.Coord vertex_list = 3;
  total_size += 1UL * this->_internal_vertex_list_size();
  for (const auto& msg : this->_impl_.vertex_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 node_in = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.node_in_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._node_in_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, string> agv_num = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agv_num_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_agv_num().begin();
      it != this->_internal_agv_num().end(); ++it) {
    total_size += Area_AgvNumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 relate_area = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.relate_area_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._relate_area_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .agv_map.Area.Basic basic = 1;
  if (this->_internal_has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basic_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Area::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Area::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Area::GetClassData() const { return &_class_data_; }


void Area::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Area*>(&to_msg);
  auto& from = static_cast<const Area&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Area)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  _this->_impl_.vertex_list_.MergeFrom(from._impl_.vertex_list_);
  _this->_impl_.node_in_.MergeFrom(from._impl_.node_in_);
  _this->_impl_.agv_num_.MergeFrom(from._impl_.agv_num_);
  _this->_impl_.relate_area_.MergeFrom(from._impl_.relate_area_);
  if (from._internal_has_basic()) {
    _this->_internal_mutable_basic()->::agv_map::Area_Basic::MergeFrom(
        from._internal_basic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Area::CopyFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area::IsInitialized() const {
  return true;
}

void Area::InternalSwap(Area* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_.InternalSwap(&other->_impl_.param_);
  _impl_.vertex_list_.InternalSwap(&other->_impl_.vertex_list_);
  _impl_.node_in_.InternalSwap(&other->_impl_.node_in_);
  _impl_.agv_num_.InternalSwap(&other->_impl_.agv_num_);
  _impl_.relate_area_.InternalSwap(&other->_impl_.relate_area_);
  swap(_impl_.basic_, other->_impl_.basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Area::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[34]);
}

// ===================================================================

class Coord::_Internal {
 public:
};

Coord::Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Coord)
}
Coord::Coord(const Coord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Coord)
}

inline void Coord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Coord::~Coord() {
  // @@protoc_insertion_point(destructor:agv_map.Coord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coord::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Coord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Coord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // sint32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Coord)
  return target;
}

size_t Coord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Coord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_x());
  }

  // sint32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coord::GetClassData() const { return &_class_data_; }


void Coord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coord*>(&to_msg);
  auto& from = static_cast<const Coord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Coord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coord::CopyFrom(const Coord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coord::IsInitialized() const {
  return true;
}

void Coord::InternalSwap(Coord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coord, _impl_.y_)
      + sizeof(Coord::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Coord, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[35]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.angle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angle_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.angle_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.angle_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:agv_map.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.angle_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // sint32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_y(), target);
  }

  // float angle = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_x());
  }

  // sint32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_y());
  }

  // float angle = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.angle_)
      + sizeof(Position::_impl_.angle_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[36]);
}

// ===================================================================

class Segment::_Internal {
 public:
  static const ::agv_map::Edge& edge_1(const Segment* msg);
  static const ::agv_map::Edge& edge_2(const Segment* msg);
};

const ::agv_map::Edge&
Segment::_Internal::edge_1(const Segment* msg) {
  return *msg->_impl_.edge_1_;
}
const ::agv_map::Edge&
Segment::_Internal::edge_2(const Segment* msg) {
  return *msg->_impl_.edge_2_;
}
Segment::Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Segment)
}
Segment::Segment(const Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Segment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_1_){nullptr}
    , decltype(_impl_.edge_2_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.dir_mode_){}
    , decltype(_impl_.lock_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_edge_1()) {
    _this->_impl_.edge_1_ = new ::agv_map::Edge(*from._impl_.edge_1_);
  }
  if (from._internal_has_edge_2()) {
    _this->_impl_.edge_2_ = new ::agv_map::Edge(*from._impl_.edge_2_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lock_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lock_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Segment)
}

inline void Segment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_1_){nullptr}
    , decltype(_impl_.edge_2_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.dir_mode_){0}
    , decltype(_impl_.lock_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:agv_map.Segment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.edge_1_;
  if (this != internal_default_instance()) delete _impl_.edge_2_;
}

void Segment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Segment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.edge_1_ != nullptr) {
    delete _impl_.edge_1_;
  }
  _impl_.edge_1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.edge_2_ != nullptr) {
    delete _impl_.edge_2_;
  }
  _impl_.edge_2_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lock_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 dir_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dir_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Edge edge_1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Edge edge_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Segment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Segment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // sint32 dir_mode = 3;
  if (this->_internal_dir_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_dir_mode(), target);
  }

  // int32 lock = 4;
  if (this->_internal_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_lock(), target);
  }

  // .agv_map.Edge edge_1 = 5;
  if (this->_internal_has_edge_1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::edge_1(this),
        _Internal::edge_1(this).GetCachedSize(), target, stream);
  }

  // .agv_map.Edge edge_2 = 6;
  if (this->_internal_has_edge_2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::edge_2(this),
        _Internal::edge_2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Segment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agv_map.Edge edge_1 = 5;
  if (this->_internal_has_edge_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.edge_1_);
  }

  // .agv_map.Edge edge_2 = 6;
  if (this->_internal_has_edge_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.edge_2_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // sint32 dir_mode = 3;
  if (this->_internal_dir_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_dir_mode());
  }

  // int32 lock = 4;
  if (this->_internal_lock() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lock());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Segment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Segment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Segment::GetClassData() const { return &_class_data_; }


void Segment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Segment*>(&to_msg);
  auto& from = static_cast<const Segment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Segment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_edge_1()) {
    _this->_internal_mutable_edge_1()->::agv_map::Edge::MergeFrom(
        from._internal_edge_1());
  }
  if (from._internal_has_edge_2()) {
    _this->_internal_mutable_edge_2()->::agv_map::Edge::MergeFrom(
        from._internal_edge_2());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_dir_mode() != 0) {
    _this->_internal_set_dir_mode(from._internal_dir_mode());
  }
  if (from._internal_lock() != 0) {
    _this->_internal_set_lock(from._internal_lock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::InternalSwap(Segment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segment, _impl_.lock_)
      + sizeof(Segment::_impl_.lock_)
      - PROTOBUF_FIELD_OFFSET(Segment, _impl_.edge_1_)>(
          reinterpret_cast<char*>(&_impl_.edge_1_),
          reinterpret_cast<char*>(&other->_impl_.edge_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[37]);
}

// ===================================================================

Describe_AgvDescEntry_DoNotUse::Describe_AgvDescEntry_DoNotUse() {}
Describe_AgvDescEntry_DoNotUse::Describe_AgvDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_AgvDescEntry_DoNotUse::MergeFrom(const Describe_AgvDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_AgvDescEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[38]);
}

// ===================================================================

Describe_CtlDescEntry_DoNotUse::Describe_CtlDescEntry_DoNotUse() {}
Describe_CtlDescEntry_DoNotUse::Describe_CtlDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_CtlDescEntry_DoNotUse::MergeFrom(const Describe_CtlDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_CtlDescEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[39]);
}

// ===================================================================

Describe_AvoDescEntry_DoNotUse::Describe_AvoDescEntry_DoNotUse() {}
Describe_AvoDescEntry_DoNotUse::Describe_AvoDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_AvoDescEntry_DoNotUse::MergeFrom(const Describe_AvoDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_AvoDescEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[40]);
}

// ===================================================================

Describe_RutDescEntry_DoNotUse::Describe_RutDescEntry_DoNotUse() {}
Describe_RutDescEntry_DoNotUse::Describe_RutDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_RutDescEntry_DoNotUse::MergeFrom(const Describe_RutDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_RutDescEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[41]);
}

// ===================================================================

Describe_ActionDescEntry_DoNotUse::Describe_ActionDescEntry_DoNotUse() {}
Describe_ActionDescEntry_DoNotUse::Describe_ActionDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_ActionDescEntry_DoNotUse::MergeFrom(const Describe_ActionDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_ActionDescEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[42]);
}

// ===================================================================

Describe_AreaDescEntry_DoNotUse::Describe_AreaDescEntry_DoNotUse() {}
Describe_AreaDescEntry_DoNotUse::Describe_AreaDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_AreaDescEntry_DoNotUse::MergeFrom(const Describe_AreaDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_AreaDescEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[43]);
}

// ===================================================================

Describe_ParamTmplEntry_DoNotUse::Describe_ParamTmplEntry_DoNotUse() {}
Describe_ParamTmplEntry_DoNotUse::Describe_ParamTmplEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_ParamTmplEntry_DoNotUse::MergeFrom(const Describe_ParamTmplEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_ParamTmplEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[44]);
}

// ===================================================================

Describe_ActionTmplEntry_DoNotUse::Describe_ActionTmplEntry_DoNotUse() {}
Describe_ActionTmplEntry_DoNotUse::Describe_ActionTmplEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_ActionTmplEntry_DoNotUse::MergeFrom(const Describe_ActionTmplEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_ActionTmplEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[45]);
}

// ===================================================================

Describe_TaskActionTmplEntry_DoNotUse::Describe_TaskActionTmplEntry_DoNotUse() {}
Describe_TaskActionTmplEntry_DoNotUse::Describe_TaskActionTmplEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_TaskActionTmplEntry_DoNotUse::MergeFrom(const Describe_TaskActionTmplEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_TaskActionTmplEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[46]);
}

// ===================================================================

Describe_ParamTmpl_DataEntry_DoNotUse::Describe_ParamTmpl_DataEntry_DoNotUse() {}
Describe_ParamTmpl_DataEntry_DoNotUse::Describe_ParamTmpl_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_ParamTmpl_DataEntry_DoNotUse::MergeFrom(const Describe_ParamTmpl_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_ParamTmpl_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[47]);
}

// ===================================================================

Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse() {}
Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse::MergeFrom(const Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[48]);
}

// ===================================================================

Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse() {}
Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse::MergeFrom(const Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[49]);
}

// ===================================================================

class Describe_ParamTmpl_paramTmplInstance::_Internal {
 public:
};

Describe_ParamTmpl_paramTmplInstance::Describe_ParamTmpl_paramTmplInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Describe_ParamTmpl_paramTmplInstance::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.ParamTmpl.paramTmplInstance)
}
Describe_ParamTmpl_paramTmplInstance::Describe_ParamTmpl_paramTmplInstance(const Describe_ParamTmpl_paramTmplInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_ParamTmpl_paramTmplInstance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_)*/{}
    , decltype(_impl_.describe_){}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_describe().empty()) {
    _this->_impl_.describe_.Set(from._internal_describe(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.ParamTmpl.paramTmplInstance)
}

inline void Describe_ParamTmpl_paramTmplInstance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.describe_){}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_ParamTmpl_paramTmplInstance::~Describe_ParamTmpl_paramTmplInstance() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.ParamTmpl.paramTmplInstance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Describe_ParamTmpl_paramTmplInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.param_.Destruct();
  _impl_.param_.~MapField();
  _impl_.describe_.Destroy();
  _impl_.key_.Destroy();
}

void Describe_ParamTmpl_paramTmplInstance::ArenaDtor(void* object) {
  Describe_ParamTmpl_paramTmplInstance* _this = reinterpret_cast< Describe_ParamTmpl_paramTmplInstance* >(object);
  _this->_impl_.param_.Destruct();
}
void Describe_ParamTmpl_paramTmplInstance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_ParamTmpl_paramTmplInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.ParamTmpl.paramTmplInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_.Clear();
  _impl_.describe_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_ParamTmpl_paramTmplInstance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string describe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_describe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.ParamTmpl.paramTmplInstance.describe"));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.ParamTmpl.paramTmplInstance.key"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_ParamTmpl_paramTmplInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.ParamTmpl.paramTmplInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_describe().data(), static_cast<int>(this->_internal_describe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.ParamTmpl.paramTmplInstance.describe");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_describe(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.ParamTmpl.paramTmplInstance.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // map<string, string> param = 3;
  if (!this->_internal_param().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_param();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.ParamTmpl.paramTmplInstance.ParamEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.ParamTmpl.paramTmplInstance.ParamEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.ParamTmpl.paramTmplInstance)
  return target;
}

size_t Describe_ParamTmpl_paramTmplInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.ParamTmpl.paramTmplInstance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> param = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_param().begin();
      it != this->_internal_param().end(); ++it) {
    total_size += Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_describe());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_ParamTmpl_paramTmplInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_ParamTmpl_paramTmplInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_ParamTmpl_paramTmplInstance::GetClassData() const { return &_class_data_; }


void Describe_ParamTmpl_paramTmplInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_ParamTmpl_paramTmplInstance*>(&to_msg);
  auto& from = static_cast<const Describe_ParamTmpl_paramTmplInstance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.ParamTmpl.paramTmplInstance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  if (!from._internal_describe().empty()) {
    _this->_internal_set_describe(from._internal_describe());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_ParamTmpl_paramTmplInstance::CopyFrom(const Describe_ParamTmpl_paramTmplInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.ParamTmpl.paramTmplInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_ParamTmpl_paramTmplInstance::IsInitialized() const {
  return true;
}

void Describe_ParamTmpl_paramTmplInstance::InternalSwap(Describe_ParamTmpl_paramTmplInstance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_.InternalSwap(&other->_impl_.param_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.describe_, lhs_arena,
      &other->_impl_.describe_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_ParamTmpl_paramTmplInstance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[50]);
}

// ===================================================================

class Describe_ParamTmpl::_Internal {
 public:
};

Describe_ParamTmpl::Describe_ParamTmpl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Describe_ParamTmpl::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.ParamTmpl)
}
Describe_ParamTmpl::Describe_ParamTmpl(const Describe_ParamTmpl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_ParamTmpl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{}
    , /*decltype(_impl_.param_instance_list_)*/{}
    , decltype(_impl_.desc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.param_instance_list_.MergeFrom(from._impl_.param_instance_list_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.ParamTmpl)
}

inline void Describe_ParamTmpl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.param_instance_list_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.desc_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_ParamTmpl::~Describe_ParamTmpl() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.ParamTmpl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Describe_ParamTmpl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destruct();
  _impl_.data_.~MapField();
  _impl_.param_instance_list_.Destruct();
  _impl_.param_instance_list_.~MapField();
  _impl_.desc_.Destroy();
}

void Describe_ParamTmpl::ArenaDtor(void* object) {
  Describe_ParamTmpl* _this = reinterpret_cast< Describe_ParamTmpl* >(object);
  _this->_impl_.data_.Destruct();
  _this->_impl_.param_instance_list_.Destruct();
}
void Describe_ParamTmpl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_ParamTmpl::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.ParamTmpl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.param_instance_list_.Clear();
  _impl_.desc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_ParamTmpl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.ParamTmpl.desc"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Describe.ParamTmpl.paramTmplInstance> param_instance_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.param_instance_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_ParamTmpl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.ParamTmpl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string desc = 1;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.ParamTmpl.desc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_desc(), target);
  }

  // map<string, string> data = 2;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Describe_ParamTmpl_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.ParamTmpl.DataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.ParamTmpl.DataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .agv_map.Describe.ParamTmpl.paramTmplInstance> param_instance_list = 3;
  if (!this->_internal_param_instance_list().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance>;
    using WireHelper = Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_param_instance_list();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.ParamTmpl.ParamInstanceListEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.ParamTmpl)
  return target;
}

size_t Describe_ParamTmpl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.ParamTmpl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += Describe_ParamTmpl_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .agv_map.Describe.ParamTmpl.paramTmplInstance> param_instance_list = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_instance_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >::const_iterator
      it = this->_internal_param_instance_list().begin();
      it != this->_internal_param_instance_list().end(); ++it) {
    total_size += Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string desc = 1;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_ParamTmpl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_ParamTmpl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_ParamTmpl::GetClassData() const { return &_class_data_; }


void Describe_ParamTmpl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_ParamTmpl*>(&to_msg);
  auto& from = static_cast<const Describe_ParamTmpl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.ParamTmpl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.param_instance_list_.MergeFrom(from._impl_.param_instance_list_);
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_ParamTmpl::CopyFrom(const Describe_ParamTmpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.ParamTmpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_ParamTmpl::IsInitialized() const {
  return true;
}

void Describe_ParamTmpl::InternalSwap(Describe_ParamTmpl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.param_instance_list_.InternalSwap(&other->_impl_.param_instance_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_ParamTmpl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[51]);
}

// ===================================================================

Describe_actionTmpl_ActInstanceListEntry_DoNotUse::Describe_actionTmpl_ActInstanceListEntry_DoNotUse() {}
Describe_actionTmpl_ActInstanceListEntry_DoNotUse::Describe_actionTmpl_ActInstanceListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_actionTmpl_ActInstanceListEntry_DoNotUse::MergeFrom(const Describe_actionTmpl_ActInstanceListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_actionTmpl_ActInstanceListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[52]);
}

// ===================================================================

class Describe_actionTmpl_action::_Internal {
 public:
};

Describe_actionTmpl_action::Describe_actionTmpl_action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.actionTmpl.action)
}
Describe_actionTmpl_action::Describe_actionTmpl_action(const Describe_actionTmpl_action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_actionTmpl_action* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.block_type_){}
    , decltype(_impl_.param_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_type().empty()) {
    _this->_impl_.block_type_.Set(from._internal_block_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_param().empty()) {
    _this->_impl_.param_.Set(from._internal_param(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.actionTmpl.action)
}

inline void Describe_actionTmpl_action::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.block_type_){}
    , decltype(_impl_.param_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_actionTmpl_action::~Describe_actionTmpl_action() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.actionTmpl.action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Describe_actionTmpl_action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.block_type_.Destroy();
  _impl_.param_.Destroy();
}

void Describe_actionTmpl_action::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_actionTmpl_action::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.actionTmpl.action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.block_type_.ClearToEmpty();
  _impl_.param_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_actionTmpl_action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.actionTmpl.action.name"));
        } else
          goto handle_unusual;
        continue;
      // string block_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_block_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.actionTmpl.action.block_type"));
        } else
          goto handle_unusual;
        continue;
      // string param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_param();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.actionTmpl.action.param"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_actionTmpl_action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.actionTmpl.action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.actionTmpl.action.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string block_type = 2;
  if (!this->_internal_block_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_type().data(), static_cast<int>(this->_internal_block_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.actionTmpl.action.block_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_block_type(), target);
  }

  // string param = 3;
  if (!this->_internal_param().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param().data(), static_cast<int>(this->_internal_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.actionTmpl.action.param");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.actionTmpl.action)
  return target;
}

size_t Describe_actionTmpl_action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.actionTmpl.action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string block_type = 2;
  if (!this->_internal_block_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_type());
  }

  // string param = 3;
  if (!this->_internal_param().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_actionTmpl_action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_actionTmpl_action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_actionTmpl_action::GetClassData() const { return &_class_data_; }


void Describe_actionTmpl_action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_actionTmpl_action*>(&to_msg);
  auto& from = static_cast<const Describe_actionTmpl_action&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.actionTmpl.action)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_block_type().empty()) {
    _this->_internal_set_block_type(from._internal_block_type());
  }
  if (!from._internal_param().empty()) {
    _this->_internal_set_param(from._internal_param());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_actionTmpl_action::CopyFrom(const Describe_actionTmpl_action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.actionTmpl.action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_actionTmpl_action::IsInitialized() const {
  return true;
}

void Describe_actionTmpl_action::InternalSwap(Describe_actionTmpl_action* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_type_, lhs_arena,
      &other->_impl_.block_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param_, lhs_arena,
      &other->_impl_.param_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_actionTmpl_action::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[53]);
}

// ===================================================================

class Describe_actionTmpl_actTmplInstance::_Internal {
 public:
};

Describe_actionTmpl_actTmplInstance::Describe_actionTmpl_actTmplInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.actionTmpl.actTmplInstance)
}
Describe_actionTmpl_actTmplInstance::Describe_actionTmpl_actTmplInstance(const Describe_actionTmpl_actTmplInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_actionTmpl_actTmplInstance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.act_list_){from._impl_.act_list_}
    , decltype(_impl_.describe_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_describe().empty()) {
    _this->_impl_.describe_.Set(from._internal_describe(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.actionTmpl.actTmplInstance)
}

inline void Describe_actionTmpl_actTmplInstance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.act_list_){arena}
    , decltype(_impl_.describe_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_actionTmpl_actTmplInstance::~Describe_actionTmpl_actTmplInstance() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.actionTmpl.actTmplInstance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Describe_actionTmpl_actTmplInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.act_list_.~RepeatedPtrField();
  _impl_.describe_.Destroy();
}

void Describe_actionTmpl_actTmplInstance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_actionTmpl_actTmplInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.actionTmpl.actTmplInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.act_list_.Clear();
  _impl_.describe_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_actionTmpl_actTmplInstance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string describe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_describe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.actionTmpl.actTmplInstance.describe"));
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Describe.actionTmpl.action act_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_act_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_actionTmpl_actTmplInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.actionTmpl.actTmplInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_describe().data(), static_cast<int>(this->_internal_describe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.actionTmpl.actTmplInstance.describe");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_describe(), target);
  }

  // repeated .agv_map.Describe.actionTmpl.action act_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_act_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_act_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.actionTmpl.actTmplInstance)
  return target;
}

size_t Describe_actionTmpl_actTmplInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.actionTmpl.actTmplInstance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Describe.actionTmpl.action act_list = 2;
  total_size += 1UL * this->_internal_act_list_size();
  for (const auto& msg : this->_impl_.act_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_describe());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_actionTmpl_actTmplInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_actionTmpl_actTmplInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_actionTmpl_actTmplInstance::GetClassData() const { return &_class_data_; }


void Describe_actionTmpl_actTmplInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_actionTmpl_actTmplInstance*>(&to_msg);
  auto& from = static_cast<const Describe_actionTmpl_actTmplInstance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.actionTmpl.actTmplInstance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.act_list_.MergeFrom(from._impl_.act_list_);
  if (!from._internal_describe().empty()) {
    _this->_internal_set_describe(from._internal_describe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_actionTmpl_actTmplInstance::CopyFrom(const Describe_actionTmpl_actTmplInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.actionTmpl.actTmplInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_actionTmpl_actTmplInstance::IsInitialized() const {
  return true;
}

void Describe_actionTmpl_actTmplInstance::InternalSwap(Describe_actionTmpl_actTmplInstance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.act_list_.InternalSwap(&other->_impl_.act_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.describe_, lhs_arena,
      &other->_impl_.describe_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_actionTmpl_actTmplInstance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[54]);
}

// ===================================================================

class Describe_actionTmpl::_Internal {
 public:
};

Describe_actionTmpl::Describe_actionTmpl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Describe_actionTmpl::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.actionTmpl)
}
Describe_actionTmpl::Describe_actionTmpl(const Describe_actionTmpl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_actionTmpl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_.act_instance_list_)*/{}
    , decltype(_impl_.descibe_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.act_instance_list_.MergeFrom(from._impl_.act_instance_list_);
  _impl_.descibe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descibe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_descibe().empty()) {
    _this->_impl_.descibe_.Set(from._internal_descibe(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.actionTmpl)
}

inline void Describe_actionTmpl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_.act_instance_list_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.descibe_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.descibe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descibe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_actionTmpl::~Describe_actionTmpl() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.actionTmpl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Describe_actionTmpl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.act_instance_list_.Destruct();
  _impl_.act_instance_list_.~MapField();
  _impl_.descibe_.Destroy();
}

void Describe_actionTmpl::ArenaDtor(void* object) {
  Describe_actionTmpl* _this = reinterpret_cast< Describe_actionTmpl* >(object);
  _this->_impl_.act_instance_list_.Destruct();
}
void Describe_actionTmpl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_actionTmpl::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.actionTmpl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.act_instance_list_.Clear();
  _impl_.descibe_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_actionTmpl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string descibe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_descibe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.actionTmpl.descibe"));
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Describe.actionTmpl.action data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Describe.actionTmpl.actTmplInstance> act_instance_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.act_instance_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_actionTmpl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.actionTmpl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string descibe = 1;
  if (!this->_internal_descibe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descibe().data(), static_cast<int>(this->_internal_descibe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.actionTmpl.descibe");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_descibe(), target);
  }

  // repeated .agv_map.Describe.actionTmpl.action data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .agv_map.Describe.actionTmpl.actTmplInstance> act_instance_list = 3;
  if (!this->_internal_act_instance_list().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Describe_actionTmpl_actTmplInstance>;
    using WireHelper = Describe_actionTmpl_ActInstanceListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_act_instance_list();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.actionTmpl.ActInstanceListEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.actionTmpl)
  return target;
}

size_t Describe_actionTmpl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.actionTmpl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Describe.actionTmpl.action data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .agv_map.Describe.actionTmpl.actTmplInstance> act_instance_list = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_act_instance_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >::const_iterator
      it = this->_internal_act_instance_list().begin();
      it != this->_internal_act_instance_list().end(); ++it) {
    total_size += Describe_actionTmpl_ActInstanceListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string descibe = 1;
  if (!this->_internal_descibe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descibe());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_actionTmpl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_actionTmpl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_actionTmpl::GetClassData() const { return &_class_data_; }


void Describe_actionTmpl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_actionTmpl*>(&to_msg);
  auto& from = static_cast<const Describe_actionTmpl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.actionTmpl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.act_instance_list_.MergeFrom(from._impl_.act_instance_list_);
  if (!from._internal_descibe().empty()) {
    _this->_internal_set_descibe(from._internal_descibe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_actionTmpl::CopyFrom(const Describe_actionTmpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.actionTmpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_actionTmpl::IsInitialized() const {
  return true;
}

void Describe_actionTmpl::InternalSwap(Describe_actionTmpl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.act_instance_list_.InternalSwap(&other->_impl_.act_instance_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.descibe_, lhs_arena,
      &other->_impl_.descibe_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_actionTmpl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[55]);
}

// ===================================================================

Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse() {}
Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse::MergeFrom(const Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[56]);
}

// ===================================================================

class Describe_taskActionTmpl_action::_Internal {
 public:
};

Describe_taskActionTmpl_action::Describe_taskActionTmpl_action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.taskActionTmpl.action)
}
Describe_taskActionTmpl_action::Describe_taskActionTmpl_action(const Describe_taskActionTmpl_action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_taskActionTmpl_action* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_type_){}
    , decltype(_impl_.action_name_){}
    , decltype(_impl_.block_type_){}
    , decltype(_impl_.param_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action_type().empty()) {
    _this->_impl_.action_type_.Set(from._internal_action_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action_name().empty()) {
    _this->_impl_.action_name_.Set(from._internal_action_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_type().empty()) {
    _this->_impl_.block_type_.Set(from._internal_block_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_param().empty()) {
    _this->_impl_.param_.Set(from._internal_param(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.taskActionTmpl.action)
}

inline void Describe_taskActionTmpl_action::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_type_){}
    , decltype(_impl_.action_name_){}
    , decltype(_impl_.block_type_){}
    , decltype(_impl_.param_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_taskActionTmpl_action::~Describe_taskActionTmpl_action() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.taskActionTmpl.action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Describe_taskActionTmpl_action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_type_.Destroy();
  _impl_.action_name_.Destroy();
  _impl_.block_type_.Destroy();
  _impl_.param_.Destroy();
}

void Describe_taskActionTmpl_action::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_taskActionTmpl_action::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.taskActionTmpl.action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_type_.ClearToEmpty();
  _impl_.action_name_.ClearToEmpty();
  _impl_.block_type_.ClearToEmpty();
  _impl_.param_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_taskActionTmpl_action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.action.action_type"));
        } else
          goto handle_unusual;
        continue;
      // string action_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_action_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.action.action_name"));
        } else
          goto handle_unusual;
        continue;
      // string block_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_block_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.action.block_type"));
        } else
          goto handle_unusual;
        continue;
      // string param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_param();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.action.param"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_taskActionTmpl_action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.taskActionTmpl.action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string action_type = 1;
  if (!this->_internal_action_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_type().data(), static_cast<int>(this->_internal_action_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.action.action_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action_type(), target);
  }

  // string action_name = 2;
  if (!this->_internal_action_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_name().data(), static_cast<int>(this->_internal_action_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.action.action_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action_name(), target);
  }

  // string block_type = 3;
  if (!this->_internal_block_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_type().data(), static_cast<int>(this->_internal_block_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.action.block_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_block_type(), target);
  }

  // string param = 4;
  if (!this->_internal_param().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param().data(), static_cast<int>(this->_internal_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.action.param");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.taskActionTmpl.action)
  return target;
}

size_t Describe_taskActionTmpl_action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.taskActionTmpl.action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_type = 1;
  if (!this->_internal_action_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_type());
  }

  // string action_name = 2;
  if (!this->_internal_action_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_name());
  }

  // string block_type = 3;
  if (!this->_internal_block_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_type());
  }

  // string param = 4;
  if (!this->_internal_param().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_taskActionTmpl_action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_taskActionTmpl_action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_taskActionTmpl_action::GetClassData() const { return &_class_data_; }


void Describe_taskActionTmpl_action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_taskActionTmpl_action*>(&to_msg);
  auto& from = static_cast<const Describe_taskActionTmpl_action&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.taskActionTmpl.action)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action_type().empty()) {
    _this->_internal_set_action_type(from._internal_action_type());
  }
  if (!from._internal_action_name().empty()) {
    _this->_internal_set_action_name(from._internal_action_name());
  }
  if (!from._internal_block_type().empty()) {
    _this->_internal_set_block_type(from._internal_block_type());
  }
  if (!from._internal_param().empty()) {
    _this->_internal_set_param(from._internal_param());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_taskActionTmpl_action::CopyFrom(const Describe_taskActionTmpl_action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.taskActionTmpl.action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_taskActionTmpl_action::IsInitialized() const {
  return true;
}

void Describe_taskActionTmpl_action::InternalSwap(Describe_taskActionTmpl_action* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_type_, lhs_arena,
      &other->_impl_.action_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_name_, lhs_arena,
      &other->_impl_.action_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_type_, lhs_arena,
      &other->_impl_.block_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param_, lhs_arena,
      &other->_impl_.param_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_taskActionTmpl_action::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[57]);
}

// ===================================================================

class Describe_taskActionTmpl_actTmplInstance::_Internal {
 public:
};

Describe_taskActionTmpl_actTmplInstance::Describe_taskActionTmpl_actTmplInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.taskActionTmpl.actTmplInstance)
}
Describe_taskActionTmpl_actTmplInstance::Describe_taskActionTmpl_actTmplInstance(const Describe_taskActionTmpl_actTmplInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_taskActionTmpl_actTmplInstance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.act_list_){from._impl_.act_list_}
    , decltype(_impl_.describe_){}
    , decltype(_impl_.stype_value_){}
    , decltype(_impl_.gtype_value_){}
    , decltype(_impl_.agv_type_value_){}
    , decltype(_impl_.layer_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_describe().empty()) {
    _this->_impl_.describe_.Set(from._internal_describe(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stype_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stype_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stype_value().empty()) {
    _this->_impl_.stype_value_.Set(from._internal_stype_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gtype_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gtype_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gtype_value().empty()) {
    _this->_impl_.gtype_value_.Set(from._internal_gtype_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agv_type_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agv_type_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agv_type_value().empty()) {
    _this->_impl_.agv_type_value_.Set(from._internal_agv_type_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.layer_value_ = from._impl_.layer_value_;
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.taskActionTmpl.actTmplInstance)
}

inline void Describe_taskActionTmpl_actTmplInstance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.act_list_){arena}
    , decltype(_impl_.describe_){}
    , decltype(_impl_.stype_value_){}
    , decltype(_impl_.gtype_value_){}
    , decltype(_impl_.agv_type_value_){}
    , decltype(_impl_.layer_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stype_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stype_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gtype_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gtype_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agv_type_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agv_type_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_taskActionTmpl_actTmplInstance::~Describe_taskActionTmpl_actTmplInstance() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.taskActionTmpl.actTmplInstance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Describe_taskActionTmpl_actTmplInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.act_list_.~RepeatedPtrField();
  _impl_.describe_.Destroy();
  _impl_.stype_value_.Destroy();
  _impl_.gtype_value_.Destroy();
  _impl_.agv_type_value_.Destroy();
}

void Describe_taskActionTmpl_actTmplInstance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_taskActionTmpl_actTmplInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.taskActionTmpl.actTmplInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.act_list_.Clear();
  _impl_.describe_.ClearToEmpty();
  _impl_.stype_value_.ClearToEmpty();
  _impl_.gtype_value_.ClearToEmpty();
  _impl_.agv_type_value_.ClearToEmpty();
  _impl_.layer_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_taskActionTmpl_actTmplInstance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string describe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_describe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.actTmplInstance.describe"));
        } else
          goto handle_unusual;
        continue;
      // string stype_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stype_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.actTmplInstance.stype_value"));
        } else
          goto handle_unusual;
        continue;
      // string gtype_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gtype_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.actTmplInstance.gtype_value"));
        } else
          goto handle_unusual;
        continue;
      // string agv_type_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_agv_type_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.actTmplInstance.agv_type_value"));
        } else
          goto handle_unusual;
        continue;
      // int32 layer_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.layer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Describe.taskActionTmpl.action act_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_act_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_taskActionTmpl_actTmplInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.taskActionTmpl.actTmplInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_describe().data(), static_cast<int>(this->_internal_describe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.actTmplInstance.describe");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_describe(), target);
  }

  // string stype_value = 2;
  if (!this->_internal_stype_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stype_value().data(), static_cast<int>(this->_internal_stype_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.actTmplInstance.stype_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stype_value(), target);
  }

  // string gtype_value = 3;
  if (!this->_internal_gtype_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gtype_value().data(), static_cast<int>(this->_internal_gtype_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.actTmplInstance.gtype_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gtype_value(), target);
  }

  // string agv_type_value = 4;
  if (!this->_internal_agv_type_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agv_type_value().data(), static_cast<int>(this->_internal_agv_type_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.actTmplInstance.agv_type_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_agv_type_value(), target);
  }

  // int32 layer_value = 5;
  if (this->_internal_layer_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_layer_value(), target);
  }

  // repeated .agv_map.Describe.taskActionTmpl.action act_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_act_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_act_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.taskActionTmpl.actTmplInstance)
  return target;
}

size_t Describe_taskActionTmpl_actTmplInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.taskActionTmpl.actTmplInstance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Describe.taskActionTmpl.action act_list = 6;
  total_size += 1UL * this->_internal_act_list_size();
  for (const auto& msg : this->_impl_.act_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_describe());
  }

  // string stype_value = 2;
  if (!this->_internal_stype_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stype_value());
  }

  // string gtype_value = 3;
  if (!this->_internal_gtype_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gtype_value());
  }

  // string agv_type_value = 4;
  if (!this->_internal_agv_type_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agv_type_value());
  }

  // int32 layer_value = 5;
  if (this->_internal_layer_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layer_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_taskActionTmpl_actTmplInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_taskActionTmpl_actTmplInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_taskActionTmpl_actTmplInstance::GetClassData() const { return &_class_data_; }


void Describe_taskActionTmpl_actTmplInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_taskActionTmpl_actTmplInstance*>(&to_msg);
  auto& from = static_cast<const Describe_taskActionTmpl_actTmplInstance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.taskActionTmpl.actTmplInstance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.act_list_.MergeFrom(from._impl_.act_list_);
  if (!from._internal_describe().empty()) {
    _this->_internal_set_describe(from._internal_describe());
  }
  if (!from._internal_stype_value().empty()) {
    _this->_internal_set_stype_value(from._internal_stype_value());
  }
  if (!from._internal_gtype_value().empty()) {
    _this->_internal_set_gtype_value(from._internal_gtype_value());
  }
  if (!from._internal_agv_type_value().empty()) {
    _this->_internal_set_agv_type_value(from._internal_agv_type_value());
  }
  if (from._internal_layer_value() != 0) {
    _this->_internal_set_layer_value(from._internal_layer_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_taskActionTmpl_actTmplInstance::CopyFrom(const Describe_taskActionTmpl_actTmplInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.taskActionTmpl.actTmplInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_taskActionTmpl_actTmplInstance::IsInitialized() const {
  return true;
}

void Describe_taskActionTmpl_actTmplInstance::InternalSwap(Describe_taskActionTmpl_actTmplInstance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.act_list_.InternalSwap(&other->_impl_.act_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.describe_, lhs_arena,
      &other->_impl_.describe_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stype_value_, lhs_arena,
      &other->_impl_.stype_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gtype_value_, lhs_arena,
      &other->_impl_.gtype_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agv_type_value_, lhs_arena,
      &other->_impl_.agv_type_value_, rhs_arena
  );
  swap(_impl_.layer_value_, other->_impl_.layer_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_taskActionTmpl_actTmplInstance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[58]);
}

// ===================================================================

class Describe_taskActionTmpl::_Internal {
 public:
};

Describe_taskActionTmpl::Describe_taskActionTmpl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Describe_taskActionTmpl::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.taskActionTmpl)
}
Describe_taskActionTmpl::Describe_taskActionTmpl(const Describe_taskActionTmpl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_taskActionTmpl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_.act_instance_list_)*/{}
    , decltype(_impl_.descibe_){}
    , decltype(_impl_.stype_){}
    , decltype(_impl_.gtype_){}
    , decltype(_impl_.agv_type_){}
    , decltype(_impl_.layer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.act_instance_list_.MergeFrom(from._impl_.act_instance_list_);
  _impl_.descibe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descibe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_descibe().empty()) {
    _this->_impl_.descibe_.Set(from._internal_descibe(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stype().empty()) {
    _this->_impl_.stype_.Set(from._internal_stype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gtype().empty()) {
    _this->_impl_.gtype_.Set(from._internal_gtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agv_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agv_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agv_type().empty()) {
    _this->_impl_.agv_type_.Set(from._internal_agv_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.layer_ = from._impl_.layer_;
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.taskActionTmpl)
}

inline void Describe_taskActionTmpl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_.act_instance_list_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.descibe_){}
    , decltype(_impl_.stype_){}
    , decltype(_impl_.gtype_){}
    , decltype(_impl_.agv_type_){}
    , decltype(_impl_.layer_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.descibe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descibe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agv_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agv_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_taskActionTmpl::~Describe_taskActionTmpl() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.taskActionTmpl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Describe_taskActionTmpl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.act_instance_list_.Destruct();
  _impl_.act_instance_list_.~MapField();
  _impl_.descibe_.Destroy();
  _impl_.stype_.Destroy();
  _impl_.gtype_.Destroy();
  _impl_.agv_type_.Destroy();
}

void Describe_taskActionTmpl::ArenaDtor(void* object) {
  Describe_taskActionTmpl* _this = reinterpret_cast< Describe_taskActionTmpl* >(object);
  _this->_impl_.act_instance_list_.Destruct();
}
void Describe_taskActionTmpl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_taskActionTmpl::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.taskActionTmpl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.act_instance_list_.Clear();
  _impl_.descibe_.ClearToEmpty();
  _impl_.stype_.ClearToEmpty();
  _impl_.gtype_.ClearToEmpty();
  _impl_.agv_type_.ClearToEmpty();
  _impl_.layer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_taskActionTmpl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string descibe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_descibe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.descibe"));
        } else
          goto handle_unusual;
        continue;
      // string stype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.stype"));
        } else
          goto handle_unusual;
        continue;
      // string gtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.gtype"));
        } else
          goto handle_unusual;
        continue;
      // string agv_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_agv_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.taskActionTmpl.agv_type"));
        } else
          goto handle_unusual;
        continue;
      // int32 layer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Describe.taskActionTmpl.action data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Describe.taskActionTmpl.actTmplInstance> act_instance_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.act_instance_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_taskActionTmpl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.taskActionTmpl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string descibe = 1;
  if (!this->_internal_descibe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descibe().data(), static_cast<int>(this->_internal_descibe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.descibe");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_descibe(), target);
  }

  // string stype = 2;
  if (!this->_internal_stype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stype().data(), static_cast<int>(this->_internal_stype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.stype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stype(), target);
  }

  // string gtype = 3;
  if (!this->_internal_gtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gtype().data(), static_cast<int>(this->_internal_gtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.gtype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gtype(), target);
  }

  // string agv_type = 4;
  if (!this->_internal_agv_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agv_type().data(), static_cast<int>(this->_internal_agv_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.taskActionTmpl.agv_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_agv_type(), target);
  }

  // int32 layer = 5;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_layer(), target);
  }

  // repeated .agv_map.Describe.taskActionTmpl.action data = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .agv_map.Describe.taskActionTmpl.actTmplInstance> act_instance_list = 7;
  if (!this->_internal_act_instance_list().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance>;
    using WireHelper = Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_act_instance_list();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.taskActionTmpl.ActInstanceListEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.taskActionTmpl)
  return target;
}

size_t Describe_taskActionTmpl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.taskActionTmpl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Describe.taskActionTmpl.action data = 6;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .agv_map.Describe.taskActionTmpl.actTmplInstance> act_instance_list = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_act_instance_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >::const_iterator
      it = this->_internal_act_instance_list().begin();
      it != this->_internal_act_instance_list().end(); ++it) {
    total_size += Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string descibe = 1;
  if (!this->_internal_descibe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descibe());
  }

  // string stype = 2;
  if (!this->_internal_stype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stype());
  }

  // string gtype = 3;
  if (!this->_internal_gtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gtype());
  }

  // string agv_type = 4;
  if (!this->_internal_agv_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agv_type());
  }

  // int32 layer = 5;
  if (this->_internal_layer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_taskActionTmpl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_taskActionTmpl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_taskActionTmpl::GetClassData() const { return &_class_data_; }


void Describe_taskActionTmpl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_taskActionTmpl*>(&to_msg);
  auto& from = static_cast<const Describe_taskActionTmpl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.taskActionTmpl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.act_instance_list_.MergeFrom(from._impl_.act_instance_list_);
  if (!from._internal_descibe().empty()) {
    _this->_internal_set_descibe(from._internal_descibe());
  }
  if (!from._internal_stype().empty()) {
    _this->_internal_set_stype(from._internal_stype());
  }
  if (!from._internal_gtype().empty()) {
    _this->_internal_set_gtype(from._internal_gtype());
  }
  if (!from._internal_agv_type().empty()) {
    _this->_internal_set_agv_type(from._internal_agv_type());
  }
  if (from._internal_layer() != 0) {
    _this->_internal_set_layer(from._internal_layer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_taskActionTmpl::CopyFrom(const Describe_taskActionTmpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.taskActionTmpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_taskActionTmpl::IsInitialized() const {
  return true;
}

void Describe_taskActionTmpl::InternalSwap(Describe_taskActionTmpl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.act_instance_list_.InternalSwap(&other->_impl_.act_instance_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.descibe_, lhs_arena,
      &other->_impl_.descibe_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stype_, lhs_arena,
      &other->_impl_.stype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gtype_, lhs_arena,
      &other->_impl_.gtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agv_type_, lhs_arena,
      &other->_impl_.agv_type_, rhs_arena
  );
  swap(_impl_.layer_, other->_impl_.layer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_taskActionTmpl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[59]);
}

// ===================================================================

Describe_dataDesc_ParamEntry_DoNotUse::Describe_dataDesc_ParamEntry_DoNotUse() {}
Describe_dataDesc_ParamEntry_DoNotUse::Describe_dataDesc_ParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_dataDesc_ParamEntry_DoNotUse::MergeFrom(const Describe_dataDesc_ParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_dataDesc_ParamEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[60]);
}

// ===================================================================

class Describe_dataDesc::_Internal {
 public:
};

Describe_dataDesc::Describe_dataDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Describe_dataDesc::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe.dataDesc)
}
Describe_dataDesc::Describe_dataDesc(const Describe_dataDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe_dataDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_)*/{}
    , decltype(_impl_.describe_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_describe().empty()) {
    _this->_impl_.describe_.Set(from._internal_describe(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe.dataDesc)
}

inline void Describe_dataDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.param_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.describe_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Describe_dataDesc::~Describe_dataDesc() {
  // @@protoc_insertion_point(destructor:agv_map.Describe.dataDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Describe_dataDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.param_.Destruct();
  _impl_.param_.~MapField();
  _impl_.describe_.Destroy();
}

void Describe_dataDesc::ArenaDtor(void* object) {
  Describe_dataDesc* _this = reinterpret_cast< Describe_dataDesc* >(object);
  _this->_impl_.param_.Destruct();
}
void Describe_dataDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe_dataDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe.dataDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_.Clear();
  _impl_.describe_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe_dataDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string describe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_describe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Describe.dataDesc.describe"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe_dataDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe.dataDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_describe().data(), static_cast<int>(this->_internal_describe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Describe.dataDesc.describe");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_describe(), target);
  }

  // map<string, string> param = 2;
  if (!this->_internal_param().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Describe_dataDesc_ParamEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_param();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.dataDesc.ParamEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.dataDesc.ParamEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe.dataDesc)
  return target;
}

size_t Describe_dataDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe.dataDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> param = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_param().begin();
      it != this->_internal_param().end(); ++it) {
    total_size += Describe_dataDesc_ParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_describe());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe_dataDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe_dataDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe_dataDesc::GetClassData() const { return &_class_data_; }


void Describe_dataDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe_dataDesc*>(&to_msg);
  auto& from = static_cast<const Describe_dataDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe.dataDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  if (!from._internal_describe().empty()) {
    _this->_internal_set_describe(from._internal_describe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe_dataDesc::CopyFrom(const Describe_dataDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe.dataDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe_dataDesc::IsInitialized() const {
  return true;
}

void Describe_dataDesc::InternalSwap(Describe_dataDesc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_.InternalSwap(&other->_impl_.param_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.describe_, lhs_arena,
      &other->_impl_.describe_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe_dataDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[61]);
}

// ===================================================================

class Describe::_Internal {
 public:
};

Describe::Describe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Describe::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe)
}
Describe::Describe(const Describe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Describe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.agv_desc_)*/{}
    , /*decltype(_impl_.ctl_desc_)*/{}
    , /*decltype(_impl_.avo_desc_)*/{}
    , /*decltype(_impl_.rut_desc_)*/{}
    , /*decltype(_impl_.action_desc_)*/{}
    , /*decltype(_impl_.area_desc_)*/{}
    , /*decltype(_impl_.param_tmpl_)*/{}
    , /*decltype(_impl_.action_tmpl_)*/{}
    , /*decltype(_impl_.task_action_tmpl_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.agv_desc_.MergeFrom(from._impl_.agv_desc_);
  _this->_impl_.ctl_desc_.MergeFrom(from._impl_.ctl_desc_);
  _this->_impl_.avo_desc_.MergeFrom(from._impl_.avo_desc_);
  _this->_impl_.rut_desc_.MergeFrom(from._impl_.rut_desc_);
  _this->_impl_.action_desc_.MergeFrom(from._impl_.action_desc_);
  _this->_impl_.area_desc_.MergeFrom(from._impl_.area_desc_);
  _this->_impl_.param_tmpl_.MergeFrom(from._impl_.param_tmpl_);
  _this->_impl_.action_tmpl_.MergeFrom(from._impl_.action_tmpl_);
  _this->_impl_.task_action_tmpl_.MergeFrom(from._impl_.task_action_tmpl_);
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe)
}

inline void Describe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.agv_desc_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.ctl_desc_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.avo_desc_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.rut_desc_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.action_desc_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.area_desc_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.param_tmpl_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.action_tmpl_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.task_action_tmpl_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Describe::~Describe() {
  // @@protoc_insertion_point(destructor:agv_map.Describe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Describe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agv_desc_.Destruct();
  _impl_.agv_desc_.~MapField();
  _impl_.ctl_desc_.Destruct();
  _impl_.ctl_desc_.~MapField();
  _impl_.avo_desc_.Destruct();
  _impl_.avo_desc_.~MapField();
  _impl_.rut_desc_.Destruct();
  _impl_.rut_desc_.~MapField();
  _impl_.action_desc_.Destruct();
  _impl_.action_desc_.~MapField();
  _impl_.area_desc_.Destruct();
  _impl_.area_desc_.~MapField();
  _impl_.param_tmpl_.Destruct();
  _impl_.param_tmpl_.~MapField();
  _impl_.action_tmpl_.Destruct();
  _impl_.action_tmpl_.~MapField();
  _impl_.task_action_tmpl_.Destruct();
  _impl_.task_action_tmpl_.~MapField();
}

void Describe::ArenaDtor(void* object) {
  Describe* _this = reinterpret_cast< Describe* >(object);
  _this->_impl_.agv_desc_.Destruct();
  _this->_impl_.ctl_desc_.Destruct();
  _this->_impl_.avo_desc_.Destruct();
  _this->_impl_.rut_desc_.Destruct();
  _this->_impl_.action_desc_.Destruct();
  _this->_impl_.area_desc_.Destruct();
  _this->_impl_.param_tmpl_.Destruct();
  _this->_impl_.action_tmpl_.Destruct();
  _this->_impl_.task_action_tmpl_.Destruct();
}
void Describe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Describe::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agv_desc_.Clear();
  _impl_.ctl_desc_.Clear();
  _impl_.avo_desc_.Clear();
  _impl_.rut_desc_.Clear();
  _impl_.action_desc_.Clear();
  _impl_.area_desc_.Clear();
  _impl_.param_tmpl_.Clear();
  _impl_.action_tmpl_.Clear();
  _impl_.task_action_tmpl_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> agv_desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.agv_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> ctl_desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.ctl_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> avo_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.avo_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> rut_desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.rut_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Describe.dataDesc> action_desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.action_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Describe.dataDesc> area_desc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.area_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Describe.ParamTmpl> param_tmpl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.param_tmpl_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Describe.actionTmpl> action_tmpl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.action_tmpl_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Describe.taskActionTmpl> task_action_tmpl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.task_action_tmpl_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Describe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> agv_desc = 1;
  if (!this->_internal_agv_desc().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Describe_AgvDescEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_agv_desc();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.AgvDescEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.AgvDescEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> ctl_desc = 2;
  if (!this->_internal_ctl_desc().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Describe_CtlDescEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_ctl_desc();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.CtlDescEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.CtlDescEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> avo_desc = 3;
  if (!this->_internal_avo_desc().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Describe_AvoDescEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_avo_desc();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.AvoDescEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.AvoDescEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> rut_desc = 4;
  if (!this->_internal_rut_desc().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Describe_RutDescEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_rut_desc();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.RutDescEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.RutDescEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .agv_map.Describe.dataDesc> action_desc = 5;
  if (!this->_internal_action_desc().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Describe_dataDesc>;
    using WireHelper = Describe_ActionDescEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_action_desc();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.ActionDescEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .agv_map.Describe.dataDesc> area_desc = 6;
  if (!this->_internal_area_desc().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Describe_dataDesc>;
    using WireHelper = Describe_AreaDescEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_area_desc();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.AreaDescEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .agv_map.Describe.ParamTmpl> param_tmpl = 7;
  if (!this->_internal_param_tmpl().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Describe_ParamTmpl>;
    using WireHelper = Describe_ParamTmplEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_param_tmpl();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.ParamTmplEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .agv_map.Describe.actionTmpl> action_tmpl = 8;
  if (!this->_internal_action_tmpl().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Describe_actionTmpl>;
    using WireHelper = Describe_ActionTmplEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_action_tmpl();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.ActionTmplEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .agv_map.Describe.taskActionTmpl> task_action_tmpl = 9;
  if (!this->_internal_task_action_tmpl().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Describe_taskActionTmpl>;
    using WireHelper = Describe_TaskActionTmplEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_task_action_tmpl();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.Describe.TaskActionTmplEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe)
  return target;
}

size_t Describe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> agv_desc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agv_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_agv_desc().begin();
      it != this->_internal_agv_desc().end(); ++it) {
    total_size += Describe_AgvDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> ctl_desc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ctl_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_ctl_desc().begin();
      it != this->_internal_ctl_desc().end(); ++it) {
    total_size += Describe_CtlDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> avo_desc = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avo_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_avo_desc().begin();
      it != this->_internal_avo_desc().end(); ++it) {
    total_size += Describe_AvoDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> rut_desc = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rut_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_rut_desc().begin();
      it != this->_internal_rut_desc().end(); ++it) {
    total_size += Describe_RutDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .agv_map.Describe.dataDesc> action_desc = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_action_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >::const_iterator
      it = this->_internal_action_desc().begin();
      it != this->_internal_action_desc().end(); ++it) {
    total_size += Describe_ActionDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .agv_map.Describe.dataDesc> area_desc = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_area_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >::const_iterator
      it = this->_internal_area_desc().begin();
      it != this->_internal_area_desc().end(); ++it) {
    total_size += Describe_AreaDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .agv_map.Describe.ParamTmpl> param_tmpl = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_tmpl_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >::const_iterator
      it = this->_internal_param_tmpl().begin();
      it != this->_internal_param_tmpl().end(); ++it) {
    total_size += Describe_ParamTmplEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .agv_map.Describe.actionTmpl> action_tmpl = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_action_tmpl_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >::const_iterator
      it = this->_internal_action_tmpl().begin();
      it != this->_internal_action_tmpl().end(); ++it) {
    total_size += Describe_ActionTmplEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .agv_map.Describe.taskActionTmpl> task_action_tmpl = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_task_action_tmpl_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >::const_iterator
      it = this->_internal_task_action_tmpl().begin();
      it != this->_internal_task_action_tmpl().end(); ++it) {
    total_size += Describe_TaskActionTmplEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Describe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Describe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Describe::GetClassData() const { return &_class_data_; }


void Describe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Describe*>(&to_msg);
  auto& from = static_cast<const Describe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agv_desc_.MergeFrom(from._impl_.agv_desc_);
  _this->_impl_.ctl_desc_.MergeFrom(from._impl_.ctl_desc_);
  _this->_impl_.avo_desc_.MergeFrom(from._impl_.avo_desc_);
  _this->_impl_.rut_desc_.MergeFrom(from._impl_.rut_desc_);
  _this->_impl_.action_desc_.MergeFrom(from._impl_.action_desc_);
  _this->_impl_.area_desc_.MergeFrom(from._impl_.area_desc_);
  _this->_impl_.param_tmpl_.MergeFrom(from._impl_.param_tmpl_);
  _this->_impl_.action_tmpl_.MergeFrom(from._impl_.action_tmpl_);
  _this->_impl_.task_action_tmpl_.MergeFrom(from._impl_.task_action_tmpl_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Describe::CopyFrom(const Describe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe::IsInitialized() const {
  return true;
}

void Describe::InternalSwap(Describe* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agv_desc_.InternalSwap(&other->_impl_.agv_desc_);
  _impl_.ctl_desc_.InternalSwap(&other->_impl_.ctl_desc_);
  _impl_.avo_desc_.InternalSwap(&other->_impl_.avo_desc_);
  _impl_.rut_desc_.InternalSwap(&other->_impl_.rut_desc_);
  _impl_.action_desc_.InternalSwap(&other->_impl_.action_desc_);
  _impl_.area_desc_.InternalSwap(&other->_impl_.area_desc_);
  _impl_.param_tmpl_.InternalSwap(&other->_impl_.param_tmpl_);
  _impl_.action_tmpl_.InternalSwap(&other->_impl_.action_tmpl_);
  _impl_.task_action_tmpl_.InternalSwap(&other->_impl_.task_action_tmpl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[62]);
}

// ===================================================================

class Store_offset::_Internal {
 public:
  static const ::agv_map::store_offset_by_layer& layer1(const Store_offset* msg);
  static const ::agv_map::store_offset_by_layer& layer2(const Store_offset* msg);
  static const ::agv_map::store_offset_by_layer& layer3(const Store_offset* msg);
  static const ::agv_map::store_offset_by_layer& layer4(const Store_offset* msg);
};

const ::agv_map::store_offset_by_layer&
Store_offset::_Internal::layer1(const Store_offset* msg) {
  return *msg->_impl_.layer1_;
}
const ::agv_map::store_offset_by_layer&
Store_offset::_Internal::layer2(const Store_offset* msg) {
  return *msg->_impl_.layer2_;
}
const ::agv_map::store_offset_by_layer&
Store_offset::_Internal::layer3(const Store_offset* msg) {
  return *msg->_impl_.layer3_;
}
const ::agv_map::store_offset_by_layer&
Store_offset::_Internal::layer4(const Store_offset* msg) {
  return *msg->_impl_.layer4_;
}
Store_offset::Store_offset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Store_offset)
}
Store_offset::Store_offset(const Store_offset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Store_offset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layer1_){nullptr}
    , decltype(_impl_.layer2_){nullptr}
    , decltype(_impl_.layer3_){nullptr}
    , decltype(_impl_.layer4_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_layer1()) {
    _this->_impl_.layer1_ = new ::agv_map::store_offset_by_layer(*from._impl_.layer1_);
  }
  if (from._internal_has_layer2()) {
    _this->_impl_.layer2_ = new ::agv_map::store_offset_by_layer(*from._impl_.layer2_);
  }
  if (from._internal_has_layer3()) {
    _this->_impl_.layer3_ = new ::agv_map::store_offset_by_layer(*from._impl_.layer3_);
  }
  if (from._internal_has_layer4()) {
    _this->_impl_.layer4_ = new ::agv_map::store_offset_by_layer(*from._impl_.layer4_);
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Store_offset)
}

inline void Store_offset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layer1_){nullptr}
    , decltype(_impl_.layer2_){nullptr}
    , decltype(_impl_.layer3_){nullptr}
    , decltype(_impl_.layer4_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Store_offset::~Store_offset() {
  // @@protoc_insertion_point(destructor:agv_map.Store_offset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Store_offset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.layer1_;
  if (this != internal_default_instance()) delete _impl_.layer2_;
  if (this != internal_default_instance()) delete _impl_.layer3_;
  if (this != internal_default_instance()) delete _impl_.layer4_;
}

void Store_offset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Store_offset::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Store_offset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.layer1_ != nullptr) {
    delete _impl_.layer1_;
  }
  _impl_.layer1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.layer2_ != nullptr) {
    delete _impl_.layer2_;
  }
  _impl_.layer2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.layer3_ != nullptr) {
    delete _impl_.layer3_;
  }
  _impl_.layer3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.layer4_ != nullptr) {
    delete _impl_.layer4_;
  }
  _impl_.layer4_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Store_offset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .agv_map.store_offset_by_layer layer1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.store_offset_by_layer layer2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.store_offset_by_layer layer3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.store_offset_by_layer layer4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Store_offset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Store_offset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.store_offset_by_layer layer1 = 1;
  if (this->_internal_has_layer1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::layer1(this),
        _Internal::layer1(this).GetCachedSize(), target, stream);
  }

  // .agv_map.store_offset_by_layer layer2 = 2;
  if (this->_internal_has_layer2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::layer2(this),
        _Internal::layer2(this).GetCachedSize(), target, stream);
  }

  // .agv_map.store_offset_by_layer layer3 = 3;
  if (this->_internal_has_layer3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::layer3(this),
        _Internal::layer3(this).GetCachedSize(), target, stream);
  }

  // .agv_map.store_offset_by_layer layer4 = 4;
  if (this->_internal_has_layer4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::layer4(this),
        _Internal::layer4(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Store_offset)
  return target;
}

size_t Store_offset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Store_offset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agv_map.store_offset_by_layer layer1 = 1;
  if (this->_internal_has_layer1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layer1_);
  }

  // .agv_map.store_offset_by_layer layer2 = 2;
  if (this->_internal_has_layer2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layer2_);
  }

  // .agv_map.store_offset_by_layer layer3 = 3;
  if (this->_internal_has_layer3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layer3_);
  }

  // .agv_map.store_offset_by_layer layer4 = 4;
  if (this->_internal_has_layer4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layer4_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Store_offset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Store_offset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Store_offset::GetClassData() const { return &_class_data_; }


void Store_offset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Store_offset*>(&to_msg);
  auto& from = static_cast<const Store_offset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Store_offset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_layer1()) {
    _this->_internal_mutable_layer1()->::agv_map::store_offset_by_layer::MergeFrom(
        from._internal_layer1());
  }
  if (from._internal_has_layer2()) {
    _this->_internal_mutable_layer2()->::agv_map::store_offset_by_layer::MergeFrom(
        from._internal_layer2());
  }
  if (from._internal_has_layer3()) {
    _this->_internal_mutable_layer3()->::agv_map::store_offset_by_layer::MergeFrom(
        from._internal_layer3());
  }
  if (from._internal_has_layer4()) {
    _this->_internal_mutable_layer4()->::agv_map::store_offset_by_layer::MergeFrom(
        from._internal_layer4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Store_offset::CopyFrom(const Store_offset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Store_offset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Store_offset::IsInitialized() const {
  return true;
}

void Store_offset::InternalSwap(Store_offset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Store_offset, _impl_.layer4_)
      + sizeof(Store_offset::_impl_.layer4_)
      - PROTOBUF_FIELD_OFFSET(Store_offset, _impl_.layer1_)>(
          reinterpret_cast<char*>(&_impl_.layer1_),
          reinterpret_cast<char*>(&other->_impl_.layer1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Store_offset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[63]);
}

// ===================================================================

class store_offset_by_layer::_Internal {
 public:
};

store_offset_by_layer::store_offset_by_layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.store_offset_by_layer)
}
store_offset_by_layer::store_offset_by_layer(const store_offset_by_layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  store_offset_by_layer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.high_){}
    , decltype(_impl_.horizontal_offset_){}
    , decltype(_impl_.vertical_offset_){}
    , decltype(_impl_.fork_high_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.high_, &from._impl_.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fork_high_offset_) -
    reinterpret_cast<char*>(&_impl_.high_)) + sizeof(_impl_.fork_high_offset_));
  // @@protoc_insertion_point(copy_constructor:agv_map.store_offset_by_layer)
}

inline void store_offset_by_layer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.high_){0}
    , decltype(_impl_.horizontal_offset_){0}
    , decltype(_impl_.vertical_offset_){0}
    , decltype(_impl_.fork_high_offset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

store_offset_by_layer::~store_offset_by_layer() {
  // @@protoc_insertion_point(destructor:agv_map.store_offset_by_layer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void store_offset_by_layer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void store_offset_by_layer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void store_offset_by_layer::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.store_offset_by_layer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fork_high_offset_) -
      reinterpret_cast<char*>(&_impl_.high_)) + sizeof(_impl_.fork_high_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* store_offset_by_layer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float horizontal_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.horizontal_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vertical_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.vertical_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fork_high_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.fork_high_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* store_offset_by_layer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.store_offset_by_layer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float high = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = this->_internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_high(), target);
  }

  // float horizontal_offset = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal_offset = this->_internal_horizontal_offset();
  uint32_t raw_horizontal_offset;
  memcpy(&raw_horizontal_offset, &tmp_horizontal_offset, sizeof(tmp_horizontal_offset));
  if (raw_horizontal_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_horizontal_offset(), target);
  }

  // float vertical_offset = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vertical_offset = this->_internal_vertical_offset();
  uint32_t raw_vertical_offset;
  memcpy(&raw_vertical_offset, &tmp_vertical_offset, sizeof(tmp_vertical_offset));
  if (raw_vertical_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_vertical_offset(), target);
  }

  // float fork_high_offset = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fork_high_offset = this->_internal_fork_high_offset();
  uint32_t raw_fork_high_offset;
  memcpy(&raw_fork_high_offset, &tmp_fork_high_offset, sizeof(tmp_fork_high_offset));
  if (raw_fork_high_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_fork_high_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.store_offset_by_layer)
  return target;
}

size_t store_offset_by_layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.store_offset_by_layer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float high = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = this->_internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    total_size += 1 + 4;
  }

  // float horizontal_offset = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal_offset = this->_internal_horizontal_offset();
  uint32_t raw_horizontal_offset;
  memcpy(&raw_horizontal_offset, &tmp_horizontal_offset, sizeof(tmp_horizontal_offset));
  if (raw_horizontal_offset != 0) {
    total_size += 1 + 4;
  }

  // float vertical_offset = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vertical_offset = this->_internal_vertical_offset();
  uint32_t raw_vertical_offset;
  memcpy(&raw_vertical_offset, &tmp_vertical_offset, sizeof(tmp_vertical_offset));
  if (raw_vertical_offset != 0) {
    total_size += 1 + 4;
  }

  // float fork_high_offset = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fork_high_offset = this->_internal_fork_high_offset();
  uint32_t raw_fork_high_offset;
  memcpy(&raw_fork_high_offset, &tmp_fork_high_offset, sizeof(tmp_fork_high_offset));
  if (raw_fork_high_offset != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData store_offset_by_layer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    store_offset_by_layer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*store_offset_by_layer::GetClassData() const { return &_class_data_; }


void store_offset_by_layer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<store_offset_by_layer*>(&to_msg);
  auto& from = static_cast<const store_offset_by_layer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.store_offset_by_layer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = from._internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    _this->_internal_set_high(from._internal_high());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal_offset = from._internal_horizontal_offset();
  uint32_t raw_horizontal_offset;
  memcpy(&raw_horizontal_offset, &tmp_horizontal_offset, sizeof(tmp_horizontal_offset));
  if (raw_horizontal_offset != 0) {
    _this->_internal_set_horizontal_offset(from._internal_horizontal_offset());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vertical_offset = from._internal_vertical_offset();
  uint32_t raw_vertical_offset;
  memcpy(&raw_vertical_offset, &tmp_vertical_offset, sizeof(tmp_vertical_offset));
  if (raw_vertical_offset != 0) {
    _this->_internal_set_vertical_offset(from._internal_vertical_offset());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fork_high_offset = from._internal_fork_high_offset();
  uint32_t raw_fork_high_offset;
  memcpy(&raw_fork_high_offset, &tmp_fork_high_offset, sizeof(tmp_fork_high_offset));
  if (raw_fork_high_offset != 0) {
    _this->_internal_set_fork_high_offset(from._internal_fork_high_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void store_offset_by_layer::CopyFrom(const store_offset_by_layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.store_offset_by_layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool store_offset_by_layer::IsInitialized() const {
  return true;
}

void store_offset_by_layer::InternalSwap(store_offset_by_layer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(store_offset_by_layer, _impl_.fork_high_offset_)
      + sizeof(store_offset_by_layer::_impl_.fork_high_offset_)
      - PROTOBUF_FIELD_OFFSET(store_offset_by_layer, _impl_.high_)>(
          reinterpret_cast<char*>(&_impl_.high_),
          reinterpret_cast<char*>(&other->_impl_.high_));
}

::PROTOBUF_NAMESPACE_ID::Metadata store_offset_by_layer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[64]);
}

// ===================================================================

class Label::_Internal {
 public:
  static const ::agv_map::Coord& coord(const Label* msg);
};

const ::agv_map::Coord&
Label::_Internal::coord(const Label* msg) {
  return *msg->_impl_.coord_;
}
Label::Label(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Label* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.coord_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.color_r_){}
    , decltype(_impl_.color_g_){}
    , decltype(_impl_.color_b_){}
    , decltype(_impl_.opacity_){}
    , decltype(_impl_.bold_){}
    , decltype(_impl_.italic_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.rotate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_coord()) {
    _this->_impl_.coord_ = new ::agv_map::Coord(*from._impl_.coord_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotate_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.rotate_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Label)
}

inline void Label::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.coord_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.size_){0}
    , decltype(_impl_.color_r_){0}
    , decltype(_impl_.color_g_){0}
    , decltype(_impl_.color_b_){0}
    , decltype(_impl_.opacity_){0}
    , decltype(_impl_.bold_){0}
    , decltype(_impl_.italic_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.rotate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:agv_map.Label)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Label::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.coord_;
}

void Label::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Label)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.coord_ != nullptr) {
    delete _impl_.coord_;
  }
  _impl_.coord_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rotate_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.rotate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Label::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Label.text"));
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Coord coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 color_r = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.color_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 color_g = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.color_g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 color_b = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.color_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 opacity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 italic = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.italic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 rotate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.rotate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Label::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Label)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Label.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // .agv_map.Coord coord = 4;
  if (this->_internal_has_coord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::coord(this),
        _Internal::coord(this).GetCachedSize(), target, stream);
  }

  // sint32 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_size(), target);
  }

  // sint32 color_r = 6;
  if (this->_internal_color_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_color_r(), target);
  }

  // sint32 color_g = 7;
  if (this->_internal_color_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(7, this->_internal_color_g(), target);
  }

  // sint32 color_b = 8;
  if (this->_internal_color_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_color_b(), target);
  }

  // sint32 opacity = 9;
  if (this->_internal_opacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(9, this->_internal_opacity(), target);
  }

  // int32 bold = 10;
  if (this->_internal_bold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_bold(), target);
  }

  // int32 italic = 11;
  if (this->_internal_italic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_italic(), target);
  }

  // int32 dir = 12;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_dir(), target);
  }

  // sint32 rotate = 13;
  if (this->_internal_rotate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(13, this->_internal_rotate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Label)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .agv_map.Coord coord = 4;
  if (this->_internal_has_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_);
  }

  // sint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // sint32 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_size());
  }

  // sint32 color_r = 6;
  if (this->_internal_color_r() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_color_r());
  }

  // sint32 color_g = 7;
  if (this->_internal_color_g() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_color_g());
  }

  // sint32 color_b = 8;
  if (this->_internal_color_b() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_color_b());
  }

  // sint32 opacity = 9;
  if (this->_internal_opacity() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_opacity());
  }

  // int32 bold = 10;
  if (this->_internal_bold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bold());
  }

  // int32 italic = 11;
  if (this->_internal_italic() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_italic());
  }

  // int32 dir = 12;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  // sint32 rotate = 13;
  if (this->_internal_rotate() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_rotate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Label::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Label::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Label::GetClassData() const { return &_class_data_; }


void Label::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Label*>(&to_msg);
  auto& from = static_cast<const Label&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Label)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_coord()) {
    _this->_internal_mutable_coord()->::agv_map::Coord::MergeFrom(
        from._internal_coord());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_color_r() != 0) {
    _this->_internal_set_color_r(from._internal_color_r());
  }
  if (from._internal_color_g() != 0) {
    _this->_internal_set_color_g(from._internal_color_g());
  }
  if (from._internal_color_b() != 0) {
    _this->_internal_set_color_b(from._internal_color_b());
  }
  if (from._internal_opacity() != 0) {
    _this->_internal_set_opacity(from._internal_opacity());
  }
  if (from._internal_bold() != 0) {
    _this->_internal_set_bold(from._internal_bold());
  }
  if (from._internal_italic() != 0) {
    _this->_internal_set_italic(from._internal_italic());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_rotate() != 0) {
    _this->_internal_set_rotate(from._internal_rotate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Label, _impl_.rotate_)
      + sizeof(Label::_impl_.rotate_)
      - PROTOBUF_FIELD_OFFSET(Label, _impl_.coord_)>(
          reinterpret_cast<char*>(&_impl_.coord_),
          reinterpret_cast<char*>(&other->_impl_.coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[65]);
}

// ===================================================================

AgvParam_ProtectionEntry_DoNotUse::AgvParam_ProtectionEntry_DoNotUse() {}
AgvParam_ProtectionEntry_DoNotUse::AgvParam_ProtectionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AgvParam_ProtectionEntry_DoNotUse::MergeFrom(const AgvParam_ProtectionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AgvParam_ProtectionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[66]);
}

// ===================================================================

AgvParam_ReflectorEntry_DoNotUse::AgvParam_ReflectorEntry_DoNotUse() {}
AgvParam_ReflectorEntry_DoNotUse::AgvParam_ReflectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AgvParam_ReflectorEntry_DoNotUse::MergeFrom(const AgvParam_ReflectorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AgvParam_ReflectorEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[67]);
}

// ===================================================================

class AgvParam_opto_elec::_Internal {
 public:
  static const ::agv_map::Position& pos(const AgvParam_opto_elec* msg);
};

const ::agv_map::Position&
AgvParam_opto_elec::_Internal::pos(const AgvParam_opto_elec* msg) {
  return *msg->_impl_.pos_;
}
AgvParam_opto_elec::AgvParam_opto_elec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.AgvParam.opto_elec)
}
AgvParam_opto_elec::AgvParam_opto_elec(const AgvParam_opto_elec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgvParam_opto_elec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.signal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::agv_map::Position(*from._impl_.pos_);
  }
  _this->_impl_.signal_ = from._impl_.signal_;
  // @@protoc_insertion_point(copy_constructor:agv_map.AgvParam.opto_elec)
}

inline void AgvParam_opto_elec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.signal_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgvParam_opto_elec::~AgvParam_opto_elec() {
  // @@protoc_insertion_point(destructor:agv_map.AgvParam.opto_elec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgvParam_opto_elec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void AgvParam_opto_elec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgvParam_opto_elec::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.AgvParam.opto_elec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _impl_.signal_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvParam_opto_elec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.AgvParam.opto_elec.name"));
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Position pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgvParam_opto_elec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.AgvParam.opto_elec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.AgvParam.opto_elec.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .agv_map.Position pos = 2;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // int32 signal = 3;
  if (this->_internal_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_signal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.AgvParam.opto_elec)
  return target;
}

size_t AgvParam_opto_elec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.AgvParam.opto_elec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .agv_map.Position pos = 2;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // int32 signal = 3;
  if (this->_internal_signal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgvParam_opto_elec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgvParam_opto_elec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgvParam_opto_elec::GetClassData() const { return &_class_data_; }


void AgvParam_opto_elec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgvParam_opto_elec*>(&to_msg);
  auto& from = static_cast<const AgvParam_opto_elec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.AgvParam.opto_elec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::agv_map::Position::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_signal() != 0) {
    _this->_internal_set_signal(from._internal_signal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgvParam_opto_elec::CopyFrom(const AgvParam_opto_elec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.AgvParam.opto_elec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvParam_opto_elec::IsInitialized() const {
  return true;
}

void AgvParam_opto_elec::InternalSwap(AgvParam_opto_elec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvParam_opto_elec, _impl_.signal_)
      + sizeof(AgvParam_opto_elec::_impl_.signal_)
      - PROTOBUF_FIELD_OFFSET(AgvParam_opto_elec, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvParam_opto_elec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[68]);
}

// ===================================================================

class AgvParam::_Internal {
 public:
  static const ::agv_map::Coord& id_pos(const AgvParam* msg);
  static const ::agv_map::Coord& pallet_pos(const AgvParam* msg);
};

const ::agv_map::Coord&
AgvParam::_Internal::id_pos(const AgvParam* msg) {
  return *msg->_impl_.id_pos_;
}
const ::agv_map::Coord&
AgvParam::_Internal::pallet_pos(const AgvParam* msg) {
  return *msg->_impl_.pallet_pos_;
}
AgvParam::AgvParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AgvParam::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.AgvParam)
}
AgvParam::AgvParam(const AgvParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgvParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.opto_elec_pos_){from._impl_.opto_elec_pos_}
    , /*decltype(_impl_.protection_)*/{}
    , /*decltype(_impl_.reflector_)*/{}
    , decltype(_impl_.agv_subtype_){}
    , decltype(_impl_.id_pos_){nullptr}
    , decltype(_impl_.pallet_pos_){nullptr}
    , decltype(_impl_.body_width_){}
    , decltype(_impl_.body_length_){}
    , decltype(_impl_.body_high_){}
    , decltype(_impl_.wheel_base_){}
    , decltype(_impl_.rotate_radius_){}
    , decltype(_impl_.p2head_){}
    , decltype(_impl_.p2tail_){}
    , decltype(_impl_.p2nav_){}
    , decltype(_impl_.fork_min_){}
    , decltype(_impl_.fork_max_){}
    , decltype(_impl_.fork_noload_high_){}
    , decltype(_impl_.fork_load_high_){}
    , decltype(_impl_.fork_noload_back_high_){}
    , decltype(_impl_.shelf_num_){}
    , decltype(_impl_.layer_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.protection_.MergeFrom(from._impl_.protection_);
  _this->_impl_.reflector_.MergeFrom(from._impl_.reflector_);
  _impl_.agv_subtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agv_subtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agv_subtype().empty()) {
    _this->_impl_.agv_subtype_.Set(from._internal_agv_subtype(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id_pos()) {
    _this->_impl_.id_pos_ = new ::agv_map::Coord(*from._impl_.id_pos_);
  }
  if (from._internal_has_pallet_pos()) {
    _this->_impl_.pallet_pos_ = new ::agv_map::Coord(*from._impl_.pallet_pos_);
  }
  ::memcpy(&_impl_.body_width_, &from._impl_.body_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.layer_num_) -
    reinterpret_cast<char*>(&_impl_.body_width_)) + sizeof(_impl_.layer_num_));
  // @@protoc_insertion_point(copy_constructor:agv_map.AgvParam)
}

inline void AgvParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.opto_elec_pos_){arena}
    , /*decltype(_impl_.protection_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.reflector_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.agv_subtype_){}
    , decltype(_impl_.id_pos_){nullptr}
    , decltype(_impl_.pallet_pos_){nullptr}
    , decltype(_impl_.body_width_){0}
    , decltype(_impl_.body_length_){0}
    , decltype(_impl_.body_high_){0}
    , decltype(_impl_.wheel_base_){0}
    , decltype(_impl_.rotate_radius_){0}
    , decltype(_impl_.p2head_){0}
    , decltype(_impl_.p2tail_){0}
    , decltype(_impl_.p2nav_){0}
    , decltype(_impl_.fork_min_){0}
    , decltype(_impl_.fork_max_){0}
    , decltype(_impl_.fork_noload_high_){0}
    , decltype(_impl_.fork_load_high_){0}
    , decltype(_impl_.fork_noload_back_high_){0}
    , decltype(_impl_.shelf_num_){0}
    , decltype(_impl_.layer_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.agv_subtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agv_subtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgvParam::~AgvParam() {
  // @@protoc_insertion_point(destructor:agv_map.AgvParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AgvParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.opto_elec_pos_.~RepeatedPtrField();
  _impl_.protection_.Destruct();
  _impl_.protection_.~MapField();
  _impl_.reflector_.Destruct();
  _impl_.reflector_.~MapField();
  _impl_.agv_subtype_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_pos_;
  if (this != internal_default_instance()) delete _impl_.pallet_pos_;
}

void AgvParam::ArenaDtor(void* object) {
  AgvParam* _this = reinterpret_cast< AgvParam* >(object);
  _this->_impl_.protection_.Destruct();
  _this->_impl_.reflector_.Destruct();
}
void AgvParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgvParam::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.AgvParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opto_elec_pos_.Clear();
  _impl_.protection_.Clear();
  _impl_.reflector_.Clear();
  _impl_.agv_subtype_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_pos_ != nullptr) {
    delete _impl_.id_pos_;
  }
  _impl_.id_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pallet_pos_ != nullptr) {
    delete _impl_.pallet_pos_;
  }
  _impl_.pallet_pos_ = nullptr;
  ::memset(&_impl_.body_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.layer_num_) -
      reinterpret_cast<char*>(&_impl_.body_width_)) + sizeof(_impl_.layer_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agv_subtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agv_subtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.AgvParam.agv_subtype"));
        } else
          goto handle_unusual;
        continue;
      // int32 body_Width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.body_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 body_Length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.body_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 body_High = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.body_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wheel_base = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.wheel_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rotate_radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rotate_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p2head = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.p2head_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p2tail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.p2tail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p2nav = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.p2nav_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 fork_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.fork_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 fork_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.fork_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 fork_noload_high = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.fork_noload_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Coord id_pos = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Coord pallet_pos = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pallet_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.AgvParam.opto_elec opto_elec_pos = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_opto_elec_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .agv_map.Protection> protection = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.protection_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.Reflector> reflector = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.reflector_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // sint32 fork_load_high = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.fork_load_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 fork_noload_back_high = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.fork_noload_back_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 shelf_num = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.shelf_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 layer_num = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.layer_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgvParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.AgvParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agv_subtype = 1;
  if (!this->_internal_agv_subtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agv_subtype().data(), static_cast<int>(this->_internal_agv_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.AgvParam.agv_subtype");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agv_subtype(), target);
  }

  // int32 body_Width = 2;
  if (this->_internal_body_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_body_width(), target);
  }

  // int32 body_Length = 3;
  if (this->_internal_body_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_body_length(), target);
  }

  // int32 body_High = 4;
  if (this->_internal_body_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_body_high(), target);
  }

  // int32 wheel_base = 5;
  if (this->_internal_wheel_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_wheel_base(), target);
  }

  // int32 rotate_radius = 6;
  if (this->_internal_rotate_radius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_rotate_radius(), target);
  }

  // int32 p2head = 7;
  if (this->_internal_p2head() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_p2head(), target);
  }

  // int32 p2tail = 8;
  if (this->_internal_p2tail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_p2tail(), target);
  }

  // int32 p2nav = 9;
  if (this->_internal_p2nav() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_p2nav(), target);
  }

  // sint32 fork_min = 10;
  if (this->_internal_fork_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(10, this->_internal_fork_min(), target);
  }

  // sint32 fork_max = 11;
  if (this->_internal_fork_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(11, this->_internal_fork_max(), target);
  }

  // sint32 fork_noload_high = 13;
  if (this->_internal_fork_noload_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(13, this->_internal_fork_noload_high(), target);
  }

  // .agv_map.Coord id_pos = 14;
  if (this->_internal_has_id_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::id_pos(this),
        _Internal::id_pos(this).GetCachedSize(), target, stream);
  }

  // .agv_map.Coord pallet_pos = 15;
  if (this->_internal_has_pallet_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::pallet_pos(this),
        _Internal::pallet_pos(this).GetCachedSize(), target, stream);
  }

  // repeated .agv_map.AgvParam.opto_elec opto_elec_pos = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opto_elec_pos_size()); i < n; i++) {
    const auto& repfield = this->_internal_opto_elec_pos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .agv_map.Protection> protection = 17;
  if (!this->_internal_protection().empty()) {
    using MapType = ::_pb::Map<std::string, ::agv_map::Protection>;
    using WireHelper = AgvParam_ProtectionEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_protection();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "agv_map.AgvParam.ProtectionEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<int32, .agv_map.Reflector> reflector = 18;
  if (!this->_internal_reflector().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::Reflector>;
    using WireHelper = AgvParam_ReflectorEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_reflector();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
      }
    }
  }

  // sint32 fork_load_high = 19;
  if (this->_internal_fork_load_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(19, this->_internal_fork_load_high(), target);
  }

  // sint32 fork_noload_back_high = 20;
  if (this->_internal_fork_noload_back_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(20, this->_internal_fork_noload_back_high(), target);
  }

  // sint32 shelf_num = 21;
  if (this->_internal_shelf_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(21, this->_internal_shelf_num(), target);
  }

  // sint32 layer_num = 22;
  if (this->_internal_layer_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(22, this->_internal_layer_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.AgvParam)
  return target;
}

size_t AgvParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.AgvParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.AgvParam.opto_elec opto_elec_pos = 16;
  total_size += 2UL * this->_internal_opto_elec_pos_size();
  for (const auto& msg : this->_impl_.opto_elec_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .agv_map.Protection> protection = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_protection_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >::const_iterator
      it = this->_internal_protection().begin();
      it != this->_internal_protection().end(); ++it) {
    total_size += AgvParam_ProtectionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Reflector> reflector = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reflector_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >::const_iterator
      it = this->_internal_reflector().begin();
      it != this->_internal_reflector().end(); ++it) {
    total_size += AgvParam_ReflectorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string agv_subtype = 1;
  if (!this->_internal_agv_subtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agv_subtype());
  }

  // .agv_map.Coord id_pos = 14;
  if (this->_internal_has_id_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_pos_);
  }

  // .agv_map.Coord pallet_pos = 15;
  if (this->_internal_has_pallet_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pallet_pos_);
  }

  // int32 body_Width = 2;
  if (this->_internal_body_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_body_width());
  }

  // int32 body_Length = 3;
  if (this->_internal_body_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_body_length());
  }

  // int32 body_High = 4;
  if (this->_internal_body_high() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_body_high());
  }

  // int32 wheel_base = 5;
  if (this->_internal_wheel_base() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wheel_base());
  }

  // int32 rotate_radius = 6;
  if (this->_internal_rotate_radius() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rotate_radius());
  }

  // int32 p2head = 7;
  if (this->_internal_p2head() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p2head());
  }

  // int32 p2tail = 8;
  if (this->_internal_p2tail() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p2tail());
  }

  // int32 p2nav = 9;
  if (this->_internal_p2nav() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p2nav());
  }

  // sint32 fork_min = 10;
  if (this->_internal_fork_min() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_fork_min());
  }

  // sint32 fork_max = 11;
  if (this->_internal_fork_max() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_fork_max());
  }

  // sint32 fork_noload_high = 13;
  if (this->_internal_fork_noload_high() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_fork_noload_high());
  }

  // sint32 fork_load_high = 19;
  if (this->_internal_fork_load_high() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_fork_load_high());
  }

  // sint32 fork_noload_back_high = 20;
  if (this->_internal_fork_noload_back_high() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_fork_noload_back_high());
  }

  // sint32 shelf_num = 21;
  if (this->_internal_shelf_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_shelf_num());
  }

  // sint32 layer_num = 22;
  if (this->_internal_layer_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_layer_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgvParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgvParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgvParam::GetClassData() const { return &_class_data_; }


void AgvParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgvParam*>(&to_msg);
  auto& from = static_cast<const AgvParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.AgvParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.opto_elec_pos_.MergeFrom(from._impl_.opto_elec_pos_);
  _this->_impl_.protection_.MergeFrom(from._impl_.protection_);
  _this->_impl_.reflector_.MergeFrom(from._impl_.reflector_);
  if (!from._internal_agv_subtype().empty()) {
    _this->_internal_set_agv_subtype(from._internal_agv_subtype());
  }
  if (from._internal_has_id_pos()) {
    _this->_internal_mutable_id_pos()->::agv_map::Coord::MergeFrom(
        from._internal_id_pos());
  }
  if (from._internal_has_pallet_pos()) {
    _this->_internal_mutable_pallet_pos()->::agv_map::Coord::MergeFrom(
        from._internal_pallet_pos());
  }
  if (from._internal_body_width() != 0) {
    _this->_internal_set_body_width(from._internal_body_width());
  }
  if (from._internal_body_length() != 0) {
    _this->_internal_set_body_length(from._internal_body_length());
  }
  if (from._internal_body_high() != 0) {
    _this->_internal_set_body_high(from._internal_body_high());
  }
  if (from._internal_wheel_base() != 0) {
    _this->_internal_set_wheel_base(from._internal_wheel_base());
  }
  if (from._internal_rotate_radius() != 0) {
    _this->_internal_set_rotate_radius(from._internal_rotate_radius());
  }
  if (from._internal_p2head() != 0) {
    _this->_internal_set_p2head(from._internal_p2head());
  }
  if (from._internal_p2tail() != 0) {
    _this->_internal_set_p2tail(from._internal_p2tail());
  }
  if (from._internal_p2nav() != 0) {
    _this->_internal_set_p2nav(from._internal_p2nav());
  }
  if (from._internal_fork_min() != 0) {
    _this->_internal_set_fork_min(from._internal_fork_min());
  }
  if (from._internal_fork_max() != 0) {
    _this->_internal_set_fork_max(from._internal_fork_max());
  }
  if (from._internal_fork_noload_high() != 0) {
    _this->_internal_set_fork_noload_high(from._internal_fork_noload_high());
  }
  if (from._internal_fork_load_high() != 0) {
    _this->_internal_set_fork_load_high(from._internal_fork_load_high());
  }
  if (from._internal_fork_noload_back_high() != 0) {
    _this->_internal_set_fork_noload_back_high(from._internal_fork_noload_back_high());
  }
  if (from._internal_shelf_num() != 0) {
    _this->_internal_set_shelf_num(from._internal_shelf_num());
  }
  if (from._internal_layer_num() != 0) {
    _this->_internal_set_layer_num(from._internal_layer_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgvParam::CopyFrom(const AgvParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.AgvParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvParam::IsInitialized() const {
  return true;
}

void AgvParam::InternalSwap(AgvParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.opto_elec_pos_.InternalSwap(&other->_impl_.opto_elec_pos_);
  _impl_.protection_.InternalSwap(&other->_impl_.protection_);
  _impl_.reflector_.InternalSwap(&other->_impl_.reflector_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agv_subtype_, lhs_arena,
      &other->_impl_.agv_subtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvParam, _impl_.layer_num_)
      + sizeof(AgvParam::_impl_.layer_num_)
      - PROTOBUF_FIELD_OFFSET(AgvParam, _impl_.id_pos_)>(
          reinterpret_cast<char*>(&_impl_.id_pos_),
          reinterpret_cast<char*>(&other->_impl_.id_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[69]);
}

// ===================================================================

class Protection_Mode::_Internal {
 public:
  static const ::agv_map::Protection_Polygon& area1(const Protection_Mode* msg);
  static const ::agv_map::Protection_Polygon& area2(const Protection_Mode* msg);
  static const ::agv_map::Protection_Polygon& area3(const Protection_Mode* msg);
};

const ::agv_map::Protection_Polygon&
Protection_Mode::_Internal::area1(const Protection_Mode* msg) {
  return *msg->_impl_.area1_;
}
const ::agv_map::Protection_Polygon&
Protection_Mode::_Internal::area2(const Protection_Mode* msg) {
  return *msg->_impl_.area2_;
}
const ::agv_map::Protection_Polygon&
Protection_Mode::_Internal::area3(const Protection_Mode* msg) {
  return *msg->_impl_.area3_;
}
Protection_Mode::Protection_Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Protection.Mode)
}
Protection_Mode::Protection_Mode(const Protection_Mode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Protection_Mode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.area1_){nullptr}
    , decltype(_impl_.area2_){nullptr}
    , decltype(_impl_.area3_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_area1()) {
    _this->_impl_.area1_ = new ::agv_map::Protection_Polygon(*from._impl_.area1_);
  }
  if (from._internal_has_area2()) {
    _this->_impl_.area2_ = new ::agv_map::Protection_Polygon(*from._impl_.area2_);
  }
  if (from._internal_has_area3()) {
    _this->_impl_.area3_ = new ::agv_map::Protection_Polygon(*from._impl_.area3_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:agv_map.Protection.Mode)
}

inline void Protection_Mode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.area1_){nullptr}
    , decltype(_impl_.area2_){nullptr}
    , decltype(_impl_.area3_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Protection_Mode::~Protection_Mode() {
  // @@protoc_insertion_point(destructor:agv_map.Protection.Mode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Protection_Mode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.area1_;
  if (this != internal_default_instance()) delete _impl_.area2_;
  if (this != internal_default_instance()) delete _impl_.area3_;
}

void Protection_Mode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Protection_Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Protection.Mode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.area1_ != nullptr) {
    delete _impl_.area1_;
  }
  _impl_.area1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.area2_ != nullptr) {
    delete _impl_.area2_;
  }
  _impl_.area2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.area3_ != nullptr) {
    delete _impl_.area3_;
  }
  _impl_.area3_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Protection_Mode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Protection.Polygon area1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_area1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Protection.Polygon area2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_area2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Protection.Polygon area3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_area3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Protection_Mode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Protection.Mode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .agv_map.Protection.Polygon area1 = 2;
  if (this->_internal_has_area1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::area1(this),
        _Internal::area1(this).GetCachedSize(), target, stream);
  }

  // .agv_map.Protection.Polygon area2 = 3;
  if (this->_internal_has_area2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::area2(this),
        _Internal::area2(this).GetCachedSize(), target, stream);
  }

  // .agv_map.Protection.Polygon area3 = 4;
  if (this->_internal_has_area3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::area3(this),
        _Internal::area3(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Protection.Mode)
  return target;
}

size_t Protection_Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Protection.Mode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agv_map.Protection.Polygon area1 = 2;
  if (this->_internal_has_area1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.area1_);
  }

  // .agv_map.Protection.Polygon area2 = 3;
  if (this->_internal_has_area2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.area2_);
  }

  // .agv_map.Protection.Polygon area3 = 4;
  if (this->_internal_has_area3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.area3_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Protection_Mode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Protection_Mode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Protection_Mode::GetClassData() const { return &_class_data_; }


void Protection_Mode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Protection_Mode*>(&to_msg);
  auto& from = static_cast<const Protection_Mode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Protection.Mode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_area1()) {
    _this->_internal_mutable_area1()->::agv_map::Protection_Polygon::MergeFrom(
        from._internal_area1());
  }
  if (from._internal_has_area2()) {
    _this->_internal_mutable_area2()->::agv_map::Protection_Polygon::MergeFrom(
        from._internal_area2());
  }
  if (from._internal_has_area3()) {
    _this->_internal_mutable_area3()->::agv_map::Protection_Polygon::MergeFrom(
        from._internal_area3());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Protection_Mode::CopyFrom(const Protection_Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Protection.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protection_Mode::IsInitialized() const {
  return true;
}

void Protection_Mode::InternalSwap(Protection_Mode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Protection_Mode, _impl_.id_)
      + sizeof(Protection_Mode::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Protection_Mode, _impl_.area1_)>(
          reinterpret_cast<char*>(&_impl_.area1_),
          reinterpret_cast<char*>(&other->_impl_.area1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Protection_Mode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[70]);
}

// ===================================================================

class Protection_Polygon::_Internal {
 public:
};

Protection_Polygon::Protection_Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Protection.Polygon)
}
Protection_Polygon::Protection_Polygon(const Protection_Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Protection_Polygon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coord_){from._impl_.coord_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:agv_map.Protection.Polygon)
}

inline void Protection_Polygon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coord_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Protection_Polygon::~Protection_Polygon() {
  // @@protoc_insertion_point(destructor:agv_map.Protection.Polygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Protection_Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coord_.~RepeatedPtrField();
}

void Protection_Polygon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Protection_Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Protection.Polygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coord_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Protection_Polygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .agv_map.Coord coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coord(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Protection_Polygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Protection.Polygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agv_map.Coord coord = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coord_size()); i < n; i++) {
    const auto& repfield = this->_internal_coord(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Protection.Polygon)
  return target;
}

size_t Protection_Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Protection.Polygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Coord coord = 1;
  total_size += 1UL * this->_internal_coord_size();
  for (const auto& msg : this->_impl_.coord_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Protection_Polygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Protection_Polygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Protection_Polygon::GetClassData() const { return &_class_data_; }


void Protection_Polygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Protection_Polygon*>(&to_msg);
  auto& from = static_cast<const Protection_Polygon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Protection.Polygon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coord_.MergeFrom(from._impl_.coord_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Protection_Polygon::CopyFrom(const Protection_Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Protection.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protection_Polygon::IsInitialized() const {
  return true;
}

void Protection_Polygon::InternalSwap(Protection_Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coord_.InternalSwap(&other->_impl_.coord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Protection_Polygon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[71]);
}

// ===================================================================

class Protection::_Internal {
 public:
  static const ::agv_map::Position& pos(const Protection* msg);
};

const ::agv_map::Position&
Protection::_Internal::pos(const Protection* msg) {
  return *msg->_impl_.pos_;
}
Protection::Protection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Protection)
}
Protection::Protection(const Protection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Protection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){from._impl_.mode_}
    , decltype(_impl_.dev_type_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.scan_height_){}
    , decltype(_impl_.pos_up_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_type().empty()) {
    _this->_impl_.dev_type_.Set(from._internal_dev_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::agv_map::Position(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.scan_height_, &from._impl_.scan_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pos_up_) -
    reinterpret_cast<char*>(&_impl_.scan_height_)) + sizeof(_impl_.pos_up_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Protection)
}

inline void Protection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){arena}
    , decltype(_impl_.dev_type_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.scan_height_){0}
    , decltype(_impl_.pos_up_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Protection::~Protection() {
  // @@protoc_insertion_point(destructor:agv_map.Protection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Protection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mode_.~RepeatedPtrField();
  _impl_.dev_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void Protection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Protection::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Protection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_.Clear();
  _impl_.dev_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  ::memset(&_impl_.scan_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pos_up_) -
      reinterpret_cast<char*>(&_impl_.scan_height_)) + sizeof(_impl_.pos_up_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Protection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 scan_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scan_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dev_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dev_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Protection.dev_type"));
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Position pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 pos_up = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pos_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .agv_map.Protection.Mode mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Protection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Protection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scan_height = 1;
  if (this->_internal_scan_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_scan_height(), target);
  }

  // string dev_type = 2;
  if (!this->_internal_dev_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_type().data(), static_cast<int>(this->_internal_dev_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Protection.dev_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dev_type(), target);
  }

  // .agv_map.Position pos = 3;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // sint32 pos_up = 4;
  if (this->_internal_pos_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_pos_up(), target);
  }

  // repeated .agv_map.Protection.Mode mode = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mode_size()); i < n; i++) {
    const auto& repfield = this->_internal_mode(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Protection)
  return target;
}

size_t Protection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Protection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Protection.Mode mode = 5;
  total_size += 1UL * this->_internal_mode_size();
  for (const auto& msg : this->_impl_.mode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dev_type = 2;
  if (!this->_internal_dev_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_type());
  }

  // .agv_map.Position pos = 3;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // int32 scan_height = 1;
  if (this->_internal_scan_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scan_height());
  }

  // sint32 pos_up = 4;
  if (this->_internal_pos_up() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_pos_up());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Protection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Protection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Protection::GetClassData() const { return &_class_data_; }


void Protection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Protection*>(&to_msg);
  auto& from = static_cast<const Protection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Protection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mode_.MergeFrom(from._impl_.mode_);
  if (!from._internal_dev_type().empty()) {
    _this->_internal_set_dev_type(from._internal_dev_type());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::agv_map::Position::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_scan_height() != 0) {
    _this->_internal_set_scan_height(from._internal_scan_height());
  }
  if (from._internal_pos_up() != 0) {
    _this->_internal_set_pos_up(from._internal_pos_up());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Protection::CopyFrom(const Protection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Protection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protection::IsInitialized() const {
  return true;
}

void Protection::InternalSwap(Protection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mode_.InternalSwap(&other->_impl_.mode_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_type_, lhs_arena,
      &other->_impl_.dev_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Protection, _impl_.pos_up_)
      + sizeof(Protection::_impl_.pos_up_)
      - PROTOBUF_FIELD_OFFSET(Protection, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Protection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[72]);
}

// ===================================================================

ReplaceBatteryStation_SpaceEntry_DoNotUse::ReplaceBatteryStation_SpaceEntry_DoNotUse() {}
ReplaceBatteryStation_SpaceEntry_DoNotUse::ReplaceBatteryStation_SpaceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ReplaceBatteryStation_SpaceEntry_DoNotUse::MergeFrom(const ReplaceBatteryStation_SpaceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ReplaceBatteryStation_SpaceEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[73]);
}

// ===================================================================

class ReplaceBatteryStation_Space::_Internal {
 public:
};

ReplaceBatteryStation_Space::ReplaceBatteryStation_Space(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.ReplaceBatteryStation.Space)
}
ReplaceBatteryStation_Space::ReplaceBatteryStation_Space(const ReplaceBatteryStation_Space& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplaceBatteryStation_Space* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pos_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.pos_));
  // @@protoc_insertion_point(copy_constructor:agv_map.ReplaceBatteryStation.Space)
}

inline void ReplaceBatteryStation_Space::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.pos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReplaceBatteryStation_Space::~ReplaceBatteryStation_Space() {
  // @@protoc_insertion_point(destructor:agv_map.ReplaceBatteryStation.Space)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplaceBatteryStation_Space::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReplaceBatteryStation_Space::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplaceBatteryStation_Space::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.ReplaceBatteryStation.Space)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pos_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplaceBatteryStation_Space::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplaceBatteryStation_Space::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.ReplaceBatteryStation.Space)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // sint32 pos = 3;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.ReplaceBatteryStation.Space)
  return target;
}

size_t ReplaceBatteryStation_Space::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.ReplaceBatteryStation.Space)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // sint32 pos = 3;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplaceBatteryStation_Space::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplaceBatteryStation_Space::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplaceBatteryStation_Space::GetClassData() const { return &_class_data_; }


void ReplaceBatteryStation_Space::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplaceBatteryStation_Space*>(&to_msg);
  auto& from = static_cast<const ReplaceBatteryStation_Space&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.ReplaceBatteryStation.Space)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplaceBatteryStation_Space::CopyFrom(const ReplaceBatteryStation_Space& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.ReplaceBatteryStation.Space)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceBatteryStation_Space::IsInitialized() const {
  return true;
}

void ReplaceBatteryStation_Space::InternalSwap(ReplaceBatteryStation_Space* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplaceBatteryStation_Space, _impl_.pos_)
      + sizeof(ReplaceBatteryStation_Space::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(ReplaceBatteryStation_Space, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplaceBatteryStation_Space::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[74]);
}

// ===================================================================

class ReplaceBatteryStation::_Internal {
 public:
};

ReplaceBatteryStation::ReplaceBatteryStation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ReplaceBatteryStation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.ReplaceBatteryStation)
}
ReplaceBatteryStation::ReplaceBatteryStation(const ReplaceBatteryStation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplaceBatteryStation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.space_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.dist_p1_p2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.space_.MergeFrom(from._impl_.space_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dist_p1_p2_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.dist_p1_p2_));
  // @@protoc_insertion_point(copy_constructor:agv_map.ReplaceBatteryStation)
}

inline void ReplaceBatteryStation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.space_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.dist_p1_p2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReplaceBatteryStation::~ReplaceBatteryStation() {
  // @@protoc_insertion_point(destructor:agv_map.ReplaceBatteryStation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ReplaceBatteryStation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.space_.Destruct();
  _impl_.space_.~MapField();
}

void ReplaceBatteryStation::ArenaDtor(void* object) {
  ReplaceBatteryStation* _this = reinterpret_cast< ReplaceBatteryStation* >(object);
  _this->_impl_.space_.Destruct();
}
void ReplaceBatteryStation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplaceBatteryStation::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.ReplaceBatteryStation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.space_.Clear();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dist_p1_p2_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.dist_p1_p2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplaceBatteryStation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dist_p1_p2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dist_p1_p2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .agv_map.ReplaceBatteryStation.Space> space = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.space_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplaceBatteryStation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.ReplaceBatteryStation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 dist_p1_p2 = 2;
  if (this->_internal_dist_p1_p2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_dist_p1_p2(), target);
  }

  // map<int32, .agv_map.ReplaceBatteryStation.Space> space = 3;
  if (!this->_internal_space().empty()) {
    using MapType = ::_pb::Map<int32_t, ::agv_map::ReplaceBatteryStation_Space>;
    using WireHelper = ReplaceBatteryStation_SpaceEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_space();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.ReplaceBatteryStation)
  return target;
}

size_t ReplaceBatteryStation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.ReplaceBatteryStation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .agv_map.ReplaceBatteryStation.Space> space = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_space_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >::const_iterator
      it = this->_internal_space().begin();
      it != this->_internal_space().end(); ++it) {
    total_size += ReplaceBatteryStation_SpaceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 dist_p1_p2 = 2;
  if (this->_internal_dist_p1_p2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dist_p1_p2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplaceBatteryStation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplaceBatteryStation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplaceBatteryStation::GetClassData() const { return &_class_data_; }


void ReplaceBatteryStation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplaceBatteryStation*>(&to_msg);
  auto& from = static_cast<const ReplaceBatteryStation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.ReplaceBatteryStation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.space_.MergeFrom(from._impl_.space_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_dist_p1_p2() != 0) {
    _this->_internal_set_dist_p1_p2(from._internal_dist_p1_p2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplaceBatteryStation::CopyFrom(const ReplaceBatteryStation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.ReplaceBatteryStation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceBatteryStation::IsInitialized() const {
  return true;
}

void ReplaceBatteryStation::InternalSwap(ReplaceBatteryStation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.space_.InternalSwap(&other->_impl_.space_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplaceBatteryStation, _impl_.dist_p1_p2_)
      + sizeof(ReplaceBatteryStation::_impl_.dist_p1_p2_)
      - PROTOBUF_FIELD_OFFSET(ReplaceBatteryStation, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplaceBatteryStation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[75]);
}

// ===================================================================

class Reflector::_Internal {
 public:
  static const ::agv_map::Coord& coord(const Reflector* msg);
};

const ::agv_map::Coord&
Reflector::_Internal::coord(const Reflector* msg) {
  return *msg->_impl_.coord_;
}
Reflector::Reflector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Reflector)
}
Reflector::Reflector(const Reflector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Reflector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coord_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.area_){}
    , decltype(_impl_.ap_area_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coord()) {
    _this->_impl_.coord_ = new ::agv_map::Coord(*from._impl_.coord_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ap_area_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ap_area_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Reflector)
}

inline void Reflector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coord_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.area_){0}
    , decltype(_impl_.ap_area_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Reflector::~Reflector() {
  // @@protoc_insertion_point(destructor:agv_map.Reflector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reflector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.coord_;
}

void Reflector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reflector::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Reflector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.coord_ != nullptr) {
    delete _impl_.coord_;
  }
  _impl_.coord_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ap_area_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ap_area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reflector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .agv_map.Coord coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ap_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ap_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Reflector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Reflector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .agv_map.Coord coord = 2;
  if (this->_internal_has_coord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coord(this),
        _Internal::coord(this).GetCachedSize(), target, stream);
  }

  // int32 area = 3;
  if (this->_internal_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_area(), target);
  }

  // int32 ap_area = 4;
  if (this->_internal_ap_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ap_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Reflector)
  return target;
}

size_t Reflector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Reflector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agv_map.Coord coord = 2;
  if (this->_internal_has_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 area = 3;
  if (this->_internal_area() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_area());
  }

  // int32 ap_area = 4;
  if (this->_internal_ap_area() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ap_area());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reflector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reflector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reflector::GetClassData() const { return &_class_data_; }


void Reflector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reflector*>(&to_msg);
  auto& from = static_cast<const Reflector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Reflector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_coord()) {
    _this->_internal_mutable_coord()->::agv_map::Coord::MergeFrom(
        from._internal_coord());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_area() != 0) {
    _this->_internal_set_area(from._internal_area());
  }
  if (from._internal_ap_area() != 0) {
    _this->_internal_set_ap_area(from._internal_ap_area());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reflector::CopyFrom(const Reflector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Reflector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reflector::IsInitialized() const {
  return true;
}

void Reflector::InternalSwap(Reflector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reflector, _impl_.ap_area_)
      + sizeof(Reflector::_impl_.ap_area_)
      - PROTOBUF_FIELD_OFFSET(Reflector, _impl_.coord_)>(
          reinterpret_cast<char*>(&_impl_.coord_),
          reinterpret_cast<char*>(&other->_impl_.coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reflector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[76]);
}

// ===================================================================

class Pallet::_Internal {
 public:
};

Pallet::Pallet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:agv_map.Pallet)
}
Pallet::Pallet(const Pallet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pallet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.describe_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.high_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_describe().empty()) {
    _this->_impl_.describe_.Set(from._internal_describe(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.high_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.high_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Pallet)
}

inline void Pallet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.describe_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.high_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pallet::~Pallet() {
  // @@protoc_insertion_point(destructor:agv_map.Pallet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pallet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.describe_.Destroy();
  _impl_.name_.Destroy();
}

void Pallet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pallet::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Pallet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.describe_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.high_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.high_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pallet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string describe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_describe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Pallet.describe"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.Pallet.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 high = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pallet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Pallet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_describe().data(), static_cast<int>(this->_internal_describe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Pallet.describe");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_describe(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Pallet.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 length = 4;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_length(), target);
  }

  // int32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_width(), target);
  }

  // int32 high = 6;
  if (this->_internal_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Pallet)
  return target;
}

size_t Pallet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Pallet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_describe());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 length = 4;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  // int32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 high = 6;
  if (this->_internal_high() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_high());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pallet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pallet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pallet::GetClassData() const { return &_class_data_; }


void Pallet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pallet*>(&to_msg);
  auto& from = static_cast<const Pallet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Pallet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_describe().empty()) {
    _this->_internal_set_describe(from._internal_describe());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_high() != 0) {
    _this->_internal_set_high(from._internal_high());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pallet::CopyFrom(const Pallet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Pallet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pallet::IsInitialized() const {
  return true;
}

void Pallet::InternalSwap(Pallet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.describe_, lhs_arena,
      &other->_impl_.describe_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pallet, _impl_.high_)
      + sizeof(Pallet::_impl_.high_)
      - PROTOBUF_FIELD_OFFSET(Pallet, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pallet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[77]);
}

// ===================================================================

DefautForkSet_PalletLoadHighsEntry_DoNotUse::DefautForkSet_PalletLoadHighsEntry_DoNotUse() {}
DefautForkSet_PalletLoadHighsEntry_DoNotUse::DefautForkSet_PalletLoadHighsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DefautForkSet_PalletLoadHighsEntry_DoNotUse::MergeFrom(const DefautForkSet_PalletLoadHighsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DefautForkSet_PalletLoadHighsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[78]);
}

// ===================================================================

class DefautForkSet::_Internal {
 public:
};

DefautForkSet::DefautForkSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DefautForkSet::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:agv_map.DefautForkSet)
}
DefautForkSet::DefautForkSet(const DefautForkSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DefautForkSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.pallet_load_highs_)*/{}
    , decltype(_impl_.agv_type_){}
    , decltype(_impl_.pallet_name_){}
    , decltype(_impl_.load_high_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pallet_load_highs_.MergeFrom(from._impl_.pallet_load_highs_);
  _impl_.agv_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agv_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agv_type().empty()) {
    _this->_impl_.agv_type_.Set(from._internal_agv_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pallet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pallet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pallet_name().empty()) {
    _this->_impl_.pallet_name_.Set(from._internal_pallet_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.load_high_ = from._impl_.load_high_;
  // @@protoc_insertion_point(copy_constructor:agv_map.DefautForkSet)
}

inline void DefautForkSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.pallet_load_highs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.agv_type_){}
    , decltype(_impl_.pallet_name_){}
    , decltype(_impl_.load_high_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.agv_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agv_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pallet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pallet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DefautForkSet::~DefautForkSet() {
  // @@protoc_insertion_point(destructor:agv_map.DefautForkSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DefautForkSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pallet_load_highs_.Destruct();
  _impl_.pallet_load_highs_.~MapField();
  _impl_.agv_type_.Destroy();
  _impl_.pallet_name_.Destroy();
}

void DefautForkSet::ArenaDtor(void* object) {
  DefautForkSet* _this = reinterpret_cast< DefautForkSet* >(object);
  _this->_impl_.pallet_load_highs_.Destruct();
}
void DefautForkSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DefautForkSet::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.DefautForkSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pallet_load_highs_.Clear();
  _impl_.agv_type_.ClearToEmpty();
  _impl_.pallet_name_.ClearToEmpty();
  _impl_.load_high_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefautForkSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agv_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agv_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.DefautForkSet.agv_type"));
        } else
          goto handle_unusual;
        continue;
      // string pallet_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pallet_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "agv_map.DefautForkSet.pallet_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 load_high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.load_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> pallet_load_highs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.pallet_load_highs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DefautForkSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.DefautForkSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agv_type = 1;
  if (!this->_internal_agv_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agv_type().data(), static_cast<int>(this->_internal_agv_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.DefautForkSet.agv_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agv_type(), target);
  }

  // string pallet_name = 2;
  if (!this->_internal_pallet_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pallet_name().data(), static_cast<int>(this->_internal_pallet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.DefautForkSet.pallet_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pallet_name(), target);
  }

  // int32 load_high = 3;
  if (this->_internal_load_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_load_high(), target);
  }

  // map<int32, int32> pallet_load_highs = 4;
  if (!this->_internal_pallet_load_highs().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = DefautForkSet_PalletLoadHighsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_pallet_load_highs();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.DefautForkSet)
  return target;
}

size_t DefautForkSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.DefautForkSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> pallet_load_highs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pallet_load_highs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_pallet_load_highs().begin();
      it != this->_internal_pallet_load_highs().end(); ++it) {
    total_size += DefautForkSet_PalletLoadHighsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string agv_type = 1;
  if (!this->_internal_agv_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agv_type());
  }

  // string pallet_name = 2;
  if (!this->_internal_pallet_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pallet_name());
  }

  // int32 load_high = 3;
  if (this->_internal_load_high() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_load_high());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefautForkSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DefautForkSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefautForkSet::GetClassData() const { return &_class_data_; }


void DefautForkSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DefautForkSet*>(&to_msg);
  auto& from = static_cast<const DefautForkSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agv_map.DefautForkSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pallet_load_highs_.MergeFrom(from._impl_.pallet_load_highs_);
  if (!from._internal_agv_type().empty()) {
    _this->_internal_set_agv_type(from._internal_agv_type());
  }
  if (!from._internal_pallet_name().empty()) {
    _this->_internal_set_pallet_name(from._internal_pallet_name());
  }
  if (from._internal_load_high() != 0) {
    _this->_internal_set_load_high(from._internal_load_high());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefautForkSet::CopyFrom(const DefautForkSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.DefautForkSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefautForkSet::IsInitialized() const {
  return true;
}

void DefautForkSet::InternalSwap(DefautForkSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pallet_load_highs_.InternalSwap(&other->_impl_.pallet_load_highs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agv_type_, lhs_arena,
      &other->_impl_.agv_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pallet_name_, lhs_arena,
      &other->_impl_.pallet_name_, rhs_arena
  );
  swap(_impl_.load_high_, other->_impl_.load_high_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefautForkSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_agv_5fmap_2eproto_getter, &descriptor_table_agv_5fmap_2eproto_once,
      file_level_metadata_agv_5fmap_2eproto[79]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace agv_map
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::MAP_ARR_AgvparamEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::MAP_ARR_AgvparamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::MAP_ARR_AgvparamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::MAP_ARR_PalletEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::MAP_ARR_PalletEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::MAP_ARR_PalletEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::MAP_ARR*
Arena::CreateMaybeMessage< ::agv_map::MAP_ARR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::MAP_ARR >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_NodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Map_NodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_NodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_SegmentEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Map_SegmentEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_SegmentEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_AreaEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Map_AreaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_AreaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_LabelEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Map_LabelEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_LabelEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_ShelfEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Map_ShelfEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_ShelfEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map*
Arena::CreateMaybeMessage< ::agv_map::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Conf_AgvIdsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Conf_AgvIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Conf_AgvIdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Conf_param*
Arena::CreateMaybeMessage< ::agv_map::Conf_param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Conf_param >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Conf*
Arena::CreateMaybeMessage< ::agv_map::Conf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Conf >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::sceneData_ParamMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::sceneData_ParamMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::sceneData_ParamMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::sceneData_data_ParamMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::sceneData_data_ParamMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::sceneData_data_ParamMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::sceneData_data_IndexMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::sceneData_data_IndexMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::sceneData_data_IndexMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::sceneData_data*
Arena::CreateMaybeMessage< ::agv_map::sceneData_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::sceneData_data >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::sceneData*
Arena::CreateMaybeMessage< ::agv_map::sceneData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::sceneData >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::ShelfCofig_GetHighEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::ShelfCofig_GetHighEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::ShelfCofig_GetHighEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::ShelfCofig_PutHighEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::ShelfCofig_PutHighEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::ShelfCofig_PutHighEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::ShelfCofig*
Arena::CreateMaybeMessage< ::agv_map::ShelfCofig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::ShelfCofig >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Node_Basic_AgvTypeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Node_Basic_AgvTypeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Node_Basic_AgvTypeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Node_Basic*
Arena::CreateMaybeMessage< ::agv_map::Node_Basic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Node_Basic >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Node_Sim_param*
Arena::CreateMaybeMessage< ::agv_map::Node_Sim_param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Node_Sim_param >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Node*
Arena::CreateMaybeMessage< ::agv_map::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Edge_Basic*
Arena::CreateMaybeMessage< ::agv_map::Edge_Basic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Edge_Basic >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Edge_Arc*
Arena::CreateMaybeMessage< ::agv_map::Edge_Arc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Edge_Arc >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Edge*
Arena::CreateMaybeMessage< ::agv_map::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area_ParamEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Area_ParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area_ParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area_AgvNumEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Area_AgvNumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area_AgvNumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area_Basic*
Arena::CreateMaybeMessage< ::agv_map::Area_Basic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area_Basic >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area*
Arena::CreateMaybeMessage< ::agv_map::Area >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Coord*
Arena::CreateMaybeMessage< ::agv_map::Coord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Coord >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Position*
Arena::CreateMaybeMessage< ::agv_map::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Segment*
Arena::CreateMaybeMessage< ::agv_map::Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_AgvDescEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_AgvDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_AgvDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_CtlDescEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_CtlDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_CtlDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_AvoDescEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_AvoDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_AvoDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_RutDescEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_RutDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_RutDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_ActionDescEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_ActionDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_ActionDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_AreaDescEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_AreaDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_AreaDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_ParamTmplEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_ParamTmplEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_ParamTmplEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_ActionTmplEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_ActionTmplEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_ActionTmplEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_TaskActionTmplEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_TaskActionTmplEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_TaskActionTmplEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_ParamTmpl_paramTmplInstance*
Arena::CreateMaybeMessage< ::agv_map::Describe_ParamTmpl_paramTmplInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_ParamTmpl_paramTmplInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_ParamTmpl*
Arena::CreateMaybeMessage< ::agv_map::Describe_ParamTmpl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_ParamTmpl >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_actionTmpl_action*
Arena::CreateMaybeMessage< ::agv_map::Describe_actionTmpl_action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_actionTmpl_action >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_actionTmpl_actTmplInstance*
Arena::CreateMaybeMessage< ::agv_map::Describe_actionTmpl_actTmplInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_actionTmpl_actTmplInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_actionTmpl*
Arena::CreateMaybeMessage< ::agv_map::Describe_actionTmpl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_actionTmpl >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_taskActionTmpl_action*
Arena::CreateMaybeMessage< ::agv_map::Describe_taskActionTmpl_action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_taskActionTmpl_action >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_taskActionTmpl_actTmplInstance*
Arena::CreateMaybeMessage< ::agv_map::Describe_taskActionTmpl_actTmplInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_taskActionTmpl_actTmplInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_taskActionTmpl*
Arena::CreateMaybeMessage< ::agv_map::Describe_taskActionTmpl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_taskActionTmpl >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_dataDesc_ParamEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::Describe_dataDesc_ParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_dataDesc_ParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_dataDesc*
Arena::CreateMaybeMessage< ::agv_map::Describe_dataDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_dataDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe*
Arena::CreateMaybeMessage< ::agv_map::Describe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Store_offset*
Arena::CreateMaybeMessage< ::agv_map::Store_offset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Store_offset >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::store_offset_by_layer*
Arena::CreateMaybeMessage< ::agv_map::store_offset_by_layer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::store_offset_by_layer >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Label*
Arena::CreateMaybeMessage< ::agv_map::Label >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::AgvParam_ProtectionEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::AgvParam_ProtectionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::AgvParam_ProtectionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::AgvParam_ReflectorEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::AgvParam_ReflectorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::AgvParam_ReflectorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::AgvParam_opto_elec*
Arena::CreateMaybeMessage< ::agv_map::AgvParam_opto_elec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::AgvParam_opto_elec >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::AgvParam*
Arena::CreateMaybeMessage< ::agv_map::AgvParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::AgvParam >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Protection_Mode*
Arena::CreateMaybeMessage< ::agv_map::Protection_Mode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Protection_Mode >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Protection_Polygon*
Arena::CreateMaybeMessage< ::agv_map::Protection_Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Protection_Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Protection*
Arena::CreateMaybeMessage< ::agv_map::Protection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Protection >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::ReplaceBatteryStation_Space*
Arena::CreateMaybeMessage< ::agv_map::ReplaceBatteryStation_Space >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::ReplaceBatteryStation_Space >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::ReplaceBatteryStation*
Arena::CreateMaybeMessage< ::agv_map::ReplaceBatteryStation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::ReplaceBatteryStation >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Reflector*
Arena::CreateMaybeMessage< ::agv_map::Reflector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Reflector >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Pallet*
Arena::CreateMaybeMessage< ::agv_map::Pallet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Pallet >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::DefautForkSet*
Arena::CreateMaybeMessage< ::agv_map::DefautForkSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::DefautForkSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
