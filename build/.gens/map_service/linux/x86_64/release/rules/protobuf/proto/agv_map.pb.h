// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agv_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_agv_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_agv_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_agv_5fmap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agv_5fmap_2eproto;
namespace agv_map {
class AgvParam;
struct AgvParamDefaultTypeInternal;
extern AgvParamDefaultTypeInternal _AgvParam_default_instance_;
class AgvParam_ProtectionEntry_DoNotUse;
struct AgvParam_ProtectionEntry_DoNotUseDefaultTypeInternal;
extern AgvParam_ProtectionEntry_DoNotUseDefaultTypeInternal _AgvParam_ProtectionEntry_DoNotUse_default_instance_;
class AgvParam_ReflectorEntry_DoNotUse;
struct AgvParam_ReflectorEntry_DoNotUseDefaultTypeInternal;
extern AgvParam_ReflectorEntry_DoNotUseDefaultTypeInternal _AgvParam_ReflectorEntry_DoNotUse_default_instance_;
class AgvParam_opto_elec;
struct AgvParam_opto_elecDefaultTypeInternal;
extern AgvParam_opto_elecDefaultTypeInternal _AgvParam_opto_elec_default_instance_;
class Area;
struct AreaDefaultTypeInternal;
extern AreaDefaultTypeInternal _Area_default_instance_;
class Area_AgvNumEntry_DoNotUse;
struct Area_AgvNumEntry_DoNotUseDefaultTypeInternal;
extern Area_AgvNumEntry_DoNotUseDefaultTypeInternal _Area_AgvNumEntry_DoNotUse_default_instance_;
class Area_Basic;
struct Area_BasicDefaultTypeInternal;
extern Area_BasicDefaultTypeInternal _Area_Basic_default_instance_;
class Area_ParamEntry_DoNotUse;
struct Area_ParamEntry_DoNotUseDefaultTypeInternal;
extern Area_ParamEntry_DoNotUseDefaultTypeInternal _Area_ParamEntry_DoNotUse_default_instance_;
class Conf;
struct ConfDefaultTypeInternal;
extern ConfDefaultTypeInternal _Conf_default_instance_;
class Conf_AgvIdsEntry_DoNotUse;
struct Conf_AgvIdsEntry_DoNotUseDefaultTypeInternal;
extern Conf_AgvIdsEntry_DoNotUseDefaultTypeInternal _Conf_AgvIdsEntry_DoNotUse_default_instance_;
class Conf_param;
struct Conf_paramDefaultTypeInternal;
extern Conf_paramDefaultTypeInternal _Conf_param_default_instance_;
class Coord;
struct CoordDefaultTypeInternal;
extern CoordDefaultTypeInternal _Coord_default_instance_;
class DefautForkSet;
struct DefautForkSetDefaultTypeInternal;
extern DefautForkSetDefaultTypeInternal _DefautForkSet_default_instance_;
class DefautForkSet_PalletLoadHighsEntry_DoNotUse;
struct DefautForkSet_PalletLoadHighsEntry_DoNotUseDefaultTypeInternal;
extern DefautForkSet_PalletLoadHighsEntry_DoNotUseDefaultTypeInternal _DefautForkSet_PalletLoadHighsEntry_DoNotUse_default_instance_;
class Describe;
struct DescribeDefaultTypeInternal;
extern DescribeDefaultTypeInternal _Describe_default_instance_;
class Describe_ActionDescEntry_DoNotUse;
struct Describe_ActionDescEntry_DoNotUseDefaultTypeInternal;
extern Describe_ActionDescEntry_DoNotUseDefaultTypeInternal _Describe_ActionDescEntry_DoNotUse_default_instance_;
class Describe_ActionTmplEntry_DoNotUse;
struct Describe_ActionTmplEntry_DoNotUseDefaultTypeInternal;
extern Describe_ActionTmplEntry_DoNotUseDefaultTypeInternal _Describe_ActionTmplEntry_DoNotUse_default_instance_;
class Describe_AgvDescEntry_DoNotUse;
struct Describe_AgvDescEntry_DoNotUseDefaultTypeInternal;
extern Describe_AgvDescEntry_DoNotUseDefaultTypeInternal _Describe_AgvDescEntry_DoNotUse_default_instance_;
class Describe_AreaDescEntry_DoNotUse;
struct Describe_AreaDescEntry_DoNotUseDefaultTypeInternal;
extern Describe_AreaDescEntry_DoNotUseDefaultTypeInternal _Describe_AreaDescEntry_DoNotUse_default_instance_;
class Describe_AvoDescEntry_DoNotUse;
struct Describe_AvoDescEntry_DoNotUseDefaultTypeInternal;
extern Describe_AvoDescEntry_DoNotUseDefaultTypeInternal _Describe_AvoDescEntry_DoNotUse_default_instance_;
class Describe_CtlDescEntry_DoNotUse;
struct Describe_CtlDescEntry_DoNotUseDefaultTypeInternal;
extern Describe_CtlDescEntry_DoNotUseDefaultTypeInternal _Describe_CtlDescEntry_DoNotUse_default_instance_;
class Describe_ParamTmpl;
struct Describe_ParamTmplDefaultTypeInternal;
extern Describe_ParamTmplDefaultTypeInternal _Describe_ParamTmpl_default_instance_;
class Describe_ParamTmplEntry_DoNotUse;
struct Describe_ParamTmplEntry_DoNotUseDefaultTypeInternal;
extern Describe_ParamTmplEntry_DoNotUseDefaultTypeInternal _Describe_ParamTmplEntry_DoNotUse_default_instance_;
class Describe_ParamTmpl_DataEntry_DoNotUse;
struct Describe_ParamTmpl_DataEntry_DoNotUseDefaultTypeInternal;
extern Describe_ParamTmpl_DataEntry_DoNotUseDefaultTypeInternal _Describe_ParamTmpl_DataEntry_DoNotUse_default_instance_;
class Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse;
struct Describe_ParamTmpl_ParamInstanceListEntry_DoNotUseDefaultTypeInternal;
extern Describe_ParamTmpl_ParamInstanceListEntry_DoNotUseDefaultTypeInternal _Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse_default_instance_;
class Describe_ParamTmpl_paramTmplInstance;
struct Describe_ParamTmpl_paramTmplInstanceDefaultTypeInternal;
extern Describe_ParamTmpl_paramTmplInstanceDefaultTypeInternal _Describe_ParamTmpl_paramTmplInstance_default_instance_;
class Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse;
struct Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUseDefaultTypeInternal;
extern Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUseDefaultTypeInternal _Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse_default_instance_;
class Describe_RutDescEntry_DoNotUse;
struct Describe_RutDescEntry_DoNotUseDefaultTypeInternal;
extern Describe_RutDescEntry_DoNotUseDefaultTypeInternal _Describe_RutDescEntry_DoNotUse_default_instance_;
class Describe_TaskActionTmplEntry_DoNotUse;
struct Describe_TaskActionTmplEntry_DoNotUseDefaultTypeInternal;
extern Describe_TaskActionTmplEntry_DoNotUseDefaultTypeInternal _Describe_TaskActionTmplEntry_DoNotUse_default_instance_;
class Describe_actionTmpl;
struct Describe_actionTmplDefaultTypeInternal;
extern Describe_actionTmplDefaultTypeInternal _Describe_actionTmpl_default_instance_;
class Describe_actionTmpl_ActInstanceListEntry_DoNotUse;
struct Describe_actionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal;
extern Describe_actionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal _Describe_actionTmpl_ActInstanceListEntry_DoNotUse_default_instance_;
class Describe_actionTmpl_actTmplInstance;
struct Describe_actionTmpl_actTmplInstanceDefaultTypeInternal;
extern Describe_actionTmpl_actTmplInstanceDefaultTypeInternal _Describe_actionTmpl_actTmplInstance_default_instance_;
class Describe_actionTmpl_action;
struct Describe_actionTmpl_actionDefaultTypeInternal;
extern Describe_actionTmpl_actionDefaultTypeInternal _Describe_actionTmpl_action_default_instance_;
class Describe_dataDesc;
struct Describe_dataDescDefaultTypeInternal;
extern Describe_dataDescDefaultTypeInternal _Describe_dataDesc_default_instance_;
class Describe_dataDesc_ParamEntry_DoNotUse;
struct Describe_dataDesc_ParamEntry_DoNotUseDefaultTypeInternal;
extern Describe_dataDesc_ParamEntry_DoNotUseDefaultTypeInternal _Describe_dataDesc_ParamEntry_DoNotUse_default_instance_;
class Describe_taskActionTmpl;
struct Describe_taskActionTmplDefaultTypeInternal;
extern Describe_taskActionTmplDefaultTypeInternal _Describe_taskActionTmpl_default_instance_;
class Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse;
struct Describe_taskActionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal;
extern Describe_taskActionTmpl_ActInstanceListEntry_DoNotUseDefaultTypeInternal _Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse_default_instance_;
class Describe_taskActionTmpl_actTmplInstance;
struct Describe_taskActionTmpl_actTmplInstanceDefaultTypeInternal;
extern Describe_taskActionTmpl_actTmplInstanceDefaultTypeInternal _Describe_taskActionTmpl_actTmplInstance_default_instance_;
class Describe_taskActionTmpl_action;
struct Describe_taskActionTmpl_actionDefaultTypeInternal;
extern Describe_taskActionTmpl_actionDefaultTypeInternal _Describe_taskActionTmpl_action_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class Edge_Arc;
struct Edge_ArcDefaultTypeInternal;
extern Edge_ArcDefaultTypeInternal _Edge_Arc_default_instance_;
class Edge_Basic;
struct Edge_BasicDefaultTypeInternal;
extern Edge_BasicDefaultTypeInternal _Edge_Basic_default_instance_;
class Edge_Basic_AgvTypeEntry_DoNotUse;
struct Edge_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal;
extern Edge_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal _Edge_Basic_AgvTypeEntry_DoNotUse_default_instance_;
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class MAP_ARR;
struct MAP_ARRDefaultTypeInternal;
extern MAP_ARRDefaultTypeInternal _MAP_ARR_default_instance_;
class MAP_ARR_AgvparamEntry_DoNotUse;
struct MAP_ARR_AgvparamEntry_DoNotUseDefaultTypeInternal;
extern MAP_ARR_AgvparamEntry_DoNotUseDefaultTypeInternal _MAP_ARR_AgvparamEntry_DoNotUse_default_instance_;
class MAP_ARR_DefaultFrokEntry_DoNotUse;
struct MAP_ARR_DefaultFrokEntry_DoNotUseDefaultTypeInternal;
extern MAP_ARR_DefaultFrokEntry_DoNotUseDefaultTypeInternal _MAP_ARR_DefaultFrokEntry_DoNotUse_default_instance_;
class MAP_ARR_PalletEntry_DoNotUse;
struct MAP_ARR_PalletEntry_DoNotUseDefaultTypeInternal;
extern MAP_ARR_PalletEntry_DoNotUseDefaultTypeInternal _MAP_ARR_PalletEntry_DoNotUse_default_instance_;
class MAP_ARR_ReplaceBatteryStationEntry_DoNotUse;
struct MAP_ARR_ReplaceBatteryStationEntry_DoNotUseDefaultTypeInternal;
extern MAP_ARR_ReplaceBatteryStationEntry_DoNotUseDefaultTypeInternal _MAP_ARR_ReplaceBatteryStationEntry_DoNotUse_default_instance_;
class MAP_ARR_StoreOffConfigEntry_DoNotUse;
struct MAP_ARR_StoreOffConfigEntry_DoNotUseDefaultTypeInternal;
extern MAP_ARR_StoreOffConfigEntry_DoNotUseDefaultTypeInternal _MAP_ARR_StoreOffConfigEntry_DoNotUse_default_instance_;
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class Map_AreaEntry_DoNotUse;
struct Map_AreaEntry_DoNotUseDefaultTypeInternal;
extern Map_AreaEntry_DoNotUseDefaultTypeInternal _Map_AreaEntry_DoNotUse_default_instance_;
class Map_LabelEntry_DoNotUse;
struct Map_LabelEntry_DoNotUseDefaultTypeInternal;
extern Map_LabelEntry_DoNotUseDefaultTypeInternal _Map_LabelEntry_DoNotUse_default_instance_;
class Map_NodeEntry_DoNotUse;
struct Map_NodeEntry_DoNotUseDefaultTypeInternal;
extern Map_NodeEntry_DoNotUseDefaultTypeInternal _Map_NodeEntry_DoNotUse_default_instance_;
class Map_SegmentEntry_DoNotUse;
struct Map_SegmentEntry_DoNotUseDefaultTypeInternal;
extern Map_SegmentEntry_DoNotUseDefaultTypeInternal _Map_SegmentEntry_DoNotUse_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Node_Basic;
struct Node_BasicDefaultTypeInternal;
extern Node_BasicDefaultTypeInternal _Node_Basic_default_instance_;
class Node_Basic_AgvTypeEntry_DoNotUse;
struct Node_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal;
extern Node_Basic_AgvTypeEntry_DoNotUseDefaultTypeInternal _Node_Basic_AgvTypeEntry_DoNotUse_default_instance_;
class Node_Sim_param;
struct Node_Sim_paramDefaultTypeInternal;
extern Node_Sim_paramDefaultTypeInternal _Node_Sim_param_default_instance_;
class Pallet;
struct PalletDefaultTypeInternal;
extern PalletDefaultTypeInternal _Pallet_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Protection;
struct ProtectionDefaultTypeInternal;
extern ProtectionDefaultTypeInternal _Protection_default_instance_;
class Protection_Mode;
struct Protection_ModeDefaultTypeInternal;
extern Protection_ModeDefaultTypeInternal _Protection_Mode_default_instance_;
class Protection_Polygon;
struct Protection_PolygonDefaultTypeInternal;
extern Protection_PolygonDefaultTypeInternal _Protection_Polygon_default_instance_;
class Reflector;
struct ReflectorDefaultTypeInternal;
extern ReflectorDefaultTypeInternal _Reflector_default_instance_;
class ReplaceBatteryStation;
struct ReplaceBatteryStationDefaultTypeInternal;
extern ReplaceBatteryStationDefaultTypeInternal _ReplaceBatteryStation_default_instance_;
class ReplaceBatteryStation_Space;
struct ReplaceBatteryStation_SpaceDefaultTypeInternal;
extern ReplaceBatteryStation_SpaceDefaultTypeInternal _ReplaceBatteryStation_Space_default_instance_;
class ReplaceBatteryStation_SpaceEntry_DoNotUse;
struct ReplaceBatteryStation_SpaceEntry_DoNotUseDefaultTypeInternal;
extern ReplaceBatteryStation_SpaceEntry_DoNotUseDefaultTypeInternal _ReplaceBatteryStation_SpaceEntry_DoNotUse_default_instance_;
class Segment;
struct SegmentDefaultTypeInternal;
extern SegmentDefaultTypeInternal _Segment_default_instance_;
class Store_offset;
struct Store_offsetDefaultTypeInternal;
extern Store_offsetDefaultTypeInternal _Store_offset_default_instance_;
class sceneData;
struct sceneDataDefaultTypeInternal;
extern sceneDataDefaultTypeInternal _sceneData_default_instance_;
class sceneData_ParamMapEntry_DoNotUse;
struct sceneData_ParamMapEntry_DoNotUseDefaultTypeInternal;
extern sceneData_ParamMapEntry_DoNotUseDefaultTypeInternal _sceneData_ParamMapEntry_DoNotUse_default_instance_;
class sceneData_data;
struct sceneData_dataDefaultTypeInternal;
extern sceneData_dataDefaultTypeInternal _sceneData_data_default_instance_;
class sceneData_data_IndexMapEntry_DoNotUse;
struct sceneData_data_IndexMapEntry_DoNotUseDefaultTypeInternal;
extern sceneData_data_IndexMapEntry_DoNotUseDefaultTypeInternal _sceneData_data_IndexMapEntry_DoNotUse_default_instance_;
class sceneData_data_ParamMapEntry_DoNotUse;
struct sceneData_data_ParamMapEntry_DoNotUseDefaultTypeInternal;
extern sceneData_data_ParamMapEntry_DoNotUseDefaultTypeInternal _sceneData_data_ParamMapEntry_DoNotUse_default_instance_;
class store_offset_by_layer;
struct store_offset_by_layerDefaultTypeInternal;
extern store_offset_by_layerDefaultTypeInternal _store_offset_by_layer_default_instance_;
}  // namespace agv_map
PROTOBUF_NAMESPACE_OPEN
template<> ::agv_map::AgvParam* Arena::CreateMaybeMessage<::agv_map::AgvParam>(Arena*);
template<> ::agv_map::AgvParam_ProtectionEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::AgvParam_ProtectionEntry_DoNotUse>(Arena*);
template<> ::agv_map::AgvParam_ReflectorEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::AgvParam_ReflectorEntry_DoNotUse>(Arena*);
template<> ::agv_map::AgvParam_opto_elec* Arena::CreateMaybeMessage<::agv_map::AgvParam_opto_elec>(Arena*);
template<> ::agv_map::Area* Arena::CreateMaybeMessage<::agv_map::Area>(Arena*);
template<> ::agv_map::Area_AgvNumEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Area_AgvNumEntry_DoNotUse>(Arena*);
template<> ::agv_map::Area_Basic* Arena::CreateMaybeMessage<::agv_map::Area_Basic>(Arena*);
template<> ::agv_map::Area_ParamEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Area_ParamEntry_DoNotUse>(Arena*);
template<> ::agv_map::Conf* Arena::CreateMaybeMessage<::agv_map::Conf>(Arena*);
template<> ::agv_map::Conf_AgvIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Conf_AgvIdsEntry_DoNotUse>(Arena*);
template<> ::agv_map::Conf_param* Arena::CreateMaybeMessage<::agv_map::Conf_param>(Arena*);
template<> ::agv_map::Coord* Arena::CreateMaybeMessage<::agv_map::Coord>(Arena*);
template<> ::agv_map::DefautForkSet* Arena::CreateMaybeMessage<::agv_map::DefautForkSet>(Arena*);
template<> ::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::DefautForkSet_PalletLoadHighsEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe* Arena::CreateMaybeMessage<::agv_map::Describe>(Arena*);
template<> ::agv_map::Describe_ActionDescEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_ActionDescEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_ActionTmplEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_ActionTmplEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_AgvDescEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_AgvDescEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_AreaDescEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_AreaDescEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_AvoDescEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_AvoDescEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_CtlDescEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_CtlDescEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_ParamTmpl* Arena::CreateMaybeMessage<::agv_map::Describe_ParamTmpl>(Arena*);
template<> ::agv_map::Describe_ParamTmplEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_ParamTmplEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_ParamTmpl_DataEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_ParamTmpl_paramTmplInstance* Arena::CreateMaybeMessage<::agv_map::Describe_ParamTmpl_paramTmplInstance>(Arena*);
template<> ::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_RutDescEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_RutDescEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_TaskActionTmplEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_TaskActionTmplEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_actionTmpl* Arena::CreateMaybeMessage<::agv_map::Describe_actionTmpl>(Arena*);
template<> ::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_actionTmpl_ActInstanceListEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_actionTmpl_actTmplInstance* Arena::CreateMaybeMessage<::agv_map::Describe_actionTmpl_actTmplInstance>(Arena*);
template<> ::agv_map::Describe_actionTmpl_action* Arena::CreateMaybeMessage<::agv_map::Describe_actionTmpl_action>(Arena*);
template<> ::agv_map::Describe_dataDesc* Arena::CreateMaybeMessage<::agv_map::Describe_dataDesc>(Arena*);
template<> ::agv_map::Describe_dataDesc_ParamEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_dataDesc_ParamEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_taskActionTmpl* Arena::CreateMaybeMessage<::agv_map::Describe_taskActionTmpl>(Arena*);
template<> ::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse>(Arena*);
template<> ::agv_map::Describe_taskActionTmpl_actTmplInstance* Arena::CreateMaybeMessage<::agv_map::Describe_taskActionTmpl_actTmplInstance>(Arena*);
template<> ::agv_map::Describe_taskActionTmpl_action* Arena::CreateMaybeMessage<::agv_map::Describe_taskActionTmpl_action>(Arena*);
template<> ::agv_map::Edge* Arena::CreateMaybeMessage<::agv_map::Edge>(Arena*);
template<> ::agv_map::Edge_Arc* Arena::CreateMaybeMessage<::agv_map::Edge_Arc>(Arena*);
template<> ::agv_map::Edge_Basic* Arena::CreateMaybeMessage<::agv_map::Edge_Basic>(Arena*);
template<> ::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Edge_Basic_AgvTypeEntry_DoNotUse>(Arena*);
template<> ::agv_map::Label* Arena::CreateMaybeMessage<::agv_map::Label>(Arena*);
template<> ::agv_map::MAP_ARR* Arena::CreateMaybeMessage<::agv_map::MAP_ARR>(Arena*);
template<> ::agv_map::MAP_ARR_AgvparamEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::MAP_ARR_AgvparamEntry_DoNotUse>(Arena*);
template<> ::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::MAP_ARR_DefaultFrokEntry_DoNotUse>(Arena*);
template<> ::agv_map::MAP_ARR_PalletEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::MAP_ARR_PalletEntry_DoNotUse>(Arena*);
template<> ::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::MAP_ARR_ReplaceBatteryStationEntry_DoNotUse>(Arena*);
template<> ::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse>(Arena*);
template<> ::agv_map::Map* Arena::CreateMaybeMessage<::agv_map::Map>(Arena*);
template<> ::agv_map::Map_AreaEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Map_AreaEntry_DoNotUse>(Arena*);
template<> ::agv_map::Map_LabelEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Map_LabelEntry_DoNotUse>(Arena*);
template<> ::agv_map::Map_NodeEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Map_NodeEntry_DoNotUse>(Arena*);
template<> ::agv_map::Map_SegmentEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Map_SegmentEntry_DoNotUse>(Arena*);
template<> ::agv_map::Node* Arena::CreateMaybeMessage<::agv_map::Node>(Arena*);
template<> ::agv_map::Node_Basic* Arena::CreateMaybeMessage<::agv_map::Node_Basic>(Arena*);
template<> ::agv_map::Node_Basic_AgvTypeEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::Node_Basic_AgvTypeEntry_DoNotUse>(Arena*);
template<> ::agv_map::Node_Sim_param* Arena::CreateMaybeMessage<::agv_map::Node_Sim_param>(Arena*);
template<> ::agv_map::Pallet* Arena::CreateMaybeMessage<::agv_map::Pallet>(Arena*);
template<> ::agv_map::Position* Arena::CreateMaybeMessage<::agv_map::Position>(Arena*);
template<> ::agv_map::Protection* Arena::CreateMaybeMessage<::agv_map::Protection>(Arena*);
template<> ::agv_map::Protection_Mode* Arena::CreateMaybeMessage<::agv_map::Protection_Mode>(Arena*);
template<> ::agv_map::Protection_Polygon* Arena::CreateMaybeMessage<::agv_map::Protection_Polygon>(Arena*);
template<> ::agv_map::Reflector* Arena::CreateMaybeMessage<::agv_map::Reflector>(Arena*);
template<> ::agv_map::ReplaceBatteryStation* Arena::CreateMaybeMessage<::agv_map::ReplaceBatteryStation>(Arena*);
template<> ::agv_map::ReplaceBatteryStation_Space* Arena::CreateMaybeMessage<::agv_map::ReplaceBatteryStation_Space>(Arena*);
template<> ::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::ReplaceBatteryStation_SpaceEntry_DoNotUse>(Arena*);
template<> ::agv_map::Segment* Arena::CreateMaybeMessage<::agv_map::Segment>(Arena*);
template<> ::agv_map::Store_offset* Arena::CreateMaybeMessage<::agv_map::Store_offset>(Arena*);
template<> ::agv_map::sceneData* Arena::CreateMaybeMessage<::agv_map::sceneData>(Arena*);
template<> ::agv_map::sceneData_ParamMapEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::sceneData_ParamMapEntry_DoNotUse>(Arena*);
template<> ::agv_map::sceneData_data* Arena::CreateMaybeMessage<::agv_map::sceneData_data>(Arena*);
template<> ::agv_map::sceneData_data_IndexMapEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::sceneData_data_IndexMapEntry_DoNotUse>(Arena*);
template<> ::agv_map::sceneData_data_ParamMapEntry_DoNotUse* Arena::CreateMaybeMessage<::agv_map::sceneData_data_ParamMapEntry_DoNotUse>(Arena*);
template<> ::agv_map::store_offset_by_layer* Arena::CreateMaybeMessage<::agv_map::store_offset_by_layer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace agv_map {

enum node_type : int {
  STA_TYPE_NORMAL = 0,
  STA_TYPE_HOUSE = 1,
  STA_TYPE_CHARGE = 2,
  STA_TYPE_STORAGE = 3,
  STA_TYPE_DOOR = 4,
  STA_TYPE_LIFT = 5,
  STA_TYPE_WEIGH = 6,
  STA_TYPE_HOIST = 7,
  node_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  node_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool node_type_IsValid(int value);
constexpr node_type node_type_MIN = STA_TYPE_NORMAL;
constexpr node_type node_type_MAX = STA_TYPE_HOIST;
constexpr int node_type_ARRAYSIZE = node_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* node_type_descriptor();
template<typename T>
inline const std::string& node_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, node_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function node_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    node_type_descriptor(), enum_t_value);
}
inline bool node_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, node_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<node_type>(
    node_type_descriptor(), name, value);
}
// ===================================================================

class MAP_ARR_StoreOffConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_StoreOffConfigEntry_DoNotUse, 
    int32_t, ::agv_map::Store_offset,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_StoreOffConfigEntry_DoNotUse, 
    int32_t, ::agv_map::Store_offset,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MAP_ARR_StoreOffConfigEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MAP_ARR_StoreOffConfigEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MAP_ARR_StoreOffConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MAP_ARR_StoreOffConfigEntry_DoNotUse& other);
  static const MAP_ARR_StoreOffConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MAP_ARR_StoreOffConfigEntry_DoNotUse*>(&_MAP_ARR_StoreOffConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class MAP_ARR_AgvparamEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_AgvparamEntry_DoNotUse, 
    std::string, ::agv_map::AgvParam,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_AgvparamEntry_DoNotUse, 
    std::string, ::agv_map::AgvParam,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MAP_ARR_AgvparamEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MAP_ARR_AgvparamEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MAP_ARR_AgvparamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MAP_ARR_AgvparamEntry_DoNotUse& other);
  static const MAP_ARR_AgvparamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MAP_ARR_AgvparamEntry_DoNotUse*>(&_MAP_ARR_AgvparamEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.MAP_ARR.AgvparamEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class MAP_ARR_ReplaceBatteryStationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_ReplaceBatteryStationEntry_DoNotUse, 
    int32_t, ::agv_map::ReplaceBatteryStation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_ReplaceBatteryStationEntry_DoNotUse, 
    int32_t, ::agv_map::ReplaceBatteryStation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MAP_ARR_ReplaceBatteryStationEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MAP_ARR_ReplaceBatteryStationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MAP_ARR_ReplaceBatteryStationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MAP_ARR_ReplaceBatteryStationEntry_DoNotUse& other);
  static const MAP_ARR_ReplaceBatteryStationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MAP_ARR_ReplaceBatteryStationEntry_DoNotUse*>(&_MAP_ARR_ReplaceBatteryStationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class MAP_ARR_PalletEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_PalletEntry_DoNotUse, 
    int32_t, ::agv_map::Pallet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_PalletEntry_DoNotUse, 
    int32_t, ::agv_map::Pallet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MAP_ARR_PalletEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MAP_ARR_PalletEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MAP_ARR_PalletEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MAP_ARR_PalletEntry_DoNotUse& other);
  static const MAP_ARR_PalletEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MAP_ARR_PalletEntry_DoNotUse*>(&_MAP_ARR_PalletEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class MAP_ARR_DefaultFrokEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_DefaultFrokEntry_DoNotUse, 
    std::string, ::agv_map::DefautForkSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MAP_ARR_DefaultFrokEntry_DoNotUse, 
    std::string, ::agv_map::DefautForkSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MAP_ARR_DefaultFrokEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MAP_ARR_DefaultFrokEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MAP_ARR_DefaultFrokEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MAP_ARR_DefaultFrokEntry_DoNotUse& other);
  static const MAP_ARR_DefaultFrokEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MAP_ARR_DefaultFrokEntry_DoNotUse*>(&_MAP_ARR_DefaultFrokEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.MAP_ARR.DefaultFrokEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class MAP_ARR final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.MAP_ARR) */ {
 public:
  inline MAP_ARR() : MAP_ARR(nullptr) {}
  ~MAP_ARR() override;
  explicit PROTOBUF_CONSTEXPR MAP_ARR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MAP_ARR(const MAP_ARR& from);
  MAP_ARR(MAP_ARR&& from) noexcept
    : MAP_ARR() {
    *this = ::std::move(from);
  }

  inline MAP_ARR& operator=(const MAP_ARR& from) {
    CopyFrom(from);
    return *this;
  }
  inline MAP_ARR& operator=(MAP_ARR&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MAP_ARR& default_instance() {
    return *internal_default_instance();
  }
  static inline const MAP_ARR* internal_default_instance() {
    return reinterpret_cast<const MAP_ARR*>(
               &_MAP_ARR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MAP_ARR& a, MAP_ARR& b) {
    a.Swap(&b);
  }
  inline void Swap(MAP_ARR* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MAP_ARR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MAP_ARR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MAP_ARR>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MAP_ARR& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MAP_ARR& from) {
    MAP_ARR::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MAP_ARR* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.MAP_ARR";
  }
  protected:
  explicit MAP_ARR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
    kStoreOffConfigFieldNumber = 3,
    kAgvparamFieldNumber = 4,
    kReplaceBatteryStationFieldNumber = 5,
    kPalletFieldNumber = 6,
    kDefaultFrokFieldNumber = 7,
    kDescribeFieldNumber = 2,
  };
  // repeated .agv_map.Map map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  ::agv_map::Map* mutable_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Map >*
      mutable_map();
  private:
  const ::agv_map::Map& _internal_map(int index) const;
  ::agv_map::Map* _internal_add_map();
  public:
  const ::agv_map::Map& map(int index) const;
  ::agv_map::Map* add_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Map >&
      map() const;

  // map<int32, .agv_map.Store_offset> store_off_config = 3;
  int store_off_config_size() const;
  private:
  int _internal_store_off_config_size() const;
  public:
  void clear_store_off_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >&
      _internal_store_off_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >*
      _internal_mutable_store_off_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >&
      store_off_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >*
      mutable_store_off_config();

  // map<string, .agv_map.AgvParam> agvparam = 4;
  int agvparam_size() const;
  private:
  int _internal_agvparam_size() const;
  public:
  void clear_agvparam();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >&
      _internal_agvparam() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >*
      _internal_mutable_agvparam();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >&
      agvparam() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >*
      mutable_agvparam();

  // map<int32, .agv_map.ReplaceBatteryStation> replace_battery_station = 5;
  int replace_battery_station_size() const;
  private:
  int _internal_replace_battery_station_size() const;
  public:
  void clear_replace_battery_station();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >&
      _internal_replace_battery_station() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >*
      _internal_mutable_replace_battery_station();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >&
      replace_battery_station() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >*
      mutable_replace_battery_station();

  // map<int32, .agv_map.Pallet> pallet = 6;
  int pallet_size() const;
  private:
  int _internal_pallet_size() const;
  public:
  void clear_pallet();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >&
      _internal_pallet() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >*
      _internal_mutable_pallet();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >&
      pallet() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >*
      mutable_pallet();

  // map<string, .agv_map.DefautForkSet> default_frok = 7;
  int default_frok_size() const;
  private:
  int _internal_default_frok_size() const;
  public:
  void clear_default_frok();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >&
      _internal_default_frok() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >*
      _internal_mutable_default_frok();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >&
      default_frok() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >*
      mutable_default_frok();

  // .agv_map.Describe describe = 2;
  bool has_describe() const;
  private:
  bool _internal_has_describe() const;
  public:
  void clear_describe();
  const ::agv_map::Describe& describe() const;
  PROTOBUF_NODISCARD ::agv_map::Describe* release_describe();
  ::agv_map::Describe* mutable_describe();
  void set_allocated_describe(::agv_map::Describe* describe);
  private:
  const ::agv_map::Describe& _internal_describe() const;
  ::agv_map::Describe* _internal_mutable_describe();
  public:
  void unsafe_arena_set_allocated_describe(
      ::agv_map::Describe* describe);
  ::agv_map::Describe* unsafe_arena_release_describe();

  // @@protoc_insertion_point(class_scope:agv_map.MAP_ARR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Map > map_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MAP_ARR_StoreOffConfigEntry_DoNotUse,
        int32_t, ::agv_map::Store_offset,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> store_off_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MAP_ARR_AgvparamEntry_DoNotUse,
        std::string, ::agv_map::AgvParam,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> agvparam_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MAP_ARR_ReplaceBatteryStationEntry_DoNotUse,
        int32_t, ::agv_map::ReplaceBatteryStation,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> replace_battery_station_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MAP_ARR_PalletEntry_DoNotUse,
        int32_t, ::agv_map::Pallet,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> pallet_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MAP_ARR_DefaultFrokEntry_DoNotUse,
        std::string, ::agv_map::DefautForkSet,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> default_frok_;
    ::agv_map::Describe* describe_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Map_NodeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Map_NodeEntry_DoNotUse, 
    int32_t, ::agv_map::Node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Map_NodeEntry_DoNotUse, 
    int32_t, ::agv_map::Node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Map_NodeEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Map_NodeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Map_NodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Map_NodeEntry_DoNotUse& other);
  static const Map_NodeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Map_NodeEntry_DoNotUse*>(&_Map_NodeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Map_SegmentEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Map_SegmentEntry_DoNotUse, 
    int32_t, ::agv_map::Segment,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Map_SegmentEntry_DoNotUse, 
    int32_t, ::agv_map::Segment,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Map_SegmentEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Map_SegmentEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Map_SegmentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Map_SegmentEntry_DoNotUse& other);
  static const Map_SegmentEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Map_SegmentEntry_DoNotUse*>(&_Map_SegmentEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Map_AreaEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Map_AreaEntry_DoNotUse, 
    int32_t, ::agv_map::Area,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Map_AreaEntry_DoNotUse, 
    int32_t, ::agv_map::Area,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Map_AreaEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Map_AreaEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Map_AreaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Map_AreaEntry_DoNotUse& other);
  static const Map_AreaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Map_AreaEntry_DoNotUse*>(&_Map_AreaEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Map_LabelEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Map_LabelEntry_DoNotUse, 
    int32_t, ::agv_map::Label,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Map_LabelEntry_DoNotUse, 
    int32_t, ::agv_map::Label,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Map_LabelEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Map_LabelEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Map_LabelEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Map_LabelEntry_DoNotUse& other);
  static const Map_LabelEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Map_LabelEntry_DoNotUse*>(&_Map_LabelEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  ~Map() override;
  explicit PROTOBUF_CONSTEXPR Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Map& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Map& from) {
    Map::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 2,
    kSegmentFieldNumber = 3,
    kAreaFieldNumber = 4,
    kLabelFieldNumber = 5,
    kConfFieldNumber = 1,
  };
  // map<int32, .agv_map.Node> node = 2;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >&
      _internal_node() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >*
      _internal_mutable_node();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >&
      node() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >*
      mutable_node();

  // map<int32, .agv_map.Segment> segment = 3;
  int segment_size() const;
  private:
  int _internal_segment_size() const;
  public:
  void clear_segment();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >&
      _internal_segment() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >*
      _internal_mutable_segment();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >&
      segment() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >*
      mutable_segment();

  // map<int32, .agv_map.Area> area = 4;
  int area_size() const;
  private:
  int _internal_area_size() const;
  public:
  void clear_area();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >&
      _internal_area() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >*
      _internal_mutable_area();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >&
      area() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >*
      mutable_area();

  // map<int32, .agv_map.Label> label = 5;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >&
      _internal_label() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >*
      _internal_mutable_label();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >&
      label() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >*
      mutable_label();

  // .agv_map.Conf conf = 1;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::agv_map::Conf& conf() const;
  PROTOBUF_NODISCARD ::agv_map::Conf* release_conf();
  ::agv_map::Conf* mutable_conf();
  void set_allocated_conf(::agv_map::Conf* conf);
  private:
  const ::agv_map::Conf& _internal_conf() const;
  ::agv_map::Conf* _internal_mutable_conf();
  public:
  void unsafe_arena_set_allocated_conf(
      ::agv_map::Conf* conf);
  ::agv_map::Conf* unsafe_arena_release_conf();

  // @@protoc_insertion_point(class_scope:agv_map.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Map_NodeEntry_DoNotUse,
        int32_t, ::agv_map::Node,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> node_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Map_SegmentEntry_DoNotUse,
        int32_t, ::agv_map::Segment,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> segment_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Map_AreaEntry_DoNotUse,
        int32_t, ::agv_map::Area,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> area_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Map_LabelEntry_DoNotUse,
        int32_t, ::agv_map::Label,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> label_;
    ::agv_map::Conf* conf_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Conf_AgvIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Conf_AgvIdsEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Conf_AgvIdsEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Conf_AgvIdsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Conf_AgvIdsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Conf_AgvIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Conf_AgvIdsEntry_DoNotUse& other);
  static const Conf_AgvIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Conf_AgvIdsEntry_DoNotUse*>(&_Conf_AgvIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Conf_param final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Conf.param) */ {
 public:
  inline Conf_param() : Conf_param(nullptr) {}
  ~Conf_param() override;
  explicit PROTOBUF_CONSTEXPR Conf_param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Conf_param(const Conf_param& from);
  Conf_param(Conf_param&& from) noexcept
    : Conf_param() {
    *this = ::std::move(from);
  }

  inline Conf_param& operator=(const Conf_param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conf_param& operator=(Conf_param&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Conf_param& default_instance() {
    return *internal_default_instance();
  }
  static inline const Conf_param* internal_default_instance() {
    return reinterpret_cast<const Conf_param*>(
               &_Conf_param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Conf_param& a, Conf_param& b) {
    a.Swap(&b);
  }
  inline void Swap(Conf_param* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conf_param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Conf_param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Conf_param>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Conf_param& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Conf_param& from) {
    Conf_param::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conf_param* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Conf.param";
  }
  protected:
  explicit Conf_param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Conf.param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Conf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Conf) */ {
 public:
  inline Conf() : Conf(nullptr) {}
  ~Conf() override;
  explicit PROTOBUF_CONSTEXPR Conf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Conf(const Conf& from);
  Conf(Conf&& from) noexcept
    : Conf() {
    *this = ::std::move(from);
  }

  inline Conf& operator=(const Conf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conf& operator=(Conf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Conf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Conf* internal_default_instance() {
    return reinterpret_cast<const Conf*>(
               &_Conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Conf& a, Conf& b) {
    a.Swap(&b);
  }
  inline void Swap(Conf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Conf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Conf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Conf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Conf& from) {
    Conf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Conf";
  }
  protected:
  explicit Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Conf_param param;

  // accessors -------------------------------------------------------

  enum : int {
    kAgvIdsFieldNumber = 9,
    kMissionTypeListFieldNumber = 16,
    kMapNameFieldNumber = 3,
    kProjectNameFieldNumber = 8,
    kGcoodTypeFieldNumber = 10,
    kMapTsFieldNumber = 1,
    kMapZoneFieldNumber = 2,
    kMaxXFieldNumber = 4,
    kMinXFieldNumber = 5,
    kMaxYFieldNumber = 6,
    kMinYFieldNumber = 7,
    kGcoodDmValueFieldNumber = 11,
    kBackgroundPosXFieldNumber = 12,
    kBackgroundPosYFieldNumber = 13,
    kBackgroundLengthFieldNumber = 14,
    kBackgroundWidthFieldNumber = 15,
  };
  // map<int32, int32> agv_ids = 9;
  int agv_ids_size() const;
  private:
  int _internal_agv_ids_size() const;
  public:
  void clear_agv_ids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_agv_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_agv_ids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      agv_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_agv_ids();

  // repeated .agv_map.Conf.param mission_type_list = 16;
  int mission_type_list_size() const;
  private:
  int _internal_mission_type_list_size() const;
  public:
  void clear_mission_type_list();
  ::agv_map::Conf_param* mutable_mission_type_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Conf_param >*
      mutable_mission_type_list();
  private:
  const ::agv_map::Conf_param& _internal_mission_type_list(int index) const;
  ::agv_map::Conf_param* _internal_add_mission_type_list();
  public:
  const ::agv_map::Conf_param& mission_type_list(int index) const;
  ::agv_map::Conf_param* add_mission_type_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Conf_param >&
      mission_type_list() const;

  // string map_name = 3;
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_NODISCARD std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // string project_name = 8;
  void clear_project_name();
  const std::string& project_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_name();
  PROTOBUF_NODISCARD std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string gcood_type = 10;
  void clear_gcood_type();
  const std::string& gcood_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gcood_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gcood_type();
  PROTOBUF_NODISCARD std::string* release_gcood_type();
  void set_allocated_gcood_type(std::string* gcood_type);
  private:
  const std::string& _internal_gcood_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcood_type(const std::string& value);
  std::string* _internal_mutable_gcood_type();
  public:

  // int64 map_ts = 1;
  void clear_map_ts();
  int64_t map_ts() const;
  void set_map_ts(int64_t value);
  private:
  int64_t _internal_map_ts() const;
  void _internal_set_map_ts(int64_t value);
  public:

  // int32 map_zone = 2;
  void clear_map_zone();
  int32_t map_zone() const;
  void set_map_zone(int32_t value);
  private:
  int32_t _internal_map_zone() const;
  void _internal_set_map_zone(int32_t value);
  public:

  // int32 max_x = 4;
  void clear_max_x();
  int32_t max_x() const;
  void set_max_x(int32_t value);
  private:
  int32_t _internal_max_x() const;
  void _internal_set_max_x(int32_t value);
  public:

  // int32 min_x = 5;
  void clear_min_x();
  int32_t min_x() const;
  void set_min_x(int32_t value);
  private:
  int32_t _internal_min_x() const;
  void _internal_set_min_x(int32_t value);
  public:

  // int32 max_y = 6;
  void clear_max_y();
  int32_t max_y() const;
  void set_max_y(int32_t value);
  private:
  int32_t _internal_max_y() const;
  void _internal_set_max_y(int32_t value);
  public:

  // int32 min_y = 7;
  void clear_min_y();
  int32_t min_y() const;
  void set_min_y(int32_t value);
  private:
  int32_t _internal_min_y() const;
  void _internal_set_min_y(int32_t value);
  public:

  // int32 gcood_dm_value = 11;
  void clear_gcood_dm_value();
  int32_t gcood_dm_value() const;
  void set_gcood_dm_value(int32_t value);
  private:
  int32_t _internal_gcood_dm_value() const;
  void _internal_set_gcood_dm_value(int32_t value);
  public:

  // int32 background_pos_x = 12;
  void clear_background_pos_x();
  int32_t background_pos_x() const;
  void set_background_pos_x(int32_t value);
  private:
  int32_t _internal_background_pos_x() const;
  void _internal_set_background_pos_x(int32_t value);
  public:

  // int32 background_pos_y = 13;
  void clear_background_pos_y();
  int32_t background_pos_y() const;
  void set_background_pos_y(int32_t value);
  private:
  int32_t _internal_background_pos_y() const;
  void _internal_set_background_pos_y(int32_t value);
  public:

  // int32 background_length = 14;
  void clear_background_length();
  int32_t background_length() const;
  void set_background_length(int32_t value);
  private:
  int32_t _internal_background_length() const;
  void _internal_set_background_length(int32_t value);
  public:

  // int32 background_width = 15;
  void clear_background_width();
  int32_t background_width() const;
  void set_background_width(int32_t value);
  private:
  int32_t _internal_background_width() const;
  void _internal_set_background_width(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Conf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Conf_AgvIdsEntry_DoNotUse,
        int32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> agv_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Conf_param > mission_type_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcood_type_;
    int64_t map_ts_;
    int32_t map_zone_;
    int32_t max_x_;
    int32_t min_x_;
    int32_t max_y_;
    int32_t min_y_;
    int32_t gcood_dm_value_;
    int32_t background_pos_x_;
    int32_t background_pos_y_;
    int32_t background_length_;
    int32_t background_width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class sceneData_ParamMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<sceneData_ParamMapEntry_DoNotUse, 
    std::string, ::agv_map::sceneData_data,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<sceneData_ParamMapEntry_DoNotUse, 
    std::string, ::agv_map::sceneData_data,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  sceneData_ParamMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR sceneData_ParamMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit sceneData_ParamMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const sceneData_ParamMapEntry_DoNotUse& other);
  static const sceneData_ParamMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const sceneData_ParamMapEntry_DoNotUse*>(&_sceneData_ParamMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.sceneData.ParamMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class sceneData_data_ParamMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<sceneData_data_ParamMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<sceneData_data_ParamMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  sceneData_data_ParamMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR sceneData_data_ParamMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit sceneData_data_ParamMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const sceneData_data_ParamMapEntry_DoNotUse& other);
  static const sceneData_data_ParamMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const sceneData_data_ParamMapEntry_DoNotUse*>(&_sceneData_data_ParamMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.sceneData.data.ParamMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.sceneData.data.ParamMapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class sceneData_data_IndexMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<sceneData_data_IndexMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<sceneData_data_IndexMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  sceneData_data_IndexMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR sceneData_data_IndexMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit sceneData_data_IndexMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const sceneData_data_IndexMapEntry_DoNotUse& other);
  static const sceneData_data_IndexMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const sceneData_data_IndexMapEntry_DoNotUse*>(&_sceneData_data_IndexMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.sceneData.data.IndexMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.sceneData.data.IndexMapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class sceneData_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.sceneData.data) */ {
 public:
  inline sceneData_data() : sceneData_data(nullptr) {}
  ~sceneData_data() override;
  explicit PROTOBUF_CONSTEXPR sceneData_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sceneData_data(const sceneData_data& from);
  sceneData_data(sceneData_data&& from) noexcept
    : sceneData_data() {
    *this = ::std::move(from);
  }

  inline sceneData_data& operator=(const sceneData_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline sceneData_data& operator=(sceneData_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sceneData_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const sceneData_data* internal_default_instance() {
    return reinterpret_cast<const sceneData_data*>(
               &_sceneData_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(sceneData_data& a, sceneData_data& b) {
    a.Swap(&b);
  }
  inline void Swap(sceneData_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sceneData_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  sceneData_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<sceneData_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sceneData_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const sceneData_data& from) {
    sceneData_data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sceneData_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.sceneData.data";
  }
  protected:
  explicit sceneData_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamMapFieldNumber = 1,
    kIndexMapFieldNumber = 2,
  };
  // map<string, string> param_map = 1;
  int param_map_size() const;
  private:
  int _internal_param_map_size() const;
  public:
  void clear_param_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_param_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_param_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      param_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_param_map();

  // map<string, string> index_map = 2;
  int index_map_size() const;
  private:
  int _internal_index_map_size() const;
  public:
  void clear_index_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_index_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_index_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      index_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_index_map();

  // @@protoc_insertion_point(class_scope:agv_map.sceneData.data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        sceneData_data_ParamMapEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> param_map_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        sceneData_data_IndexMapEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> index_map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class sceneData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.sceneData) */ {
 public:
  inline sceneData() : sceneData(nullptr) {}
  ~sceneData() override;
  explicit PROTOBUF_CONSTEXPR sceneData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sceneData(const sceneData& from);
  sceneData(sceneData&& from) noexcept
    : sceneData() {
    *this = ::std::move(from);
  }

  inline sceneData& operator=(const sceneData& from) {
    CopyFrom(from);
    return *this;
  }
  inline sceneData& operator=(sceneData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sceneData& default_instance() {
    return *internal_default_instance();
  }
  static inline const sceneData* internal_default_instance() {
    return reinterpret_cast<const sceneData*>(
               &_sceneData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(sceneData& a, sceneData& b) {
    a.Swap(&b);
  }
  inline void Swap(sceneData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sceneData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  sceneData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<sceneData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sceneData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const sceneData& from) {
    sceneData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sceneData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.sceneData";
  }
  protected:
  explicit sceneData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef sceneData_data data;

  // accessors -------------------------------------------------------

  enum : int {
    kParamMapFieldNumber = 1,
  };
  // map<string, .agv_map.sceneData.data> param_map = 1;
  int param_map_size() const;
  private:
  int _internal_param_map_size() const;
  public:
  void clear_param_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >&
      _internal_param_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >*
      _internal_mutable_param_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >&
      param_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >*
      mutable_param_map();

  // @@protoc_insertion_point(class_scope:agv_map.sceneData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        sceneData_ParamMapEntry_DoNotUse,
        std::string, ::agv_map::sceneData_data,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> param_map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Node_Basic_AgvTypeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Node_Basic_AgvTypeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Node_Basic_AgvTypeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Node_Basic_AgvTypeEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Node_Basic_AgvTypeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Node_Basic_AgvTypeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Node_Basic_AgvTypeEntry_DoNotUse& other);
  static const Node_Basic_AgvTypeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Node_Basic_AgvTypeEntry_DoNotUse*>(&_Node_Basic_AgvTypeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Node.Basic.AgvTypeEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Node.Basic.AgvTypeEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Node_Basic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Node.Basic) */ {
 public:
  inline Node_Basic() : Node_Basic(nullptr) {}
  ~Node_Basic() override;
  explicit PROTOBUF_CONSTEXPR Node_Basic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node_Basic(const Node_Basic& from);
  Node_Basic(Node_Basic&& from) noexcept
    : Node_Basic() {
    *this = ::std::move(from);
  }

  inline Node_Basic& operator=(const Node_Basic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node_Basic& operator=(Node_Basic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node_Basic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node_Basic* internal_default_instance() {
    return reinterpret_cast<const Node_Basic*>(
               &_Node_Basic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Node_Basic& a, Node_Basic& b) {
    a.Swap(&b);
  }
  inline void Swap(Node_Basic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node_Basic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node_Basic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node_Basic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node_Basic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node_Basic& from) {
    Node_Basic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node_Basic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Node.Basic";
  }
  protected:
  explicit Node_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAgvTypeFieldNumber = 9,
    kNameFieldNumber = 2,
    kQrcodeStrFieldNumber = 10,
    kMissionTypeFieldNumber = 12,
    kCoordFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kGroupIdFieldNumber = 5,
    kQRcodeFieldNumber = 6,
    kNodeInfoFieldNumber = 7,
    kFloorFieldNumber = 8,
    kStypeFieldNumber = 11,
    kInstapntIdFieldNumber = 13,
    kPalletDirFieldNumber = 14,
  };
  // map<string, string> agv_type = 9;
  int agv_type_size() const;
  private:
  int _internal_agv_type_size() const;
  public:
  void clear_agv_type();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_agv_type() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_agv_type();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      agv_type() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_agv_type();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string qrcode_str = 10;
  void clear_qrcode_str();
  const std::string& qrcode_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_qrcode_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_qrcode_str();
  PROTOBUF_NODISCARD std::string* release_qrcode_str();
  void set_allocated_qrcode_str(std::string* qrcode_str);
  private:
  const std::string& _internal_qrcode_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_qrcode_str(const std::string& value);
  std::string* _internal_mutable_qrcode_str();
  public:

  // string mission_type = 12;
  void clear_mission_type();
  const std::string& mission_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mission_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mission_type();
  PROTOBUF_NODISCARD std::string* release_mission_type();
  void set_allocated_mission_type(std::string* mission_type);
  private:
  const std::string& _internal_mission_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mission_type(const std::string& value);
  std::string* _internal_mutable_mission_type();
  public:

  // .agv_map.Coord coord = 4;
  bool has_coord() const;
  private:
  bool _internal_has_coord() const;
  public:
  void clear_coord();
  const ::agv_map::Coord& coord() const;
  PROTOBUF_NODISCARD ::agv_map::Coord* release_coord();
  ::agv_map::Coord* mutable_coord();
  void set_allocated_coord(::agv_map::Coord* coord);
  private:
  const ::agv_map::Coord& _internal_coord() const;
  ::agv_map::Coord* _internal_mutable_coord();
  public:
  void unsafe_arena_set_allocated_coord(
      ::agv_map::Coord* coord);
  ::agv_map::Coord* unsafe_arena_release_coord();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 group_id = 5;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // sint32 QRcode = 6;
  void clear_qrcode();
  int32_t qrcode() const;
  void set_qrcode(int32_t value);
  private:
  int32_t _internal_qrcode() const;
  void _internal_set_qrcode(int32_t value);
  public:

  // int32 node_info = 7;
  void clear_node_info();
  int32_t node_info() const;
  void set_node_info(int32_t value);
  private:
  int32_t _internal_node_info() const;
  void _internal_set_node_info(int32_t value);
  public:

  // sint32 floor = 8;
  void clear_floor();
  int32_t floor() const;
  void set_floor(int32_t value);
  private:
  int32_t _internal_floor() const;
  void _internal_set_floor(int32_t value);
  public:

  // int32 stype = 11;
  void clear_stype();
  int32_t stype() const;
  void set_stype(int32_t value);
  private:
  int32_t _internal_stype() const;
  void _internal_set_stype(int32_t value);
  public:

  // int32 instapnt_id = 13;
  void clear_instapnt_id();
  int32_t instapnt_id() const;
  void set_instapnt_id(int32_t value);
  private:
  int32_t _internal_instapnt_id() const;
  void _internal_set_instapnt_id(int32_t value);
  public:

  // int32 pallet_dir = 14;
  void clear_pallet_dir();
  int32_t pallet_dir() const;
  void set_pallet_dir(int32_t value);
  private:
  int32_t _internal_pallet_dir() const;
  void _internal_set_pallet_dir(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Node.Basic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Node_Basic_AgvTypeEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> agv_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qrcode_str_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mission_type_;
    ::agv_map::Coord* coord_;
    int32_t id_;
    int32_t type_;
    int32_t group_id_;
    int32_t qrcode_;
    int32_t node_info_;
    int32_t floor_;
    int32_t stype_;
    int32_t instapnt_id_;
    int32_t pallet_dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Node_Sim_param final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Node.Sim_param) */ {
 public:
  inline Node_Sim_param() : Node_Sim_param(nullptr) {}
  ~Node_Sim_param() override;
  explicit PROTOBUF_CONSTEXPR Node_Sim_param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node_Sim_param(const Node_Sim_param& from);
  Node_Sim_param(Node_Sim_param&& from) noexcept
    : Node_Sim_param() {
    *this = ::std::move(from);
  }

  inline Node_Sim_param& operator=(const Node_Sim_param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node_Sim_param& operator=(Node_Sim_param&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node_Sim_param& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node_Sim_param* internal_default_instance() {
    return reinterpret_cast<const Node_Sim_param*>(
               &_Node_Sim_param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Node_Sim_param& a, Node_Sim_param& b) {
    a.Swap(&b);
  }
  inline void Swap(Node_Sim_param* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node_Sim_param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node_Sim_param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node_Sim_param>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node_Sim_param& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node_Sim_param& from) {
    Node_Sim_param::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node_Sim_param* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Node.Sim_param";
  }
  protected:
  explicit Node_Sim_param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 7,
    kEnableFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIntervalFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kTargetAreaFieldNumber = 5,
    kTargetStaFieldNumber = 6,
  };
  // string target = 7;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // int32 enable = 1;
  void clear_enable();
  int32_t enable() const;
  void set_enable(int32_t value);
  private:
  int32_t _internal_enable() const;
  void _internal_set_enable(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 interval = 3;
  void clear_interval();
  int32_t interval() const;
  void set_interval(int32_t value);
  private:
  int32_t _internal_interval() const;
  void _internal_set_interval(int32_t value);
  public:

  // sint32 offset = 4;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // sint32 target_area = 5;
  void clear_target_area();
  int32_t target_area() const;
  void set_target_area(int32_t value);
  private:
  int32_t _internal_target_area() const;
  void _internal_set_target_area(int32_t value);
  public:

  // sint32 target_sta = 6;
  void clear_target_sta();
  int32_t target_sta() const;
  void set_target_sta(int32_t value);
  private:
  int32_t _internal_target_sta() const;
  void _internal_set_target_sta(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Node.Sim_param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
    int32_t enable_;
    int32_t type_;
    int32_t interval_;
    int32_t offset_;
    int32_t target_area_;
    int32_t target_sta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Node_Basic Basic;
  typedef Node_Sim_param Sim_param;

  // accessors -------------------------------------------------------

  enum : int {
    kInAreaFieldNumber = 2,
    kEdgeListFieldNumber = 3,
    kBasicFieldNumber = 1,
    kAgvParamFieldNumber = 4,
    kAvoParamFieldNumber = 5,
    kCtlParamFieldNumber = 6,
    kRutParamFieldNumber = 7,
    kActParamFieldNumber = 8,
    kSimParamFieldNumber = 9,
  };
  // repeated int32 in_area = 2;
  int in_area_size() const;
  private:
  int _internal_in_area_size() const;
  public:
  void clear_in_area();
  private:
  int32_t _internal_in_area(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_in_area() const;
  void _internal_add_in_area(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_in_area();
  public:
  int32_t in_area(int index) const;
  void set_in_area(int index, int32_t value);
  void add_in_area(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      in_area() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_in_area();

  // repeated int32 edge_list = 3;
  int edge_list_size() const;
  private:
  int _internal_edge_list_size() const;
  public:
  void clear_edge_list();
  private:
  int32_t _internal_edge_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_edge_list() const;
  void _internal_add_edge_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_edge_list();
  public:
  int32_t edge_list(int index) const;
  void set_edge_list(int index, int32_t value);
  void add_edge_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      edge_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_edge_list();

  // .agv_map.Node.Basic basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::agv_map::Node_Basic& basic() const;
  PROTOBUF_NODISCARD ::agv_map::Node_Basic* release_basic();
  ::agv_map::Node_Basic* mutable_basic();
  void set_allocated_basic(::agv_map::Node_Basic* basic);
  private:
  const ::agv_map::Node_Basic& _internal_basic() const;
  ::agv_map::Node_Basic* _internal_mutable_basic();
  public:
  void unsafe_arena_set_allocated_basic(
      ::agv_map::Node_Basic* basic);
  ::agv_map::Node_Basic* unsafe_arena_release_basic();

  // .agv_map.sceneData agv_param = 4;
  bool has_agv_param() const;
  private:
  bool _internal_has_agv_param() const;
  public:
  void clear_agv_param();
  const ::agv_map::sceneData& agv_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_agv_param();
  ::agv_map::sceneData* mutable_agv_param();
  void set_allocated_agv_param(::agv_map::sceneData* agv_param);
  private:
  const ::agv_map::sceneData& _internal_agv_param() const;
  ::agv_map::sceneData* _internal_mutable_agv_param();
  public:
  void unsafe_arena_set_allocated_agv_param(
      ::agv_map::sceneData* agv_param);
  ::agv_map::sceneData* unsafe_arena_release_agv_param();

  // .agv_map.sceneData avo_param = 5;
  bool has_avo_param() const;
  private:
  bool _internal_has_avo_param() const;
  public:
  void clear_avo_param();
  const ::agv_map::sceneData& avo_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_avo_param();
  ::agv_map::sceneData* mutable_avo_param();
  void set_allocated_avo_param(::agv_map::sceneData* avo_param);
  private:
  const ::agv_map::sceneData& _internal_avo_param() const;
  ::agv_map::sceneData* _internal_mutable_avo_param();
  public:
  void unsafe_arena_set_allocated_avo_param(
      ::agv_map::sceneData* avo_param);
  ::agv_map::sceneData* unsafe_arena_release_avo_param();

  // .agv_map.sceneData ctl_param = 6;
  bool has_ctl_param() const;
  private:
  bool _internal_has_ctl_param() const;
  public:
  void clear_ctl_param();
  const ::agv_map::sceneData& ctl_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_ctl_param();
  ::agv_map::sceneData* mutable_ctl_param();
  void set_allocated_ctl_param(::agv_map::sceneData* ctl_param);
  private:
  const ::agv_map::sceneData& _internal_ctl_param() const;
  ::agv_map::sceneData* _internal_mutable_ctl_param();
  public:
  void unsafe_arena_set_allocated_ctl_param(
      ::agv_map::sceneData* ctl_param);
  ::agv_map::sceneData* unsafe_arena_release_ctl_param();

  // .agv_map.sceneData rut_param = 7;
  bool has_rut_param() const;
  private:
  bool _internal_has_rut_param() const;
  public:
  void clear_rut_param();
  const ::agv_map::sceneData& rut_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_rut_param();
  ::agv_map::sceneData* mutable_rut_param();
  void set_allocated_rut_param(::agv_map::sceneData* rut_param);
  private:
  const ::agv_map::sceneData& _internal_rut_param() const;
  ::agv_map::sceneData* _internal_mutable_rut_param();
  public:
  void unsafe_arena_set_allocated_rut_param(
      ::agv_map::sceneData* rut_param);
  ::agv_map::sceneData* unsafe_arena_release_rut_param();

  // .agv_map.sceneData act_param = 8;
  bool has_act_param() const;
  private:
  bool _internal_has_act_param() const;
  public:
  void clear_act_param();
  const ::agv_map::sceneData& act_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_act_param();
  ::agv_map::sceneData* mutable_act_param();
  void set_allocated_act_param(::agv_map::sceneData* act_param);
  private:
  const ::agv_map::sceneData& _internal_act_param() const;
  ::agv_map::sceneData* _internal_mutable_act_param();
  public:
  void unsafe_arena_set_allocated_act_param(
      ::agv_map::sceneData* act_param);
  ::agv_map::sceneData* unsafe_arena_release_act_param();

  // .agv_map.Node.Sim_param sim_param = 9;
  bool has_sim_param() const;
  private:
  bool _internal_has_sim_param() const;
  public:
  void clear_sim_param();
  const ::agv_map::Node_Sim_param& sim_param() const;
  PROTOBUF_NODISCARD ::agv_map::Node_Sim_param* release_sim_param();
  ::agv_map::Node_Sim_param* mutable_sim_param();
  void set_allocated_sim_param(::agv_map::Node_Sim_param* sim_param);
  private:
  const ::agv_map::Node_Sim_param& _internal_sim_param() const;
  ::agv_map::Node_Sim_param* _internal_mutable_sim_param();
  public:
  void unsafe_arena_set_allocated_sim_param(
      ::agv_map::Node_Sim_param* sim_param);
  ::agv_map::Node_Sim_param* unsafe_arena_release_sim_param();

  // @@protoc_insertion_point(class_scope:agv_map.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > in_area_;
    mutable std::atomic<int> _in_area_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > edge_list_;
    mutable std::atomic<int> _edge_list_cached_byte_size_;
    ::agv_map::Node_Basic* basic_;
    ::agv_map::sceneData* agv_param_;
    ::agv_map::sceneData* avo_param_;
    ::agv_map::sceneData* ctl_param_;
    ::agv_map::sceneData* rut_param_;
    ::agv_map::sceneData* act_param_;
    ::agv_map::Node_Sim_param* sim_param_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Basic_AgvTypeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Edge_Basic_AgvTypeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Edge_Basic_AgvTypeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Edge_Basic_AgvTypeEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Edge_Basic_AgvTypeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Edge_Basic_AgvTypeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Edge_Basic_AgvTypeEntry_DoNotUse& other);
  static const Edge_Basic_AgvTypeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Edge_Basic_AgvTypeEntry_DoNotUse*>(&_Edge_Basic_AgvTypeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Edge.Basic.AgvTypeEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Edge.Basic.AgvTypeEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Edge_Basic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Edge.Basic) */ {
 public:
  inline Edge_Basic() : Edge_Basic(nullptr) {}
  ~Edge_Basic() override;
  explicit PROTOBUF_CONSTEXPR Edge_Basic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge_Basic(const Edge_Basic& from);
  Edge_Basic(Edge_Basic&& from) noexcept
    : Edge_Basic() {
    *this = ::std::move(from);
  }

  inline Edge_Basic& operator=(const Edge_Basic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Basic& operator=(Edge_Basic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge_Basic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge_Basic* internal_default_instance() {
    return reinterpret_cast<const Edge_Basic*>(
               &_Edge_Basic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Edge_Basic& a, Edge_Basic& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Basic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Basic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge_Basic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge_Basic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge_Basic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge_Basic& from) {
    Edge_Basic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Basic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Edge.Basic";
  }
  protected:
  explicit Edge_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAgvTypeFieldNumber = 8,
    kStartPosFieldNumber = 4,
    kEndPosFieldNumber = 6,
    kArcFieldNumber = 13,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kStartIdFieldNumber = 3,
    kEndIdFieldNumber = 5,
    kSeglenFieldNumber = 7,
    kEnableFieldNumber = 9,
    kFloorFieldNumber = 10,
    kTransAngleFieldNumber = 11,
    kOrientationAngleFieldNumber = 12,
    kBothwaysFieldNumber = 14,
    kAFieldNumber = 15,
    kBFieldNumber = 16,
    kCFieldNumber = 17,
    kSpeedMaxFieldNumber = 18,
    kBondSegIdFieldNumber = 19,
  };
  // map<string, string> agv_type = 8;
  int agv_type_size() const;
  private:
  int _internal_agv_type_size() const;
  public:
  void clear_agv_type();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_agv_type() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_agv_type();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      agv_type() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_agv_type();

  // .agv_map.Position start_pos = 4;
  bool has_start_pos() const;
  private:
  bool _internal_has_start_pos() const;
  public:
  void clear_start_pos();
  const ::agv_map::Position& start_pos() const;
  PROTOBUF_NODISCARD ::agv_map::Position* release_start_pos();
  ::agv_map::Position* mutable_start_pos();
  void set_allocated_start_pos(::agv_map::Position* start_pos);
  private:
  const ::agv_map::Position& _internal_start_pos() const;
  ::agv_map::Position* _internal_mutable_start_pos();
  public:
  void unsafe_arena_set_allocated_start_pos(
      ::agv_map::Position* start_pos);
  ::agv_map::Position* unsafe_arena_release_start_pos();

  // .agv_map.Position end_pos = 6;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::agv_map::Position& end_pos() const;
  PROTOBUF_NODISCARD ::agv_map::Position* release_end_pos();
  ::agv_map::Position* mutable_end_pos();
  void set_allocated_end_pos(::agv_map::Position* end_pos);
  private:
  const ::agv_map::Position& _internal_end_pos() const;
  ::agv_map::Position* _internal_mutable_end_pos();
  public:
  void unsafe_arena_set_allocated_end_pos(
      ::agv_map::Position* end_pos);
  ::agv_map::Position* unsafe_arena_release_end_pos();

  // .agv_map.Edge.Arc arc = 13;
  bool has_arc() const;
  private:
  bool _internal_has_arc() const;
  public:
  void clear_arc();
  const ::agv_map::Edge_Arc& arc() const;
  PROTOBUF_NODISCARD ::agv_map::Edge_Arc* release_arc();
  ::agv_map::Edge_Arc* mutable_arc();
  void set_allocated_arc(::agv_map::Edge_Arc* arc);
  private:
  const ::agv_map::Edge_Arc& _internal_arc() const;
  ::agv_map::Edge_Arc* _internal_mutable_arc();
  public:
  void unsafe_arena_set_allocated_arc(
      ::agv_map::Edge_Arc* arc);
  ::agv_map::Edge_Arc* unsafe_arena_release_arc();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 start_id = 3;
  void clear_start_id();
  int32_t start_id() const;
  void set_start_id(int32_t value);
  private:
  int32_t _internal_start_id() const;
  void _internal_set_start_id(int32_t value);
  public:

  // int32 end_id = 5;
  void clear_end_id();
  int32_t end_id() const;
  void set_end_id(int32_t value);
  private:
  int32_t _internal_end_id() const;
  void _internal_set_end_id(int32_t value);
  public:

  // int32 seglen = 7;
  void clear_seglen();
  int32_t seglen() const;
  void set_seglen(int32_t value);
  private:
  int32_t _internal_seglen() const;
  void _internal_set_seglen(int32_t value);
  public:

  // int32 enable = 9;
  void clear_enable();
  int32_t enable() const;
  void set_enable(int32_t value);
  private:
  int32_t _internal_enable() const;
  void _internal_set_enable(int32_t value);
  public:

  // sint32 floor = 10;
  void clear_floor();
  int32_t floor() const;
  void set_floor(int32_t value);
  private:
  int32_t _internal_floor() const;
  void _internal_set_floor(int32_t value);
  public:

  // int32 trans_angle = 11;
  void clear_trans_angle();
  int32_t trans_angle() const;
  void set_trans_angle(int32_t value);
  private:
  int32_t _internal_trans_angle() const;
  void _internal_set_trans_angle(int32_t value);
  public:

  // float orientation_angle = 12;
  void clear_orientation_angle();
  float orientation_angle() const;
  void set_orientation_angle(float value);
  private:
  float _internal_orientation_angle() const;
  void _internal_set_orientation_angle(float value);
  public:

  // sint32 bothways = 14;
  void clear_bothways();
  int32_t bothways() const;
  void set_bothways(int32_t value);
  private:
  int32_t _internal_bothways() const;
  void _internal_set_bothways(int32_t value);
  public:

  // int32 a = 15;
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // int32 b = 16;
  void clear_b();
  int32_t b() const;
  void set_b(int32_t value);
  private:
  int32_t _internal_b() const;
  void _internal_set_b(int32_t value);
  public:

  // int32 c = 17;
  void clear_c();
  int32_t c() const;
  void set_c(int32_t value);
  private:
  int32_t _internal_c() const;
  void _internal_set_c(int32_t value);
  public:

  // int32 speed_max = 18;
  void clear_speed_max();
  int32_t speed_max() const;
  void set_speed_max(int32_t value);
  private:
  int32_t _internal_speed_max() const;
  void _internal_set_speed_max(int32_t value);
  public:

  // int32 bond_seg_id = 19;
  void clear_bond_seg_id();
  int32_t bond_seg_id() const;
  void set_bond_seg_id(int32_t value);
  private:
  int32_t _internal_bond_seg_id() const;
  void _internal_set_bond_seg_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Edge.Basic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Edge_Basic_AgvTypeEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> agv_type_;
    ::agv_map::Position* start_pos_;
    ::agv_map::Position* end_pos_;
    ::agv_map::Edge_Arc* arc_;
    int32_t id_;
    int32_t type_;
    int32_t start_id_;
    int32_t end_id_;
    int32_t seglen_;
    int32_t enable_;
    int32_t floor_;
    int32_t trans_angle_;
    float orientation_angle_;
    int32_t bothways_;
    int32_t a_;
    int32_t b_;
    int32_t c_;
    int32_t speed_max_;
    int32_t bond_seg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Arc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Edge.Arc) */ {
 public:
  inline Edge_Arc() : Edge_Arc(nullptr) {}
  ~Edge_Arc() override;
  explicit PROTOBUF_CONSTEXPR Edge_Arc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge_Arc(const Edge_Arc& from);
  Edge_Arc(Edge_Arc&& from) noexcept
    : Edge_Arc() {
    *this = ::std::move(from);
  }

  inline Edge_Arc& operator=(const Edge_Arc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Arc& operator=(Edge_Arc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge_Arc& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge_Arc* internal_default_instance() {
    return reinterpret_cast<const Edge_Arc*>(
               &_Edge_Arc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Edge_Arc& a, Edge_Arc& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Arc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Arc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge_Arc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge_Arc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge_Arc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge_Arc& from) {
    Edge_Arc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Arc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Edge.Arc";
  }
  protected:
  explicit Edge_Arc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenPntFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kClockdirFieldNumber = 3,
  };
  // .agv_map.Coord cen_pnt = 1;
  bool has_cen_pnt() const;
  private:
  bool _internal_has_cen_pnt() const;
  public:
  void clear_cen_pnt();
  const ::agv_map::Coord& cen_pnt() const;
  PROTOBUF_NODISCARD ::agv_map::Coord* release_cen_pnt();
  ::agv_map::Coord* mutable_cen_pnt();
  void set_allocated_cen_pnt(::agv_map::Coord* cen_pnt);
  private:
  const ::agv_map::Coord& _internal_cen_pnt() const;
  ::agv_map::Coord* _internal_mutable_cen_pnt();
  public:
  void unsafe_arena_set_allocated_cen_pnt(
      ::agv_map::Coord* cen_pnt);
  ::agv_map::Coord* unsafe_arena_release_cen_pnt();

  // int32 radius = 2;
  void clear_radius();
  int32_t radius() const;
  void set_radius(int32_t value);
  private:
  int32_t _internal_radius() const;
  void _internal_set_radius(int32_t value);
  public:

  // sint32 clockdir = 3;
  void clear_clockdir();
  int32_t clockdir() const;
  void set_clockdir(int32_t value);
  private:
  int32_t _internal_clockdir() const;
  void _internal_set_clockdir(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Edge.Arc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::agv_map::Coord* cen_pnt_;
    int32_t radius_;
    int32_t clockdir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Edge_Basic Basic;
  typedef Edge_Arc Arc;

  // accessors -------------------------------------------------------

  enum : int {
    kInAreaFieldNumber = 2,
    kControlPointFieldNumber = 8,
    kCurvePointFieldNumber = 9,
    kBasicFieldNumber = 1,
    kAgvParamFieldNumber = 3,
    kAvoParamFieldNumber = 4,
    kCtlParamFieldNumber = 5,
    kRutParamFieldNumber = 6,
    kActParamFieldNumber = 7,
  };
  // repeated int32 in_area = 2;
  int in_area_size() const;
  private:
  int _internal_in_area_size() const;
  public:
  void clear_in_area();
  private:
  int32_t _internal_in_area(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_in_area() const;
  void _internal_add_in_area(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_in_area();
  public:
  int32_t in_area(int index) const;
  void set_in_area(int index, int32_t value);
  void add_in_area(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      in_area() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_in_area();

  // repeated .agv_map.Coord control_point = 8;
  int control_point_size() const;
  private:
  int _internal_control_point_size() const;
  public:
  void clear_control_point();
  ::agv_map::Coord* mutable_control_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >*
      mutable_control_point();
  private:
  const ::agv_map::Coord& _internal_control_point(int index) const;
  ::agv_map::Coord* _internal_add_control_point();
  public:
  const ::agv_map::Coord& control_point(int index) const;
  ::agv_map::Coord* add_control_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >&
      control_point() const;

  // repeated .agv_map.Position curve_point = 9;
  int curve_point_size() const;
  private:
  int _internal_curve_point_size() const;
  public:
  void clear_curve_point();
  ::agv_map::Position* mutable_curve_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Position >*
      mutable_curve_point();
  private:
  const ::agv_map::Position& _internal_curve_point(int index) const;
  ::agv_map::Position* _internal_add_curve_point();
  public:
  const ::agv_map::Position& curve_point(int index) const;
  ::agv_map::Position* add_curve_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Position >&
      curve_point() const;

  // .agv_map.Edge.Basic basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::agv_map::Edge_Basic& basic() const;
  PROTOBUF_NODISCARD ::agv_map::Edge_Basic* release_basic();
  ::agv_map::Edge_Basic* mutable_basic();
  void set_allocated_basic(::agv_map::Edge_Basic* basic);
  private:
  const ::agv_map::Edge_Basic& _internal_basic() const;
  ::agv_map::Edge_Basic* _internal_mutable_basic();
  public:
  void unsafe_arena_set_allocated_basic(
      ::agv_map::Edge_Basic* basic);
  ::agv_map::Edge_Basic* unsafe_arena_release_basic();

  // .agv_map.sceneData agv_param = 3;
  bool has_agv_param() const;
  private:
  bool _internal_has_agv_param() const;
  public:
  void clear_agv_param();
  const ::agv_map::sceneData& agv_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_agv_param();
  ::agv_map::sceneData* mutable_agv_param();
  void set_allocated_agv_param(::agv_map::sceneData* agv_param);
  private:
  const ::agv_map::sceneData& _internal_agv_param() const;
  ::agv_map::sceneData* _internal_mutable_agv_param();
  public:
  void unsafe_arena_set_allocated_agv_param(
      ::agv_map::sceneData* agv_param);
  ::agv_map::sceneData* unsafe_arena_release_agv_param();

  // .agv_map.sceneData avo_param = 4;
  bool has_avo_param() const;
  private:
  bool _internal_has_avo_param() const;
  public:
  void clear_avo_param();
  const ::agv_map::sceneData& avo_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_avo_param();
  ::agv_map::sceneData* mutable_avo_param();
  void set_allocated_avo_param(::agv_map::sceneData* avo_param);
  private:
  const ::agv_map::sceneData& _internal_avo_param() const;
  ::agv_map::sceneData* _internal_mutable_avo_param();
  public:
  void unsafe_arena_set_allocated_avo_param(
      ::agv_map::sceneData* avo_param);
  ::agv_map::sceneData* unsafe_arena_release_avo_param();

  // .agv_map.sceneData ctl_param = 5;
  bool has_ctl_param() const;
  private:
  bool _internal_has_ctl_param() const;
  public:
  void clear_ctl_param();
  const ::agv_map::sceneData& ctl_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_ctl_param();
  ::agv_map::sceneData* mutable_ctl_param();
  void set_allocated_ctl_param(::agv_map::sceneData* ctl_param);
  private:
  const ::agv_map::sceneData& _internal_ctl_param() const;
  ::agv_map::sceneData* _internal_mutable_ctl_param();
  public:
  void unsafe_arena_set_allocated_ctl_param(
      ::agv_map::sceneData* ctl_param);
  ::agv_map::sceneData* unsafe_arena_release_ctl_param();

  // .agv_map.sceneData rut_param = 6;
  bool has_rut_param() const;
  private:
  bool _internal_has_rut_param() const;
  public:
  void clear_rut_param();
  const ::agv_map::sceneData& rut_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_rut_param();
  ::agv_map::sceneData* mutable_rut_param();
  void set_allocated_rut_param(::agv_map::sceneData* rut_param);
  private:
  const ::agv_map::sceneData& _internal_rut_param() const;
  ::agv_map::sceneData* _internal_mutable_rut_param();
  public:
  void unsafe_arena_set_allocated_rut_param(
      ::agv_map::sceneData* rut_param);
  ::agv_map::sceneData* unsafe_arena_release_rut_param();

  // .agv_map.sceneData act_param = 7;
  bool has_act_param() const;
  private:
  bool _internal_has_act_param() const;
  public:
  void clear_act_param();
  const ::agv_map::sceneData& act_param() const;
  PROTOBUF_NODISCARD ::agv_map::sceneData* release_act_param();
  ::agv_map::sceneData* mutable_act_param();
  void set_allocated_act_param(::agv_map::sceneData* act_param);
  private:
  const ::agv_map::sceneData& _internal_act_param() const;
  ::agv_map::sceneData* _internal_mutable_act_param();
  public:
  void unsafe_arena_set_allocated_act_param(
      ::agv_map::sceneData* act_param);
  ::agv_map::sceneData* unsafe_arena_release_act_param();

  // @@protoc_insertion_point(class_scope:agv_map.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > in_area_;
    mutable std::atomic<int> _in_area_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord > control_point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Position > curve_point_;
    ::agv_map::Edge_Basic* basic_;
    ::agv_map::sceneData* agv_param_;
    ::agv_map::sceneData* avo_param_;
    ::agv_map::sceneData* ctl_param_;
    ::agv_map::sceneData* rut_param_;
    ::agv_map::sceneData* act_param_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Area_ParamEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Area_ParamEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Area_ParamEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Area_ParamEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Area_ParamEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Area_ParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Area_ParamEntry_DoNotUse& other);
  static const Area_ParamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Area_ParamEntry_DoNotUse*>(&_Area_ParamEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Area.ParamEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Area.ParamEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Area_AgvNumEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Area_AgvNumEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Area_AgvNumEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Area_AgvNumEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Area_AgvNumEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Area_AgvNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Area_AgvNumEntry_DoNotUse& other);
  static const Area_AgvNumEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Area_AgvNumEntry_DoNotUse*>(&_Area_AgvNumEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Area.AgvNumEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Area.AgvNumEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Area_Basic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Area.Basic) */ {
 public:
  inline Area_Basic() : Area_Basic(nullptr) {}
  ~Area_Basic() override;
  explicit PROTOBUF_CONSTEXPR Area_Basic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Area_Basic(const Area_Basic& from);
  Area_Basic(Area_Basic&& from) noexcept
    : Area_Basic() {
    *this = ::std::move(from);
  }

  inline Area_Basic& operator=(const Area_Basic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Area_Basic& operator=(Area_Basic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Area_Basic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Area_Basic* internal_default_instance() {
    return reinterpret_cast<const Area_Basic*>(
               &_Area_Basic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Area_Basic& a, Area_Basic& b) {
    a.Swap(&b);
  }
  inline void Swap(Area_Basic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Area_Basic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Area_Basic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Area_Basic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Area_Basic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Area_Basic& from) {
    Area_Basic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Area_Basic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Area.Basic";
  }
  protected:
  explicit Area_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Area.Basic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Area final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Area) */ {
 public:
  inline Area() : Area(nullptr) {}
  ~Area() override;
  explicit PROTOBUF_CONSTEXPR Area(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Area(const Area& from);
  Area(Area&& from) noexcept
    : Area() {
    *this = ::std::move(from);
  }

  inline Area& operator=(const Area& from) {
    CopyFrom(from);
    return *this;
  }
  inline Area& operator=(Area&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Area& default_instance() {
    return *internal_default_instance();
  }
  static inline const Area* internal_default_instance() {
    return reinterpret_cast<const Area*>(
               &_Area_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Area& a, Area& b) {
    a.Swap(&b);
  }
  inline void Swap(Area* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Area* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Area* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Area>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Area& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Area& from) {
    Area::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Area* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Area";
  }
  protected:
  explicit Area(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Area_Basic Basic;

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 2,
    kVertexListFieldNumber = 3,
    kNodeInFieldNumber = 4,
    kAgvNumFieldNumber = 5,
    kRelateAreaFieldNumber = 6,
    kBasicFieldNumber = 1,
  };
  // map<string, string> param = 2;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_param();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_param();

  // repeated .agv_map.Coord vertex_list = 3;
  int vertex_list_size() const;
  private:
  int _internal_vertex_list_size() const;
  public:
  void clear_vertex_list();
  ::agv_map::Coord* mutable_vertex_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >*
      mutable_vertex_list();
  private:
  const ::agv_map::Coord& _internal_vertex_list(int index) const;
  ::agv_map::Coord* _internal_add_vertex_list();
  public:
  const ::agv_map::Coord& vertex_list(int index) const;
  ::agv_map::Coord* add_vertex_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >&
      vertex_list() const;

  // repeated int32 node_in = 4;
  int node_in_size() const;
  private:
  int _internal_node_in_size() const;
  public:
  void clear_node_in();
  private:
  int32_t _internal_node_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_node_in() const;
  void _internal_add_node_in(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_node_in();
  public:
  int32_t node_in(int index) const;
  void set_node_in(int index, int32_t value);
  void add_node_in(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      node_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_node_in();

  // map<string, string> agv_num = 5;
  int agv_num_size() const;
  private:
  int _internal_agv_num_size() const;
  public:
  void clear_agv_num();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_agv_num() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_agv_num();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      agv_num() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_agv_num();

  // repeated int32 relate_area = 6;
  int relate_area_size() const;
  private:
  int _internal_relate_area_size() const;
  public:
  void clear_relate_area();
  private:
  int32_t _internal_relate_area(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_relate_area() const;
  void _internal_add_relate_area(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_relate_area();
  public:
  int32_t relate_area(int index) const;
  void set_relate_area(int index, int32_t value);
  void add_relate_area(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      relate_area() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_relate_area();

  // .agv_map.Area.Basic basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::agv_map::Area_Basic& basic() const;
  PROTOBUF_NODISCARD ::agv_map::Area_Basic* release_basic();
  ::agv_map::Area_Basic* mutable_basic();
  void set_allocated_basic(::agv_map::Area_Basic* basic);
  private:
  const ::agv_map::Area_Basic& _internal_basic() const;
  ::agv_map::Area_Basic* _internal_mutable_basic();
  public:
  void unsafe_arena_set_allocated_basic(
      ::agv_map::Area_Basic* basic);
  ::agv_map::Area_Basic* unsafe_arena_release_basic();

  // @@protoc_insertion_point(class_scope:agv_map.Area)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Area_ParamEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> param_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord > vertex_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > node_in_;
    mutable std::atomic<int> _node_in_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Area_AgvNumEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> agv_num_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > relate_area_;
    mutable std::atomic<int> _relate_area_cached_byte_size_;
    ::agv_map::Area_Basic* basic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Coord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Coord) */ {
 public:
  inline Coord() : Coord(nullptr) {}
  ~Coord() override;
  explicit PROTOBUF_CONSTEXPR Coord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coord(const Coord& from);
  Coord(Coord&& from) noexcept
    : Coord() {
    *this = ::std::move(from);
  }

  inline Coord& operator=(const Coord& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coord& operator=(Coord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coord& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coord* internal_default_instance() {
    return reinterpret_cast<const Coord*>(
               &_Coord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Coord& a, Coord& b) {
    a.Swap(&b);
  }
  inline void Swap(Coord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coord& from) {
    Coord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Coord";
  }
  protected:
  explicit Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // sint32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // sint32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Coord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kAngleFieldNumber = 3,
  };
  // sint32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // sint32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // float angle = 3;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    float angle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Segment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Segment) */ {
 public:
  inline Segment() : Segment(nullptr) {}
  ~Segment() override;
  explicit PROTOBUF_CONSTEXPR Segment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Segment(const Segment& from);
  Segment(Segment&& from) noexcept
    : Segment() {
    *this = ::std::move(from);
  }

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment& operator=(Segment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Segment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Segment* internal_default_instance() {
    return reinterpret_cast<const Segment*>(
               &_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Segment& a, Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Segment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Segment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Segment& from) {
    Segment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Segment";
  }
  protected:
  explicit Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdge1FieldNumber = 5,
    kEdge2FieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDirModeFieldNumber = 3,
    kLockFieldNumber = 4,
  };
  // .agv_map.Edge edge_1 = 5;
  bool has_edge_1() const;
  private:
  bool _internal_has_edge_1() const;
  public:
  void clear_edge_1();
  const ::agv_map::Edge& edge_1() const;
  PROTOBUF_NODISCARD ::agv_map::Edge* release_edge_1();
  ::agv_map::Edge* mutable_edge_1();
  void set_allocated_edge_1(::agv_map::Edge* edge_1);
  private:
  const ::agv_map::Edge& _internal_edge_1() const;
  ::agv_map::Edge* _internal_mutable_edge_1();
  public:
  void unsafe_arena_set_allocated_edge_1(
      ::agv_map::Edge* edge_1);
  ::agv_map::Edge* unsafe_arena_release_edge_1();

  // .agv_map.Edge edge_2 = 6;
  bool has_edge_2() const;
  private:
  bool _internal_has_edge_2() const;
  public:
  void clear_edge_2();
  const ::agv_map::Edge& edge_2() const;
  PROTOBUF_NODISCARD ::agv_map::Edge* release_edge_2();
  ::agv_map::Edge* mutable_edge_2();
  void set_allocated_edge_2(::agv_map::Edge* edge_2);
  private:
  const ::agv_map::Edge& _internal_edge_2() const;
  ::agv_map::Edge* _internal_mutable_edge_2();
  public:
  void unsafe_arena_set_allocated_edge_2(
      ::agv_map::Edge* edge_2);
  ::agv_map::Edge* unsafe_arena_release_edge_2();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // sint32 dir_mode = 3;
  void clear_dir_mode();
  int32_t dir_mode() const;
  void set_dir_mode(int32_t value);
  private:
  int32_t _internal_dir_mode() const;
  void _internal_set_dir_mode(int32_t value);
  public:

  // int32 lock = 4;
  void clear_lock();
  int32_t lock() const;
  void set_lock(int32_t value);
  private:
  int32_t _internal_lock() const;
  void _internal_set_lock(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Segment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::agv_map::Edge* edge_1_;
    ::agv_map::Edge* edge_2_;
    int32_t id_;
    int32_t type_;
    int32_t dir_mode_;
    int32_t lock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_AgvDescEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_AgvDescEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_AgvDescEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Describe_AgvDescEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_AgvDescEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_AgvDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_AgvDescEntry_DoNotUse& other);
  static const Describe_AgvDescEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_AgvDescEntry_DoNotUse*>(&_Describe_AgvDescEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.AgvDescEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.AgvDescEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_CtlDescEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_CtlDescEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_CtlDescEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Describe_CtlDescEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_CtlDescEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_CtlDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_CtlDescEntry_DoNotUse& other);
  static const Describe_CtlDescEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_CtlDescEntry_DoNotUse*>(&_Describe_CtlDescEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.CtlDescEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.CtlDescEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_AvoDescEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_AvoDescEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_AvoDescEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Describe_AvoDescEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_AvoDescEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_AvoDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_AvoDescEntry_DoNotUse& other);
  static const Describe_AvoDescEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_AvoDescEntry_DoNotUse*>(&_Describe_AvoDescEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.AvoDescEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.AvoDescEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_RutDescEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_RutDescEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_RutDescEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Describe_RutDescEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_RutDescEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_RutDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_RutDescEntry_DoNotUse& other);
  static const Describe_RutDescEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_RutDescEntry_DoNotUse*>(&_Describe_RutDescEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.RutDescEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.RutDescEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_ActionDescEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ActionDescEntry_DoNotUse, 
    std::string, ::agv_map::Describe_dataDesc,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ActionDescEntry_DoNotUse, 
    std::string, ::agv_map::Describe_dataDesc,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Describe_ActionDescEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_ActionDescEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_ActionDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_ActionDescEntry_DoNotUse& other);
  static const Describe_ActionDescEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_ActionDescEntry_DoNotUse*>(&_Describe_ActionDescEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.ActionDescEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_AreaDescEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_AreaDescEntry_DoNotUse, 
    std::string, ::agv_map::Describe_dataDesc,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_AreaDescEntry_DoNotUse, 
    std::string, ::agv_map::Describe_dataDesc,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Describe_AreaDescEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_AreaDescEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_AreaDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_AreaDescEntry_DoNotUse& other);
  static const Describe_AreaDescEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_AreaDescEntry_DoNotUse*>(&_Describe_AreaDescEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.AreaDescEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_ParamTmplEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ParamTmplEntry_DoNotUse, 
    std::string, ::agv_map::Describe_ParamTmpl,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ParamTmplEntry_DoNotUse, 
    std::string, ::agv_map::Describe_ParamTmpl,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Describe_ParamTmplEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_ParamTmplEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_ParamTmplEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_ParamTmplEntry_DoNotUse& other);
  static const Describe_ParamTmplEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_ParamTmplEntry_DoNotUse*>(&_Describe_ParamTmplEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.ParamTmplEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_ActionTmplEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ActionTmplEntry_DoNotUse, 
    std::string, ::agv_map::Describe_actionTmpl,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ActionTmplEntry_DoNotUse, 
    std::string, ::agv_map::Describe_actionTmpl,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Describe_ActionTmplEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_ActionTmplEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_ActionTmplEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_ActionTmplEntry_DoNotUse& other);
  static const Describe_ActionTmplEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_ActionTmplEntry_DoNotUse*>(&_Describe_ActionTmplEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.ActionTmplEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_TaskActionTmplEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_TaskActionTmplEntry_DoNotUse, 
    std::string, ::agv_map::Describe_taskActionTmpl,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_TaskActionTmplEntry_DoNotUse, 
    std::string, ::agv_map::Describe_taskActionTmpl,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Describe_TaskActionTmplEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_TaskActionTmplEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_TaskActionTmplEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_TaskActionTmplEntry_DoNotUse& other);
  static const Describe_TaskActionTmplEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_TaskActionTmplEntry_DoNotUse*>(&_Describe_TaskActionTmplEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.TaskActionTmplEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_ParamTmpl_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ParamTmpl_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ParamTmpl_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Describe_ParamTmpl_DataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_ParamTmpl_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_ParamTmpl_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_ParamTmpl_DataEntry_DoNotUse& other);
  static const Describe_ParamTmpl_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_ParamTmpl_DataEntry_DoNotUse*>(&_Describe_ParamTmpl_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.ParamTmpl.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.ParamTmpl.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse, 
    std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse, 
    std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse& other);
  static const Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse*>(&_Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.ParamTmpl.ParamInstanceListEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse& other);
  static const Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse*>(&_Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.ParamTmpl.paramTmplInstance.ParamEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.ParamTmpl.paramTmplInstance.ParamEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_ParamTmpl_paramTmplInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.ParamTmpl.paramTmplInstance) */ {
 public:
  inline Describe_ParamTmpl_paramTmplInstance() : Describe_ParamTmpl_paramTmplInstance(nullptr) {}
  ~Describe_ParamTmpl_paramTmplInstance() override;
  explicit PROTOBUF_CONSTEXPR Describe_ParamTmpl_paramTmplInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_ParamTmpl_paramTmplInstance(const Describe_ParamTmpl_paramTmplInstance& from);
  Describe_ParamTmpl_paramTmplInstance(Describe_ParamTmpl_paramTmplInstance&& from) noexcept
    : Describe_ParamTmpl_paramTmplInstance() {
    *this = ::std::move(from);
  }

  inline Describe_ParamTmpl_paramTmplInstance& operator=(const Describe_ParamTmpl_paramTmplInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_ParamTmpl_paramTmplInstance& operator=(Describe_ParamTmpl_paramTmplInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_ParamTmpl_paramTmplInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_ParamTmpl_paramTmplInstance* internal_default_instance() {
    return reinterpret_cast<const Describe_ParamTmpl_paramTmplInstance*>(
               &_Describe_ParamTmpl_paramTmplInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Describe_ParamTmpl_paramTmplInstance& a, Describe_ParamTmpl_paramTmplInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_ParamTmpl_paramTmplInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_ParamTmpl_paramTmplInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_ParamTmpl_paramTmplInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_ParamTmpl_paramTmplInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_ParamTmpl_paramTmplInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_ParamTmpl_paramTmplInstance& from) {
    Describe_ParamTmpl_paramTmplInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_ParamTmpl_paramTmplInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.ParamTmpl.paramTmplInstance";
  }
  protected:
  explicit Describe_ParamTmpl_paramTmplInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 3,
    kDescribeFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // map<string, string> param = 3;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_param();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_param();

  // string describe = 1;
  void clear_describe();
  const std::string& describe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_describe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_describe();
  PROTOBUF_NODISCARD std::string* release_describe();
  void set_allocated_describe(std::string* describe);
  private:
  const std::string& _internal_describe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_describe(const std::string& value);
  std::string* _internal_mutable_describe();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.ParamTmpl.paramTmplInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_ParamTmpl_paramTmplInstance_ParamEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> param_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr describe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_ParamTmpl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.ParamTmpl) */ {
 public:
  inline Describe_ParamTmpl() : Describe_ParamTmpl(nullptr) {}
  ~Describe_ParamTmpl() override;
  explicit PROTOBUF_CONSTEXPR Describe_ParamTmpl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_ParamTmpl(const Describe_ParamTmpl& from);
  Describe_ParamTmpl(Describe_ParamTmpl&& from) noexcept
    : Describe_ParamTmpl() {
    *this = ::std::move(from);
  }

  inline Describe_ParamTmpl& operator=(const Describe_ParamTmpl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_ParamTmpl& operator=(Describe_ParamTmpl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_ParamTmpl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_ParamTmpl* internal_default_instance() {
    return reinterpret_cast<const Describe_ParamTmpl*>(
               &_Describe_ParamTmpl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Describe_ParamTmpl& a, Describe_ParamTmpl& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_ParamTmpl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_ParamTmpl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_ParamTmpl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_ParamTmpl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_ParamTmpl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_ParamTmpl& from) {
    Describe_ParamTmpl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_ParamTmpl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.ParamTmpl";
  }
  protected:
  explicit Describe_ParamTmpl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Describe_ParamTmpl_paramTmplInstance paramTmplInstance;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kParamInstanceListFieldNumber = 3,
    kDescFieldNumber = 1,
  };
  // map<string, string> data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // map<string, .agv_map.Describe.ParamTmpl.paramTmplInstance> param_instance_list = 3;
  int param_instance_list_size() const;
  private:
  int _internal_param_instance_list_size() const;
  public:
  void clear_param_instance_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >&
      _internal_param_instance_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >*
      _internal_mutable_param_instance_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >&
      param_instance_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >*
      mutable_param_instance_list();

  // string desc = 1;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.ParamTmpl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_ParamTmpl_DataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_ParamTmpl_ParamInstanceListEntry_DoNotUse,
        std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> param_instance_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_actionTmpl_ActInstanceListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_actionTmpl_ActInstanceListEntry_DoNotUse, 
    std::string, ::agv_map::Describe_actionTmpl_actTmplInstance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_actionTmpl_ActInstanceListEntry_DoNotUse, 
    std::string, ::agv_map::Describe_actionTmpl_actTmplInstance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Describe_actionTmpl_ActInstanceListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_actionTmpl_ActInstanceListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_actionTmpl_ActInstanceListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_actionTmpl_ActInstanceListEntry_DoNotUse& other);
  static const Describe_actionTmpl_ActInstanceListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_actionTmpl_ActInstanceListEntry_DoNotUse*>(&_Describe_actionTmpl_ActInstanceListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.actionTmpl.ActInstanceListEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_actionTmpl_action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.actionTmpl.action) */ {
 public:
  inline Describe_actionTmpl_action() : Describe_actionTmpl_action(nullptr) {}
  ~Describe_actionTmpl_action() override;
  explicit PROTOBUF_CONSTEXPR Describe_actionTmpl_action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_actionTmpl_action(const Describe_actionTmpl_action& from);
  Describe_actionTmpl_action(Describe_actionTmpl_action&& from) noexcept
    : Describe_actionTmpl_action() {
    *this = ::std::move(from);
  }

  inline Describe_actionTmpl_action& operator=(const Describe_actionTmpl_action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_actionTmpl_action& operator=(Describe_actionTmpl_action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_actionTmpl_action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_actionTmpl_action* internal_default_instance() {
    return reinterpret_cast<const Describe_actionTmpl_action*>(
               &_Describe_actionTmpl_action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(Describe_actionTmpl_action& a, Describe_actionTmpl_action& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_actionTmpl_action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_actionTmpl_action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_actionTmpl_action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_actionTmpl_action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_actionTmpl_action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_actionTmpl_action& from) {
    Describe_actionTmpl_action::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_actionTmpl_action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.actionTmpl.action";
  }
  protected:
  explicit Describe_actionTmpl_action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBlockTypeFieldNumber = 2,
    kParamFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string block_type = 2;
  void clear_block_type();
  const std::string& block_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_type();
  PROTOBUF_NODISCARD std::string* release_block_type();
  void set_allocated_block_type(std::string* block_type);
  private:
  const std::string& _internal_block_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_type(const std::string& value);
  std::string* _internal_mutable_block_type();
  public:

  // string param = 3;
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.actionTmpl.action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_actionTmpl_actTmplInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.actionTmpl.actTmplInstance) */ {
 public:
  inline Describe_actionTmpl_actTmplInstance() : Describe_actionTmpl_actTmplInstance(nullptr) {}
  ~Describe_actionTmpl_actTmplInstance() override;
  explicit PROTOBUF_CONSTEXPR Describe_actionTmpl_actTmplInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_actionTmpl_actTmplInstance(const Describe_actionTmpl_actTmplInstance& from);
  Describe_actionTmpl_actTmplInstance(Describe_actionTmpl_actTmplInstance&& from) noexcept
    : Describe_actionTmpl_actTmplInstance() {
    *this = ::std::move(from);
  }

  inline Describe_actionTmpl_actTmplInstance& operator=(const Describe_actionTmpl_actTmplInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_actionTmpl_actTmplInstance& operator=(Describe_actionTmpl_actTmplInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_actionTmpl_actTmplInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_actionTmpl_actTmplInstance* internal_default_instance() {
    return reinterpret_cast<const Describe_actionTmpl_actTmplInstance*>(
               &_Describe_actionTmpl_actTmplInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Describe_actionTmpl_actTmplInstance& a, Describe_actionTmpl_actTmplInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_actionTmpl_actTmplInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_actionTmpl_actTmplInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_actionTmpl_actTmplInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_actionTmpl_actTmplInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_actionTmpl_actTmplInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_actionTmpl_actTmplInstance& from) {
    Describe_actionTmpl_actTmplInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_actionTmpl_actTmplInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.actionTmpl.actTmplInstance";
  }
  protected:
  explicit Describe_actionTmpl_actTmplInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActListFieldNumber = 2,
    kDescribeFieldNumber = 1,
  };
  // repeated .agv_map.Describe.actionTmpl.action act_list = 2;
  int act_list_size() const;
  private:
  int _internal_act_list_size() const;
  public:
  void clear_act_list();
  ::agv_map::Describe_actionTmpl_action* mutable_act_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action >*
      mutable_act_list();
  private:
  const ::agv_map::Describe_actionTmpl_action& _internal_act_list(int index) const;
  ::agv_map::Describe_actionTmpl_action* _internal_add_act_list();
  public:
  const ::agv_map::Describe_actionTmpl_action& act_list(int index) const;
  ::agv_map::Describe_actionTmpl_action* add_act_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action >&
      act_list() const;

  // string describe = 1;
  void clear_describe();
  const std::string& describe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_describe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_describe();
  PROTOBUF_NODISCARD std::string* release_describe();
  void set_allocated_describe(std::string* describe);
  private:
  const std::string& _internal_describe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_describe(const std::string& value);
  std::string* _internal_mutable_describe();
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.actionTmpl.actTmplInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action > act_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr describe_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_actionTmpl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.actionTmpl) */ {
 public:
  inline Describe_actionTmpl() : Describe_actionTmpl(nullptr) {}
  ~Describe_actionTmpl() override;
  explicit PROTOBUF_CONSTEXPR Describe_actionTmpl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_actionTmpl(const Describe_actionTmpl& from);
  Describe_actionTmpl(Describe_actionTmpl&& from) noexcept
    : Describe_actionTmpl() {
    *this = ::std::move(from);
  }

  inline Describe_actionTmpl& operator=(const Describe_actionTmpl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_actionTmpl& operator=(Describe_actionTmpl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_actionTmpl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_actionTmpl* internal_default_instance() {
    return reinterpret_cast<const Describe_actionTmpl*>(
               &_Describe_actionTmpl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Describe_actionTmpl& a, Describe_actionTmpl& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_actionTmpl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_actionTmpl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_actionTmpl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_actionTmpl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_actionTmpl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_actionTmpl& from) {
    Describe_actionTmpl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_actionTmpl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.actionTmpl";
  }
  protected:
  explicit Describe_actionTmpl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Describe_actionTmpl_action action;
  typedef Describe_actionTmpl_actTmplInstance actTmplInstance;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kActInstanceListFieldNumber = 3,
    kDescibeFieldNumber = 1,
  };
  // repeated .agv_map.Describe.actionTmpl.action data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::agv_map::Describe_actionTmpl_action* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action >*
      mutable_data();
  private:
  const ::agv_map::Describe_actionTmpl_action& _internal_data(int index) const;
  ::agv_map::Describe_actionTmpl_action* _internal_add_data();
  public:
  const ::agv_map::Describe_actionTmpl_action& data(int index) const;
  ::agv_map::Describe_actionTmpl_action* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action >&
      data() const;

  // map<string, .agv_map.Describe.actionTmpl.actTmplInstance> act_instance_list = 3;
  int act_instance_list_size() const;
  private:
  int _internal_act_instance_list_size() const;
  public:
  void clear_act_instance_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >&
      _internal_act_instance_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >*
      _internal_mutable_act_instance_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >&
      act_instance_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >*
      mutable_act_instance_list();

  // string descibe = 1;
  void clear_descibe();
  const std::string& descibe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descibe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descibe();
  PROTOBUF_NODISCARD std::string* release_descibe();
  void set_allocated_descibe(std::string* descibe);
  private:
  const std::string& _internal_descibe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descibe(const std::string& value);
  std::string* _internal_mutable_descibe();
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.actionTmpl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action > data_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_actionTmpl_ActInstanceListEntry_DoNotUse,
        std::string, ::agv_map::Describe_actionTmpl_actTmplInstance,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> act_instance_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descibe_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse, 
    std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse, 
    std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse& other);
  static const Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse*>(&_Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.taskActionTmpl.ActInstanceListEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_taskActionTmpl_action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.taskActionTmpl.action) */ {
 public:
  inline Describe_taskActionTmpl_action() : Describe_taskActionTmpl_action(nullptr) {}
  ~Describe_taskActionTmpl_action() override;
  explicit PROTOBUF_CONSTEXPR Describe_taskActionTmpl_action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_taskActionTmpl_action(const Describe_taskActionTmpl_action& from);
  Describe_taskActionTmpl_action(Describe_taskActionTmpl_action&& from) noexcept
    : Describe_taskActionTmpl_action() {
    *this = ::std::move(from);
  }

  inline Describe_taskActionTmpl_action& operator=(const Describe_taskActionTmpl_action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_taskActionTmpl_action& operator=(Describe_taskActionTmpl_action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_taskActionTmpl_action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_taskActionTmpl_action* internal_default_instance() {
    return reinterpret_cast<const Describe_taskActionTmpl_action*>(
               &_Describe_taskActionTmpl_action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Describe_taskActionTmpl_action& a, Describe_taskActionTmpl_action& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_taskActionTmpl_action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_taskActionTmpl_action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_taskActionTmpl_action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_taskActionTmpl_action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_taskActionTmpl_action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_taskActionTmpl_action& from) {
    Describe_taskActionTmpl_action::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_taskActionTmpl_action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.taskActionTmpl.action";
  }
  protected:
  explicit Describe_taskActionTmpl_action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionTypeFieldNumber = 1,
    kActionNameFieldNumber = 2,
    kBlockTypeFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string action_type = 1;
  void clear_action_type();
  const std::string& action_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_type();
  PROTOBUF_NODISCARD std::string* release_action_type();
  void set_allocated_action_type(std::string* action_type);
  private:
  const std::string& _internal_action_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_type(const std::string& value);
  std::string* _internal_mutable_action_type();
  public:

  // string action_name = 2;
  void clear_action_name();
  const std::string& action_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_name();
  PROTOBUF_NODISCARD std::string* release_action_name();
  void set_allocated_action_name(std::string* action_name);
  private:
  const std::string& _internal_action_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_name(const std::string& value);
  std::string* _internal_mutable_action_name();
  public:

  // string block_type = 3;
  void clear_block_type();
  const std::string& block_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_type();
  PROTOBUF_NODISCARD std::string* release_block_type();
  void set_allocated_block_type(std::string* block_type);
  private:
  const std::string& _internal_block_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_type(const std::string& value);
  std::string* _internal_mutable_block_type();
  public:

  // string param = 4;
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.taskActionTmpl.action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_taskActionTmpl_actTmplInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.taskActionTmpl.actTmplInstance) */ {
 public:
  inline Describe_taskActionTmpl_actTmplInstance() : Describe_taskActionTmpl_actTmplInstance(nullptr) {}
  ~Describe_taskActionTmpl_actTmplInstance() override;
  explicit PROTOBUF_CONSTEXPR Describe_taskActionTmpl_actTmplInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_taskActionTmpl_actTmplInstance(const Describe_taskActionTmpl_actTmplInstance& from);
  Describe_taskActionTmpl_actTmplInstance(Describe_taskActionTmpl_actTmplInstance&& from) noexcept
    : Describe_taskActionTmpl_actTmplInstance() {
    *this = ::std::move(from);
  }

  inline Describe_taskActionTmpl_actTmplInstance& operator=(const Describe_taskActionTmpl_actTmplInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_taskActionTmpl_actTmplInstance& operator=(Describe_taskActionTmpl_actTmplInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_taskActionTmpl_actTmplInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_taskActionTmpl_actTmplInstance* internal_default_instance() {
    return reinterpret_cast<const Describe_taskActionTmpl_actTmplInstance*>(
               &_Describe_taskActionTmpl_actTmplInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Describe_taskActionTmpl_actTmplInstance& a, Describe_taskActionTmpl_actTmplInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_taskActionTmpl_actTmplInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_taskActionTmpl_actTmplInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_taskActionTmpl_actTmplInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_taskActionTmpl_actTmplInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_taskActionTmpl_actTmplInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_taskActionTmpl_actTmplInstance& from) {
    Describe_taskActionTmpl_actTmplInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_taskActionTmpl_actTmplInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.taskActionTmpl.actTmplInstance";
  }
  protected:
  explicit Describe_taskActionTmpl_actTmplInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActListFieldNumber = 6,
    kDescribeFieldNumber = 1,
    kStypeValueFieldNumber = 2,
    kGtypeValueFieldNumber = 3,
    kAgvTypeValueFieldNumber = 4,
    kLayerValueFieldNumber = 5,
  };
  // repeated .agv_map.Describe.taskActionTmpl.action act_list = 6;
  int act_list_size() const;
  private:
  int _internal_act_list_size() const;
  public:
  void clear_act_list();
  ::agv_map::Describe_taskActionTmpl_action* mutable_act_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action >*
      mutable_act_list();
  private:
  const ::agv_map::Describe_taskActionTmpl_action& _internal_act_list(int index) const;
  ::agv_map::Describe_taskActionTmpl_action* _internal_add_act_list();
  public:
  const ::agv_map::Describe_taskActionTmpl_action& act_list(int index) const;
  ::agv_map::Describe_taskActionTmpl_action* add_act_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action >&
      act_list() const;

  // string describe = 1;
  void clear_describe();
  const std::string& describe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_describe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_describe();
  PROTOBUF_NODISCARD std::string* release_describe();
  void set_allocated_describe(std::string* describe);
  private:
  const std::string& _internal_describe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_describe(const std::string& value);
  std::string* _internal_mutable_describe();
  public:

  // string stype_value = 2;
  void clear_stype_value();
  const std::string& stype_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stype_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stype_value();
  PROTOBUF_NODISCARD std::string* release_stype_value();
  void set_allocated_stype_value(std::string* stype_value);
  private:
  const std::string& _internal_stype_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stype_value(const std::string& value);
  std::string* _internal_mutable_stype_value();
  public:

  // string gtype_value = 3;
  void clear_gtype_value();
  const std::string& gtype_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gtype_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gtype_value();
  PROTOBUF_NODISCARD std::string* release_gtype_value();
  void set_allocated_gtype_value(std::string* gtype_value);
  private:
  const std::string& _internal_gtype_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gtype_value(const std::string& value);
  std::string* _internal_mutable_gtype_value();
  public:

  // string agv_type_value = 4;
  void clear_agv_type_value();
  const std::string& agv_type_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agv_type_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agv_type_value();
  PROTOBUF_NODISCARD std::string* release_agv_type_value();
  void set_allocated_agv_type_value(std::string* agv_type_value);
  private:
  const std::string& _internal_agv_type_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agv_type_value(const std::string& value);
  std::string* _internal_mutable_agv_type_value();
  public:

  // int32 layer_value = 5;
  void clear_layer_value();
  int32_t layer_value() const;
  void set_layer_value(int32_t value);
  private:
  int32_t _internal_layer_value() const;
  void _internal_set_layer_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.taskActionTmpl.actTmplInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action > act_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr describe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stype_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gtype_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agv_type_value_;
    int32_t layer_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_taskActionTmpl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.taskActionTmpl) */ {
 public:
  inline Describe_taskActionTmpl() : Describe_taskActionTmpl(nullptr) {}
  ~Describe_taskActionTmpl() override;
  explicit PROTOBUF_CONSTEXPR Describe_taskActionTmpl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_taskActionTmpl(const Describe_taskActionTmpl& from);
  Describe_taskActionTmpl(Describe_taskActionTmpl&& from) noexcept
    : Describe_taskActionTmpl() {
    *this = ::std::move(from);
  }

  inline Describe_taskActionTmpl& operator=(const Describe_taskActionTmpl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_taskActionTmpl& operator=(Describe_taskActionTmpl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_taskActionTmpl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_taskActionTmpl* internal_default_instance() {
    return reinterpret_cast<const Describe_taskActionTmpl*>(
               &_Describe_taskActionTmpl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Describe_taskActionTmpl& a, Describe_taskActionTmpl& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_taskActionTmpl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_taskActionTmpl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_taskActionTmpl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_taskActionTmpl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_taskActionTmpl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_taskActionTmpl& from) {
    Describe_taskActionTmpl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_taskActionTmpl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.taskActionTmpl";
  }
  protected:
  explicit Describe_taskActionTmpl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Describe_taskActionTmpl_action action;
  typedef Describe_taskActionTmpl_actTmplInstance actTmplInstance;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kActInstanceListFieldNumber = 7,
    kDescibeFieldNumber = 1,
    kStypeFieldNumber = 2,
    kGtypeFieldNumber = 3,
    kAgvTypeFieldNumber = 4,
    kLayerFieldNumber = 5,
  };
  // repeated .agv_map.Describe.taskActionTmpl.action data = 6;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::agv_map::Describe_taskActionTmpl_action* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action >*
      mutable_data();
  private:
  const ::agv_map::Describe_taskActionTmpl_action& _internal_data(int index) const;
  ::agv_map::Describe_taskActionTmpl_action* _internal_add_data();
  public:
  const ::agv_map::Describe_taskActionTmpl_action& data(int index) const;
  ::agv_map::Describe_taskActionTmpl_action* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action >&
      data() const;

  // map<string, .agv_map.Describe.taskActionTmpl.actTmplInstance> act_instance_list = 7;
  int act_instance_list_size() const;
  private:
  int _internal_act_instance_list_size() const;
  public:
  void clear_act_instance_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >&
      _internal_act_instance_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >*
      _internal_mutable_act_instance_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >&
      act_instance_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >*
      mutable_act_instance_list();

  // string descibe = 1;
  void clear_descibe();
  const std::string& descibe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descibe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descibe();
  PROTOBUF_NODISCARD std::string* release_descibe();
  void set_allocated_descibe(std::string* descibe);
  private:
  const std::string& _internal_descibe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descibe(const std::string& value);
  std::string* _internal_mutable_descibe();
  public:

  // string stype = 2;
  void clear_stype();
  const std::string& stype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stype();
  PROTOBUF_NODISCARD std::string* release_stype();
  void set_allocated_stype(std::string* stype);
  private:
  const std::string& _internal_stype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stype(const std::string& value);
  std::string* _internal_mutable_stype();
  public:

  // string gtype = 3;
  void clear_gtype();
  const std::string& gtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gtype();
  PROTOBUF_NODISCARD std::string* release_gtype();
  void set_allocated_gtype(std::string* gtype);
  private:
  const std::string& _internal_gtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gtype(const std::string& value);
  std::string* _internal_mutable_gtype();
  public:

  // string agv_type = 4;
  void clear_agv_type();
  const std::string& agv_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agv_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agv_type();
  PROTOBUF_NODISCARD std::string* release_agv_type();
  void set_allocated_agv_type(std::string* agv_type);
  private:
  const std::string& _internal_agv_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agv_type(const std::string& value);
  std::string* _internal_mutable_agv_type();
  public:

  // int32 layer = 5;
  void clear_layer();
  int32_t layer() const;
  void set_layer(int32_t value);
  private:
  int32_t _internal_layer() const;
  void _internal_set_layer(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.taskActionTmpl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action > data_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_taskActionTmpl_ActInstanceListEntry_DoNotUse,
        std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> act_instance_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descibe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agv_type_;
    int32_t layer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe_dataDesc_ParamEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_dataDesc_ParamEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Describe_dataDesc_ParamEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Describe_dataDesc_ParamEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Describe_dataDesc_ParamEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Describe_dataDesc_ParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Describe_dataDesc_ParamEntry_DoNotUse& other);
  static const Describe_dataDesc_ParamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Describe_dataDesc_ParamEntry_DoNotUse*>(&_Describe_dataDesc_ParamEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.dataDesc.ParamEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.Describe.dataDesc.ParamEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class Describe_dataDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe.dataDesc) */ {
 public:
  inline Describe_dataDesc() : Describe_dataDesc(nullptr) {}
  ~Describe_dataDesc() override;
  explicit PROTOBUF_CONSTEXPR Describe_dataDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe_dataDesc(const Describe_dataDesc& from);
  Describe_dataDesc(Describe_dataDesc&& from) noexcept
    : Describe_dataDesc() {
    *this = ::std::move(from);
  }

  inline Describe_dataDesc& operator=(const Describe_dataDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe_dataDesc& operator=(Describe_dataDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe_dataDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe_dataDesc* internal_default_instance() {
    return reinterpret_cast<const Describe_dataDesc*>(
               &_Describe_dataDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Describe_dataDesc& a, Describe_dataDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe_dataDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe_dataDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe_dataDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe_dataDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe_dataDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe_dataDesc& from) {
    Describe_dataDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe_dataDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe.dataDesc";
  }
  protected:
  explicit Describe_dataDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 2,
    kDescribeFieldNumber = 1,
  };
  // map<string, string> param = 2;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_param();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_param();

  // string describe = 1;
  void clear_describe();
  const std::string& describe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_describe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_describe();
  PROTOBUF_NODISCARD std::string* release_describe();
  void set_allocated_describe(std::string* describe);
  private:
  const std::string& _internal_describe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_describe(const std::string& value);
  std::string* _internal_mutable_describe();
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Describe.dataDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_dataDesc_ParamEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> param_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr describe_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Describe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Describe) */ {
 public:
  inline Describe() : Describe(nullptr) {}
  ~Describe() override;
  explicit PROTOBUF_CONSTEXPR Describe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Describe(const Describe& from);
  Describe(Describe&& from) noexcept
    : Describe() {
    *this = ::std::move(from);
  }

  inline Describe& operator=(const Describe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Describe& operator=(Describe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Describe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Describe* internal_default_instance() {
    return reinterpret_cast<const Describe*>(
               &_Describe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Describe& a, Describe& b) {
    a.Swap(&b);
  }
  inline void Swap(Describe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Describe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Describe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Describe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Describe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Describe& from) {
    Describe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Describe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Describe";
  }
  protected:
  explicit Describe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Describe_ParamTmpl ParamTmpl;
  typedef Describe_actionTmpl actionTmpl;
  typedef Describe_taskActionTmpl taskActionTmpl;
  typedef Describe_dataDesc dataDesc;

  // accessors -------------------------------------------------------

  enum : int {
    kAgvDescFieldNumber = 1,
    kCtlDescFieldNumber = 2,
    kAvoDescFieldNumber = 3,
    kRutDescFieldNumber = 4,
    kActionDescFieldNumber = 5,
    kAreaDescFieldNumber = 6,
    kParamTmplFieldNumber = 7,
    kActionTmplFieldNumber = 8,
    kTaskActionTmplFieldNumber = 9,
  };
  // map<string, string> agv_desc = 1;
  int agv_desc_size() const;
  private:
  int _internal_agv_desc_size() const;
  public:
  void clear_agv_desc();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_agv_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_agv_desc();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      agv_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_agv_desc();

  // map<string, string> ctl_desc = 2;
  int ctl_desc_size() const;
  private:
  int _internal_ctl_desc_size() const;
  public:
  void clear_ctl_desc();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_ctl_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_ctl_desc();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      ctl_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_ctl_desc();

  // map<string, string> avo_desc = 3;
  int avo_desc_size() const;
  private:
  int _internal_avo_desc_size() const;
  public:
  void clear_avo_desc();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_avo_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_avo_desc();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      avo_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_avo_desc();

  // map<string, string> rut_desc = 4;
  int rut_desc_size() const;
  private:
  int _internal_rut_desc_size() const;
  public:
  void clear_rut_desc();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_rut_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_rut_desc();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      rut_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_rut_desc();

  // map<string, .agv_map.Describe.dataDesc> action_desc = 5;
  int action_desc_size() const;
  private:
  int _internal_action_desc_size() const;
  public:
  void clear_action_desc();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >&
      _internal_action_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >*
      _internal_mutable_action_desc();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >&
      action_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >*
      mutable_action_desc();

  // map<string, .agv_map.Describe.dataDesc> area_desc = 6;
  int area_desc_size() const;
  private:
  int _internal_area_desc_size() const;
  public:
  void clear_area_desc();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >&
      _internal_area_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >*
      _internal_mutable_area_desc();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >&
      area_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >*
      mutable_area_desc();

  // map<string, .agv_map.Describe.ParamTmpl> param_tmpl = 7;
  int param_tmpl_size() const;
  private:
  int _internal_param_tmpl_size() const;
  public:
  void clear_param_tmpl();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >&
      _internal_param_tmpl() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >*
      _internal_mutable_param_tmpl();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >&
      param_tmpl() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >*
      mutable_param_tmpl();

  // map<string, .agv_map.Describe.actionTmpl> action_tmpl = 8;
  int action_tmpl_size() const;
  private:
  int _internal_action_tmpl_size() const;
  public:
  void clear_action_tmpl();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >&
      _internal_action_tmpl() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >*
      _internal_mutable_action_tmpl();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >&
      action_tmpl() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >*
      mutable_action_tmpl();

  // map<string, .agv_map.Describe.taskActionTmpl> task_action_tmpl = 9;
  int task_action_tmpl_size() const;
  private:
  int _internal_task_action_tmpl_size() const;
  public:
  void clear_task_action_tmpl();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >&
      _internal_task_action_tmpl() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >*
      _internal_mutable_task_action_tmpl();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >&
      task_action_tmpl() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >*
      mutable_task_action_tmpl();

  // @@protoc_insertion_point(class_scope:agv_map.Describe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_AgvDescEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> agv_desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_CtlDescEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> ctl_desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_AvoDescEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> avo_desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_RutDescEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> rut_desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_ActionDescEntry_DoNotUse,
        std::string, ::agv_map::Describe_dataDesc,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> action_desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_AreaDescEntry_DoNotUse,
        std::string, ::agv_map::Describe_dataDesc,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> area_desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_ParamTmplEntry_DoNotUse,
        std::string, ::agv_map::Describe_ParamTmpl,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> param_tmpl_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_ActionTmplEntry_DoNotUse,
        std::string, ::agv_map::Describe_actionTmpl,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> action_tmpl_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Describe_TaskActionTmplEntry_DoNotUse,
        std::string, ::agv_map::Describe_taskActionTmpl,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> task_action_tmpl_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Store_offset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Store_offset) */ {
 public:
  inline Store_offset() : Store_offset(nullptr) {}
  ~Store_offset() override;
  explicit PROTOBUF_CONSTEXPR Store_offset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Store_offset(const Store_offset& from);
  Store_offset(Store_offset&& from) noexcept
    : Store_offset() {
    *this = ::std::move(from);
  }

  inline Store_offset& operator=(const Store_offset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Store_offset& operator=(Store_offset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Store_offset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Store_offset* internal_default_instance() {
    return reinterpret_cast<const Store_offset*>(
               &_Store_offset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(Store_offset& a, Store_offset& b) {
    a.Swap(&b);
  }
  inline void Swap(Store_offset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Store_offset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Store_offset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Store_offset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Store_offset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Store_offset& from) {
    Store_offset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Store_offset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Store_offset";
  }
  protected:
  explicit Store_offset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayer1FieldNumber = 1,
    kLayer2FieldNumber = 2,
    kLayer3FieldNumber = 3,
    kLayer4FieldNumber = 4,
  };
  // .agv_map.store_offset_by_layer layer1 = 1;
  bool has_layer1() const;
  private:
  bool _internal_has_layer1() const;
  public:
  void clear_layer1();
  const ::agv_map::store_offset_by_layer& layer1() const;
  PROTOBUF_NODISCARD ::agv_map::store_offset_by_layer* release_layer1();
  ::agv_map::store_offset_by_layer* mutable_layer1();
  void set_allocated_layer1(::agv_map::store_offset_by_layer* layer1);
  private:
  const ::agv_map::store_offset_by_layer& _internal_layer1() const;
  ::agv_map::store_offset_by_layer* _internal_mutable_layer1();
  public:
  void unsafe_arena_set_allocated_layer1(
      ::agv_map::store_offset_by_layer* layer1);
  ::agv_map::store_offset_by_layer* unsafe_arena_release_layer1();

  // .agv_map.store_offset_by_layer layer2 = 2;
  bool has_layer2() const;
  private:
  bool _internal_has_layer2() const;
  public:
  void clear_layer2();
  const ::agv_map::store_offset_by_layer& layer2() const;
  PROTOBUF_NODISCARD ::agv_map::store_offset_by_layer* release_layer2();
  ::agv_map::store_offset_by_layer* mutable_layer2();
  void set_allocated_layer2(::agv_map::store_offset_by_layer* layer2);
  private:
  const ::agv_map::store_offset_by_layer& _internal_layer2() const;
  ::agv_map::store_offset_by_layer* _internal_mutable_layer2();
  public:
  void unsafe_arena_set_allocated_layer2(
      ::agv_map::store_offset_by_layer* layer2);
  ::agv_map::store_offset_by_layer* unsafe_arena_release_layer2();

  // .agv_map.store_offset_by_layer layer3 = 3;
  bool has_layer3() const;
  private:
  bool _internal_has_layer3() const;
  public:
  void clear_layer3();
  const ::agv_map::store_offset_by_layer& layer3() const;
  PROTOBUF_NODISCARD ::agv_map::store_offset_by_layer* release_layer3();
  ::agv_map::store_offset_by_layer* mutable_layer3();
  void set_allocated_layer3(::agv_map::store_offset_by_layer* layer3);
  private:
  const ::agv_map::store_offset_by_layer& _internal_layer3() const;
  ::agv_map::store_offset_by_layer* _internal_mutable_layer3();
  public:
  void unsafe_arena_set_allocated_layer3(
      ::agv_map::store_offset_by_layer* layer3);
  ::agv_map::store_offset_by_layer* unsafe_arena_release_layer3();

  // .agv_map.store_offset_by_layer layer4 = 4;
  bool has_layer4() const;
  private:
  bool _internal_has_layer4() const;
  public:
  void clear_layer4();
  const ::agv_map::store_offset_by_layer& layer4() const;
  PROTOBUF_NODISCARD ::agv_map::store_offset_by_layer* release_layer4();
  ::agv_map::store_offset_by_layer* mutable_layer4();
  void set_allocated_layer4(::agv_map::store_offset_by_layer* layer4);
  private:
  const ::agv_map::store_offset_by_layer& _internal_layer4() const;
  ::agv_map::store_offset_by_layer* _internal_mutable_layer4();
  public:
  void unsafe_arena_set_allocated_layer4(
      ::agv_map::store_offset_by_layer* layer4);
  ::agv_map::store_offset_by_layer* unsafe_arena_release_layer4();

  // @@protoc_insertion_point(class_scope:agv_map.Store_offset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::agv_map::store_offset_by_layer* layer1_;
    ::agv_map::store_offset_by_layer* layer2_;
    ::agv_map::store_offset_by_layer* layer3_;
    ::agv_map::store_offset_by_layer* layer4_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class store_offset_by_layer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.store_offset_by_layer) */ {
 public:
  inline store_offset_by_layer() : store_offset_by_layer(nullptr) {}
  ~store_offset_by_layer() override;
  explicit PROTOBUF_CONSTEXPR store_offset_by_layer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  store_offset_by_layer(const store_offset_by_layer& from);
  store_offset_by_layer(store_offset_by_layer&& from) noexcept
    : store_offset_by_layer() {
    *this = ::std::move(from);
  }

  inline store_offset_by_layer& operator=(const store_offset_by_layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline store_offset_by_layer& operator=(store_offset_by_layer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const store_offset_by_layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const store_offset_by_layer* internal_default_instance() {
    return reinterpret_cast<const store_offset_by_layer*>(
               &_store_offset_by_layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(store_offset_by_layer& a, store_offset_by_layer& b) {
    a.Swap(&b);
  }
  inline void Swap(store_offset_by_layer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(store_offset_by_layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  store_offset_by_layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<store_offset_by_layer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const store_offset_by_layer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const store_offset_by_layer& from) {
    store_offset_by_layer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(store_offset_by_layer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.store_offset_by_layer";
  }
  protected:
  explicit store_offset_by_layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kHorizontalOffsetFieldNumber = 2,
    kVerticalOffsetFieldNumber = 3,
    kForkHighOffsetFieldNumber = 4,
  };
  // float high = 1;
  void clear_high();
  float high() const;
  void set_high(float value);
  private:
  float _internal_high() const;
  void _internal_set_high(float value);
  public:

  // float horizontal_offset = 2;
  void clear_horizontal_offset();
  float horizontal_offset() const;
  void set_horizontal_offset(float value);
  private:
  float _internal_horizontal_offset() const;
  void _internal_set_horizontal_offset(float value);
  public:

  // float vertical_offset = 3;
  void clear_vertical_offset();
  float vertical_offset() const;
  void set_vertical_offset(float value);
  private:
  float _internal_vertical_offset() const;
  void _internal_set_vertical_offset(float value);
  public:

  // float fork_high_offset = 4;
  void clear_fork_high_offset();
  float fork_high_offset() const;
  void set_fork_high_offset(float value);
  private:
  float _internal_fork_high_offset() const;
  void _internal_set_fork_high_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.store_offset_by_layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float high_;
    float horizontal_offset_;
    float vertical_offset_;
    float fork_high_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Label final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  ~Label() override;
  explicit PROTOBUF_CONSTEXPR Label(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Label& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Label& from) {
    Label::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kCoordFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSizeFieldNumber = 5,
    kColorRFieldNumber = 6,
    kColorGFieldNumber = 7,
    kColorBFieldNumber = 8,
    kOpacityFieldNumber = 9,
    kBoldFieldNumber = 10,
    kItalicFieldNumber = 11,
    kDirFieldNumber = 12,
    kRotateFieldNumber = 13,
  };
  // string text = 3;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .agv_map.Coord coord = 4;
  bool has_coord() const;
  private:
  bool _internal_has_coord() const;
  public:
  void clear_coord();
  const ::agv_map::Coord& coord() const;
  PROTOBUF_NODISCARD ::agv_map::Coord* release_coord();
  ::agv_map::Coord* mutable_coord();
  void set_allocated_coord(::agv_map::Coord* coord);
  private:
  const ::agv_map::Coord& _internal_coord() const;
  ::agv_map::Coord* _internal_mutable_coord();
  public:
  void unsafe_arena_set_allocated_coord(
      ::agv_map::Coord* coord);
  ::agv_map::Coord* unsafe_arena_release_coord();

  // sint32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // sint32 size = 5;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // sint32 color_r = 6;
  void clear_color_r();
  int32_t color_r() const;
  void set_color_r(int32_t value);
  private:
  int32_t _internal_color_r() const;
  void _internal_set_color_r(int32_t value);
  public:

  // sint32 color_g = 7;
  void clear_color_g();
  int32_t color_g() const;
  void set_color_g(int32_t value);
  private:
  int32_t _internal_color_g() const;
  void _internal_set_color_g(int32_t value);
  public:

  // sint32 color_b = 8;
  void clear_color_b();
  int32_t color_b() const;
  void set_color_b(int32_t value);
  private:
  int32_t _internal_color_b() const;
  void _internal_set_color_b(int32_t value);
  public:

  // sint32 opacity = 9;
  void clear_opacity();
  int32_t opacity() const;
  void set_opacity(int32_t value);
  private:
  int32_t _internal_opacity() const;
  void _internal_set_opacity(int32_t value);
  public:

  // int32 bold = 10;
  void clear_bold();
  int32_t bold() const;
  void set_bold(int32_t value);
  private:
  int32_t _internal_bold() const;
  void _internal_set_bold(int32_t value);
  public:

  // int32 italic = 11;
  void clear_italic();
  int32_t italic() const;
  void set_italic(int32_t value);
  private:
  int32_t _internal_italic() const;
  void _internal_set_italic(int32_t value);
  public:

  // int32 dir = 12;
  void clear_dir();
  int32_t dir() const;
  void set_dir(int32_t value);
  private:
  int32_t _internal_dir() const;
  void _internal_set_dir(int32_t value);
  public:

  // sint32 rotate = 13;
  void clear_rotate();
  int32_t rotate() const;
  void set_rotate(int32_t value);
  private:
  int32_t _internal_rotate() const;
  void _internal_set_rotate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::agv_map::Coord* coord_;
    int32_t id_;
    int32_t type_;
    int32_t size_;
    int32_t color_r_;
    int32_t color_g_;
    int32_t color_b_;
    int32_t opacity_;
    int32_t bold_;
    int32_t italic_;
    int32_t dir_;
    int32_t rotate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class AgvParam_ProtectionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgvParam_ProtectionEntry_DoNotUse, 
    std::string, ::agv_map::Protection,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgvParam_ProtectionEntry_DoNotUse, 
    std::string, ::agv_map::Protection,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AgvParam_ProtectionEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AgvParam_ProtectionEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AgvParam_ProtectionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AgvParam_ProtectionEntry_DoNotUse& other);
  static const AgvParam_ProtectionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AgvParam_ProtectionEntry_DoNotUse*>(&_AgvParam_ProtectionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agv_map.AgvParam.ProtectionEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class AgvParam_ReflectorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgvParam_ReflectorEntry_DoNotUse, 
    int32_t, ::agv_map::Reflector,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgvParam_ReflectorEntry_DoNotUse, 
    int32_t, ::agv_map::Reflector,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AgvParam_ReflectorEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AgvParam_ReflectorEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AgvParam_ReflectorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AgvParam_ReflectorEntry_DoNotUse& other);
  static const AgvParam_ReflectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AgvParam_ReflectorEntry_DoNotUse*>(&_AgvParam_ReflectorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class AgvParam_opto_elec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.AgvParam.opto_elec) */ {
 public:
  inline AgvParam_opto_elec() : AgvParam_opto_elec(nullptr) {}
  ~AgvParam_opto_elec() override;
  explicit PROTOBUF_CONSTEXPR AgvParam_opto_elec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgvParam_opto_elec(const AgvParam_opto_elec& from);
  AgvParam_opto_elec(AgvParam_opto_elec&& from) noexcept
    : AgvParam_opto_elec() {
    *this = ::std::move(from);
  }

  inline AgvParam_opto_elec& operator=(const AgvParam_opto_elec& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvParam_opto_elec& operator=(AgvParam_opto_elec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgvParam_opto_elec& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgvParam_opto_elec* internal_default_instance() {
    return reinterpret_cast<const AgvParam_opto_elec*>(
               &_AgvParam_opto_elec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(AgvParam_opto_elec& a, AgvParam_opto_elec& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvParam_opto_elec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvParam_opto_elec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgvParam_opto_elec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgvParam_opto_elec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgvParam_opto_elec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgvParam_opto_elec& from) {
    AgvParam_opto_elec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvParam_opto_elec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.AgvParam.opto_elec";
  }
  protected:
  explicit AgvParam_opto_elec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPosFieldNumber = 2,
    kSignalFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .agv_map.Position pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::agv_map::Position& pos() const;
  PROTOBUF_NODISCARD ::agv_map::Position* release_pos();
  ::agv_map::Position* mutable_pos();
  void set_allocated_pos(::agv_map::Position* pos);
  private:
  const ::agv_map::Position& _internal_pos() const;
  ::agv_map::Position* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::agv_map::Position* pos);
  ::agv_map::Position* unsafe_arena_release_pos();

  // int32 signal = 3;
  void clear_signal();
  int32_t signal() const;
  void set_signal(int32_t value);
  private:
  int32_t _internal_signal() const;
  void _internal_set_signal(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.AgvParam.opto_elec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::agv_map::Position* pos_;
    int32_t signal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class AgvParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.AgvParam) */ {
 public:
  inline AgvParam() : AgvParam(nullptr) {}
  ~AgvParam() override;
  explicit PROTOBUF_CONSTEXPR AgvParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgvParam(const AgvParam& from);
  AgvParam(AgvParam&& from) noexcept
    : AgvParam() {
    *this = ::std::move(from);
  }

  inline AgvParam& operator=(const AgvParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvParam& operator=(AgvParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgvParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgvParam* internal_default_instance() {
    return reinterpret_cast<const AgvParam*>(
               &_AgvParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(AgvParam& a, AgvParam& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgvParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgvParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgvParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgvParam& from) {
    AgvParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.AgvParam";
  }
  protected:
  explicit AgvParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AgvParam_opto_elec opto_elec;

  // accessors -------------------------------------------------------

  enum : int {
    kOptoElecPosFieldNumber = 16,
    kProtectionFieldNumber = 17,
    kReflectorFieldNumber = 18,
    kAgvSubtypeFieldNumber = 1,
    kIdPosFieldNumber = 14,
    kPalletPosFieldNumber = 15,
    kBodyWidthFieldNumber = 2,
    kBodyLengthFieldNumber = 3,
    kBodyHighFieldNumber = 4,
    kWheelBaseFieldNumber = 5,
    kRotateRadiusFieldNumber = 6,
    kP2HeadFieldNumber = 7,
    kP2TailFieldNumber = 8,
    kP2NavFieldNumber = 9,
    kForkMinFieldNumber = 10,
    kForkMaxFieldNumber = 11,
    kForkNoloadHighFieldNumber = 13,
    kForkLoadHighFieldNumber = 19,
  };
  // repeated .agv_map.AgvParam.opto_elec opto_elec_pos = 16;
  int opto_elec_pos_size() const;
  private:
  int _internal_opto_elec_pos_size() const;
  public:
  void clear_opto_elec_pos();
  ::agv_map::AgvParam_opto_elec* mutable_opto_elec_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::AgvParam_opto_elec >*
      mutable_opto_elec_pos();
  private:
  const ::agv_map::AgvParam_opto_elec& _internal_opto_elec_pos(int index) const;
  ::agv_map::AgvParam_opto_elec* _internal_add_opto_elec_pos();
  public:
  const ::agv_map::AgvParam_opto_elec& opto_elec_pos(int index) const;
  ::agv_map::AgvParam_opto_elec* add_opto_elec_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::AgvParam_opto_elec >&
      opto_elec_pos() const;

  // map<string, .agv_map.Protection> protection = 17;
  int protection_size() const;
  private:
  int _internal_protection_size() const;
  public:
  void clear_protection();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >&
      _internal_protection() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >*
      _internal_mutable_protection();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >&
      protection() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >*
      mutable_protection();

  // map<int32, .agv_map.Reflector> reflector = 18;
  int reflector_size() const;
  private:
  int _internal_reflector_size() const;
  public:
  void clear_reflector();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >&
      _internal_reflector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >*
      _internal_mutable_reflector();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >&
      reflector() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >*
      mutable_reflector();

  // string agv_subtype = 1;
  void clear_agv_subtype();
  const std::string& agv_subtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agv_subtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agv_subtype();
  PROTOBUF_NODISCARD std::string* release_agv_subtype();
  void set_allocated_agv_subtype(std::string* agv_subtype);
  private:
  const std::string& _internal_agv_subtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agv_subtype(const std::string& value);
  std::string* _internal_mutable_agv_subtype();
  public:

  // .agv_map.Coord id_pos = 14;
  bool has_id_pos() const;
  private:
  bool _internal_has_id_pos() const;
  public:
  void clear_id_pos();
  const ::agv_map::Coord& id_pos() const;
  PROTOBUF_NODISCARD ::agv_map::Coord* release_id_pos();
  ::agv_map::Coord* mutable_id_pos();
  void set_allocated_id_pos(::agv_map::Coord* id_pos);
  private:
  const ::agv_map::Coord& _internal_id_pos() const;
  ::agv_map::Coord* _internal_mutable_id_pos();
  public:
  void unsafe_arena_set_allocated_id_pos(
      ::agv_map::Coord* id_pos);
  ::agv_map::Coord* unsafe_arena_release_id_pos();

  // .agv_map.Coord pallet_pos = 15;
  bool has_pallet_pos() const;
  private:
  bool _internal_has_pallet_pos() const;
  public:
  void clear_pallet_pos();
  const ::agv_map::Coord& pallet_pos() const;
  PROTOBUF_NODISCARD ::agv_map::Coord* release_pallet_pos();
  ::agv_map::Coord* mutable_pallet_pos();
  void set_allocated_pallet_pos(::agv_map::Coord* pallet_pos);
  private:
  const ::agv_map::Coord& _internal_pallet_pos() const;
  ::agv_map::Coord* _internal_mutable_pallet_pos();
  public:
  void unsafe_arena_set_allocated_pallet_pos(
      ::agv_map::Coord* pallet_pos);
  ::agv_map::Coord* unsafe_arena_release_pallet_pos();

  // int32 body_Width = 2;
  void clear_body_width();
  int32_t body_width() const;
  void set_body_width(int32_t value);
  private:
  int32_t _internal_body_width() const;
  void _internal_set_body_width(int32_t value);
  public:

  // int32 body_Length = 3;
  void clear_body_length();
  int32_t body_length() const;
  void set_body_length(int32_t value);
  private:
  int32_t _internal_body_length() const;
  void _internal_set_body_length(int32_t value);
  public:

  // int32 body_High = 4;
  void clear_body_high();
  int32_t body_high() const;
  void set_body_high(int32_t value);
  private:
  int32_t _internal_body_high() const;
  void _internal_set_body_high(int32_t value);
  public:

  // int32 wheel_base = 5;
  void clear_wheel_base();
  int32_t wheel_base() const;
  void set_wheel_base(int32_t value);
  private:
  int32_t _internal_wheel_base() const;
  void _internal_set_wheel_base(int32_t value);
  public:

  // int32 rotate_radius = 6;
  void clear_rotate_radius();
  int32_t rotate_radius() const;
  void set_rotate_radius(int32_t value);
  private:
  int32_t _internal_rotate_radius() const;
  void _internal_set_rotate_radius(int32_t value);
  public:

  // int32 p2head = 7;
  void clear_p2head();
  int32_t p2head() const;
  void set_p2head(int32_t value);
  private:
  int32_t _internal_p2head() const;
  void _internal_set_p2head(int32_t value);
  public:

  // int32 p2tail = 8;
  void clear_p2tail();
  int32_t p2tail() const;
  void set_p2tail(int32_t value);
  private:
  int32_t _internal_p2tail() const;
  void _internal_set_p2tail(int32_t value);
  public:

  // int32 p2nav = 9;
  void clear_p2nav();
  int32_t p2nav() const;
  void set_p2nav(int32_t value);
  private:
  int32_t _internal_p2nav() const;
  void _internal_set_p2nav(int32_t value);
  public:

  // sint32 fork_min = 10;
  void clear_fork_min();
  int32_t fork_min() const;
  void set_fork_min(int32_t value);
  private:
  int32_t _internal_fork_min() const;
  void _internal_set_fork_min(int32_t value);
  public:

  // sint32 fork_max = 11;
  void clear_fork_max();
  int32_t fork_max() const;
  void set_fork_max(int32_t value);
  private:
  int32_t _internal_fork_max() const;
  void _internal_set_fork_max(int32_t value);
  public:

  // sint32 fork_noload_high = 13;
  void clear_fork_noload_high();
  int32_t fork_noload_high() const;
  void set_fork_noload_high(int32_t value);
  private:
  int32_t _internal_fork_noload_high() const;
  void _internal_set_fork_noload_high(int32_t value);
  public:

  // sint32 fork_load_high = 19;
  void clear_fork_load_high();
  int32_t fork_load_high() const;
  void set_fork_load_high(int32_t value);
  private:
  int32_t _internal_fork_load_high() const;
  void _internal_set_fork_load_high(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.AgvParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::AgvParam_opto_elec > opto_elec_pos_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AgvParam_ProtectionEntry_DoNotUse,
        std::string, ::agv_map::Protection,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> protection_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AgvParam_ReflectorEntry_DoNotUse,
        int32_t, ::agv_map::Reflector,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> reflector_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agv_subtype_;
    ::agv_map::Coord* id_pos_;
    ::agv_map::Coord* pallet_pos_;
    int32_t body_width_;
    int32_t body_length_;
    int32_t body_high_;
    int32_t wheel_base_;
    int32_t rotate_radius_;
    int32_t p2head_;
    int32_t p2tail_;
    int32_t p2nav_;
    int32_t fork_min_;
    int32_t fork_max_;
    int32_t fork_noload_high_;
    int32_t fork_load_high_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Protection_Mode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Protection.Mode) */ {
 public:
  inline Protection_Mode() : Protection_Mode(nullptr) {}
  ~Protection_Mode() override;
  explicit PROTOBUF_CONSTEXPR Protection_Mode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Protection_Mode(const Protection_Mode& from);
  Protection_Mode(Protection_Mode&& from) noexcept
    : Protection_Mode() {
    *this = ::std::move(from);
  }

  inline Protection_Mode& operator=(const Protection_Mode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Protection_Mode& operator=(Protection_Mode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Protection_Mode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Protection_Mode* internal_default_instance() {
    return reinterpret_cast<const Protection_Mode*>(
               &_Protection_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(Protection_Mode& a, Protection_Mode& b) {
    a.Swap(&b);
  }
  inline void Swap(Protection_Mode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Protection_Mode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Protection_Mode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Protection_Mode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Protection_Mode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Protection_Mode& from) {
    Protection_Mode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Protection_Mode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Protection.Mode";
  }
  protected:
  explicit Protection_Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArea1FieldNumber = 2,
    kArea2FieldNumber = 3,
    kArea3FieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // .agv_map.Protection.Polygon area1 = 2;
  bool has_area1() const;
  private:
  bool _internal_has_area1() const;
  public:
  void clear_area1();
  const ::agv_map::Protection_Polygon& area1() const;
  PROTOBUF_NODISCARD ::agv_map::Protection_Polygon* release_area1();
  ::agv_map::Protection_Polygon* mutable_area1();
  void set_allocated_area1(::agv_map::Protection_Polygon* area1);
  private:
  const ::agv_map::Protection_Polygon& _internal_area1() const;
  ::agv_map::Protection_Polygon* _internal_mutable_area1();
  public:
  void unsafe_arena_set_allocated_area1(
      ::agv_map::Protection_Polygon* area1);
  ::agv_map::Protection_Polygon* unsafe_arena_release_area1();

  // .agv_map.Protection.Polygon area2 = 3;
  bool has_area2() const;
  private:
  bool _internal_has_area2() const;
  public:
  void clear_area2();
  const ::agv_map::Protection_Polygon& area2() const;
  PROTOBUF_NODISCARD ::agv_map::Protection_Polygon* release_area2();
  ::agv_map::Protection_Polygon* mutable_area2();
  void set_allocated_area2(::agv_map::Protection_Polygon* area2);
  private:
  const ::agv_map::Protection_Polygon& _internal_area2() const;
  ::agv_map::Protection_Polygon* _internal_mutable_area2();
  public:
  void unsafe_arena_set_allocated_area2(
      ::agv_map::Protection_Polygon* area2);
  ::agv_map::Protection_Polygon* unsafe_arena_release_area2();

  // .agv_map.Protection.Polygon area3 = 4;
  bool has_area3() const;
  private:
  bool _internal_has_area3() const;
  public:
  void clear_area3();
  const ::agv_map::Protection_Polygon& area3() const;
  PROTOBUF_NODISCARD ::agv_map::Protection_Polygon* release_area3();
  ::agv_map::Protection_Polygon* mutable_area3();
  void set_allocated_area3(::agv_map::Protection_Polygon* area3);
  private:
  const ::agv_map::Protection_Polygon& _internal_area3() const;
  ::agv_map::Protection_Polygon* _internal_mutable_area3();
  public:
  void unsafe_arena_set_allocated_area3(
      ::agv_map::Protection_Polygon* area3);
  ::agv_map::Protection_Polygon* unsafe_arena_release_area3();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Protection.Mode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::agv_map::Protection_Polygon* area1_;
    ::agv_map::Protection_Polygon* area2_;
    ::agv_map::Protection_Polygon* area3_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Protection_Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Protection.Polygon) */ {
 public:
  inline Protection_Polygon() : Protection_Polygon(nullptr) {}
  ~Protection_Polygon() override;
  explicit PROTOBUF_CONSTEXPR Protection_Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Protection_Polygon(const Protection_Polygon& from);
  Protection_Polygon(Protection_Polygon&& from) noexcept
    : Protection_Polygon() {
    *this = ::std::move(from);
  }

  inline Protection_Polygon& operator=(const Protection_Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Protection_Polygon& operator=(Protection_Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Protection_Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Protection_Polygon* internal_default_instance() {
    return reinterpret_cast<const Protection_Polygon*>(
               &_Protection_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Protection_Polygon& a, Protection_Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Protection_Polygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Protection_Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Protection_Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Protection_Polygon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Protection_Polygon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Protection_Polygon& from) {
    Protection_Polygon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Protection_Polygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Protection.Polygon";
  }
  protected:
  explicit Protection_Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordFieldNumber = 1,
  };
  // repeated .agv_map.Coord coord = 1;
  int coord_size() const;
  private:
  int _internal_coord_size() const;
  public:
  void clear_coord();
  ::agv_map::Coord* mutable_coord(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >*
      mutable_coord();
  private:
  const ::agv_map::Coord& _internal_coord(int index) const;
  ::agv_map::Coord* _internal_add_coord();
  public:
  const ::agv_map::Coord& coord(int index) const;
  ::agv_map::Coord* add_coord();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >&
      coord() const;

  // @@protoc_insertion_point(class_scope:agv_map.Protection.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord > coord_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Protection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Protection) */ {
 public:
  inline Protection() : Protection(nullptr) {}
  ~Protection() override;
  explicit PROTOBUF_CONSTEXPR Protection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Protection(const Protection& from);
  Protection(Protection&& from) noexcept
    : Protection() {
    *this = ::std::move(from);
  }

  inline Protection& operator=(const Protection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Protection& operator=(Protection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Protection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Protection* internal_default_instance() {
    return reinterpret_cast<const Protection*>(
               &_Protection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(Protection& a, Protection& b) {
    a.Swap(&b);
  }
  inline void Swap(Protection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Protection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Protection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Protection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Protection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Protection& from) {
    Protection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Protection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Protection";
  }
  protected:
  explicit Protection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Protection_Mode Mode;
  typedef Protection_Polygon Polygon;

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 5,
    kDevTypeFieldNumber = 2,
    kPosFieldNumber = 3,
    kScanHeightFieldNumber = 1,
    kPosUpFieldNumber = 4,
  };
  // repeated .agv_map.Protection.Mode mode = 5;
  int mode_size() const;
  private:
  int _internal_mode_size() const;
  public:
  void clear_mode();
  ::agv_map::Protection_Mode* mutable_mode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Protection_Mode >*
      mutable_mode();
  private:
  const ::agv_map::Protection_Mode& _internal_mode(int index) const;
  ::agv_map::Protection_Mode* _internal_add_mode();
  public:
  const ::agv_map::Protection_Mode& mode(int index) const;
  ::agv_map::Protection_Mode* add_mode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Protection_Mode >&
      mode() const;

  // string dev_type = 2;
  void clear_dev_type();
  const std::string& dev_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dev_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dev_type();
  PROTOBUF_NODISCARD std::string* release_dev_type();
  void set_allocated_dev_type(std::string* dev_type);
  private:
  const std::string& _internal_dev_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dev_type(const std::string& value);
  std::string* _internal_mutable_dev_type();
  public:

  // .agv_map.Position pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::agv_map::Position& pos() const;
  PROTOBUF_NODISCARD ::agv_map::Position* release_pos();
  ::agv_map::Position* mutable_pos();
  void set_allocated_pos(::agv_map::Position* pos);
  private:
  const ::agv_map::Position& _internal_pos() const;
  ::agv_map::Position* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::agv_map::Position* pos);
  ::agv_map::Position* unsafe_arena_release_pos();

  // int32 scan_height = 1;
  void clear_scan_height();
  int32_t scan_height() const;
  void set_scan_height(int32_t value);
  private:
  int32_t _internal_scan_height() const;
  void _internal_set_scan_height(int32_t value);
  public:

  // sint32 pos_up = 4;
  void clear_pos_up();
  int32_t pos_up() const;
  void set_pos_up(int32_t value);
  private:
  int32_t _internal_pos_up() const;
  void _internal_set_pos_up(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Protection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Protection_Mode > mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_type_;
    ::agv_map::Position* pos_;
    int32_t scan_height_;
    int32_t pos_up_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class ReplaceBatteryStation_SpaceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReplaceBatteryStation_SpaceEntry_DoNotUse, 
    int32_t, ::agv_map::ReplaceBatteryStation_Space,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReplaceBatteryStation_SpaceEntry_DoNotUse, 
    int32_t, ::agv_map::ReplaceBatteryStation_Space,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ReplaceBatteryStation_SpaceEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ReplaceBatteryStation_SpaceEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ReplaceBatteryStation_SpaceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ReplaceBatteryStation_SpaceEntry_DoNotUse& other);
  static const ReplaceBatteryStation_SpaceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ReplaceBatteryStation_SpaceEntry_DoNotUse*>(&_ReplaceBatteryStation_SpaceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class ReplaceBatteryStation_Space final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.ReplaceBatteryStation.Space) */ {
 public:
  inline ReplaceBatteryStation_Space() : ReplaceBatteryStation_Space(nullptr) {}
  ~ReplaceBatteryStation_Space() override;
  explicit PROTOBUF_CONSTEXPR ReplaceBatteryStation_Space(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceBatteryStation_Space(const ReplaceBatteryStation_Space& from);
  ReplaceBatteryStation_Space(ReplaceBatteryStation_Space&& from) noexcept
    : ReplaceBatteryStation_Space() {
    *this = ::std::move(from);
  }

  inline ReplaceBatteryStation_Space& operator=(const ReplaceBatteryStation_Space& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceBatteryStation_Space& operator=(ReplaceBatteryStation_Space&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceBatteryStation_Space& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceBatteryStation_Space* internal_default_instance() {
    return reinterpret_cast<const ReplaceBatteryStation_Space*>(
               &_ReplaceBatteryStation_Space_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ReplaceBatteryStation_Space& a, ReplaceBatteryStation_Space& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceBatteryStation_Space* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceBatteryStation_Space* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceBatteryStation_Space* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceBatteryStation_Space>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceBatteryStation_Space& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplaceBatteryStation_Space& from) {
    ReplaceBatteryStation_Space::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceBatteryStation_Space* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.ReplaceBatteryStation.Space";
  }
  protected:
  explicit ReplaceBatteryStation_Space(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPosFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // sint32 pos = 3;
  void clear_pos();
  int32_t pos() const;
  void set_pos(int32_t value);
  private:
  int32_t _internal_pos() const;
  void _internal_set_pos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.ReplaceBatteryStation.Space)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t type_;
    int32_t pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class ReplaceBatteryStation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.ReplaceBatteryStation) */ {
 public:
  inline ReplaceBatteryStation() : ReplaceBatteryStation(nullptr) {}
  ~ReplaceBatteryStation() override;
  explicit PROTOBUF_CONSTEXPR ReplaceBatteryStation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceBatteryStation(const ReplaceBatteryStation& from);
  ReplaceBatteryStation(ReplaceBatteryStation&& from) noexcept
    : ReplaceBatteryStation() {
    *this = ::std::move(from);
  }

  inline ReplaceBatteryStation& operator=(const ReplaceBatteryStation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceBatteryStation& operator=(ReplaceBatteryStation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceBatteryStation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceBatteryStation* internal_default_instance() {
    return reinterpret_cast<const ReplaceBatteryStation*>(
               &_ReplaceBatteryStation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ReplaceBatteryStation& a, ReplaceBatteryStation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceBatteryStation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceBatteryStation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceBatteryStation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceBatteryStation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceBatteryStation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplaceBatteryStation& from) {
    ReplaceBatteryStation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceBatteryStation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.ReplaceBatteryStation";
  }
  protected:
  explicit ReplaceBatteryStation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReplaceBatteryStation_Space Space;

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceFieldNumber = 3,
    kIndexFieldNumber = 1,
    kDistP1P2FieldNumber = 2,
  };
  // map<int32, .agv_map.ReplaceBatteryStation.Space> space = 3;
  int space_size() const;
  private:
  int _internal_space_size() const;
  public:
  void clear_space();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >&
      _internal_space() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >*
      _internal_mutable_space();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >&
      space() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >*
      mutable_space();

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 dist_p1_p2 = 2;
  void clear_dist_p1_p2();
  int32_t dist_p1_p2() const;
  void set_dist_p1_p2(int32_t value);
  private:
  int32_t _internal_dist_p1_p2() const;
  void _internal_set_dist_p1_p2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.ReplaceBatteryStation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ReplaceBatteryStation_SpaceEntry_DoNotUse,
        int32_t, ::agv_map::ReplaceBatteryStation_Space,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> space_;
    int32_t index_;
    int32_t dist_p1_p2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Reflector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Reflector) */ {
 public:
  inline Reflector() : Reflector(nullptr) {}
  ~Reflector() override;
  explicit PROTOBUF_CONSTEXPR Reflector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reflector(const Reflector& from);
  Reflector(Reflector&& from) noexcept
    : Reflector() {
    *this = ::std::move(from);
  }

  inline Reflector& operator=(const Reflector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reflector& operator=(Reflector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reflector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reflector* internal_default_instance() {
    return reinterpret_cast<const Reflector*>(
               &_Reflector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Reflector& a, Reflector& b) {
    a.Swap(&b);
  }
  inline void Swap(Reflector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reflector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reflector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reflector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reflector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Reflector& from) {
    Reflector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reflector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Reflector";
  }
  protected:
  explicit Reflector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordFieldNumber = 2,
    kIdFieldNumber = 1,
    kAreaFieldNumber = 3,
    kApAreaFieldNumber = 4,
  };
  // .agv_map.Coord coord = 2;
  bool has_coord() const;
  private:
  bool _internal_has_coord() const;
  public:
  void clear_coord();
  const ::agv_map::Coord& coord() const;
  PROTOBUF_NODISCARD ::agv_map::Coord* release_coord();
  ::agv_map::Coord* mutable_coord();
  void set_allocated_coord(::agv_map::Coord* coord);
  private:
  const ::agv_map::Coord& _internal_coord() const;
  ::agv_map::Coord* _internal_mutable_coord();
  public:
  void unsafe_arena_set_allocated_coord(
      ::agv_map::Coord* coord);
  ::agv_map::Coord* unsafe_arena_release_coord();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 area = 3;
  void clear_area();
  int32_t area() const;
  void set_area(int32_t value);
  private:
  int32_t _internal_area() const;
  void _internal_set_area(int32_t value);
  public:

  // int32 ap_area = 4;
  void clear_ap_area();
  int32_t ap_area() const;
  void set_ap_area(int32_t value);
  private:
  int32_t _internal_ap_area() const;
  void _internal_set_ap_area(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Reflector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::agv_map::Coord* coord_;
    int32_t id_;
    int32_t area_;
    int32_t ap_area_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Pallet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.Pallet) */ {
 public:
  inline Pallet() : Pallet(nullptr) {}
  ~Pallet() override;
  explicit PROTOBUF_CONSTEXPR Pallet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pallet(const Pallet& from);
  Pallet(Pallet&& from) noexcept
    : Pallet() {
    *this = ::std::move(from);
  }

  inline Pallet& operator=(const Pallet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pallet& operator=(Pallet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pallet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pallet* internal_default_instance() {
    return reinterpret_cast<const Pallet*>(
               &_Pallet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(Pallet& a, Pallet& b) {
    a.Swap(&b);
  }
  inline void Swap(Pallet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pallet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pallet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pallet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pallet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pallet& from) {
    Pallet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pallet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.Pallet";
  }
  protected:
  explicit Pallet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescribeFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kLengthFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHighFieldNumber = 6,
  };
  // string describe = 1;
  void clear_describe();
  const std::string& describe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_describe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_describe();
  PROTOBUF_NODISCARD std::string* release_describe();
  void set_allocated_describe(std::string* describe);
  private:
  const std::string& _internal_describe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_describe(const std::string& value);
  std::string* _internal_mutable_describe();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 length = 4;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // int32 width = 5;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 high = 6;
  void clear_high();
  int32_t high() const;
  void set_high(int32_t value);
  private:
  int32_t _internal_high() const;
  void _internal_set_high(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.Pallet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr describe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t type_;
    int32_t length_;
    int32_t width_;
    int32_t high_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// -------------------------------------------------------------------

class DefautForkSet_PalletLoadHighsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DefautForkSet_PalletLoadHighsEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DefautForkSet_PalletLoadHighsEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  DefautForkSet_PalletLoadHighsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DefautForkSet_PalletLoadHighsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DefautForkSet_PalletLoadHighsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DefautForkSet_PalletLoadHighsEntry_DoNotUse& other);
  static const DefautForkSet_PalletLoadHighsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DefautForkSet_PalletLoadHighsEntry_DoNotUse*>(&_DefautForkSet_PalletLoadHighsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agv_5fmap_2eproto;
};

// -------------------------------------------------------------------

class DefautForkSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_map.DefautForkSet) */ {
 public:
  inline DefautForkSet() : DefautForkSet(nullptr) {}
  ~DefautForkSet() override;
  explicit PROTOBUF_CONSTEXPR DefautForkSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DefautForkSet(const DefautForkSet& from);
  DefautForkSet(DefautForkSet&& from) noexcept
    : DefautForkSet() {
    *this = ::std::move(from);
  }

  inline DefautForkSet& operator=(const DefautForkSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefautForkSet& operator=(DefautForkSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefautForkSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefautForkSet* internal_default_instance() {
    return reinterpret_cast<const DefautForkSet*>(
               &_DefautForkSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(DefautForkSet& a, DefautForkSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DefautForkSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefautForkSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefautForkSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DefautForkSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DefautForkSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DefautForkSet& from) {
    DefautForkSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefautForkSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_map.DefautForkSet";
  }
  protected:
  explicit DefautForkSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPalletLoadHighsFieldNumber = 4,
    kAgvTypeFieldNumber = 1,
    kPalletNameFieldNumber = 2,
    kLoadHighFieldNumber = 3,
  };
  // map<int32, int32> pallet_load_highs = 4;
  int pallet_load_highs_size() const;
  private:
  int _internal_pallet_load_highs_size() const;
  public:
  void clear_pallet_load_highs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_pallet_load_highs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_pallet_load_highs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      pallet_load_highs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_pallet_load_highs();

  // string agv_type = 1;
  void clear_agv_type();
  const std::string& agv_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agv_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agv_type();
  PROTOBUF_NODISCARD std::string* release_agv_type();
  void set_allocated_agv_type(std::string* agv_type);
  private:
  const std::string& _internal_agv_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agv_type(const std::string& value);
  std::string* _internal_mutable_agv_type();
  public:

  // string pallet_name = 2;
  void clear_pallet_name();
  const std::string& pallet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pallet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pallet_name();
  PROTOBUF_NODISCARD std::string* release_pallet_name();
  void set_allocated_pallet_name(std::string* pallet_name);
  private:
  const std::string& _internal_pallet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pallet_name(const std::string& value);
  std::string* _internal_mutable_pallet_name();
  public:

  // int32 load_high = 3;
  void clear_load_high();
  int32_t load_high() const;
  void set_load_high(int32_t value);
  private:
  int32_t _internal_load_high() const;
  void _internal_set_load_high(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:agv_map.DefautForkSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        DefautForkSet_PalletLoadHighsEntry_DoNotUse,
        int32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> pallet_load_highs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agv_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pallet_name_;
    int32_t load_high_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agv_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MAP_ARR

// repeated .agv_map.Map map = 1;
inline int MAP_ARR::_internal_map_size() const {
  return _impl_.map_.size();
}
inline int MAP_ARR::map_size() const {
  return _internal_map_size();
}
inline void MAP_ARR::clear_map() {
  _impl_.map_.Clear();
}
inline ::agv_map::Map* MAP_ARR::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.MAP_ARR.map)
  return _impl_.map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Map >*
MAP_ARR::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.MAP_ARR.map)
  return &_impl_.map_;
}
inline const ::agv_map::Map& MAP_ARR::_internal_map(int index) const {
  return _impl_.map_.Get(index);
}
inline const ::agv_map::Map& MAP_ARR::map(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.MAP_ARR.map)
  return _internal_map(index);
}
inline ::agv_map::Map* MAP_ARR::_internal_add_map() {
  return _impl_.map_.Add();
}
inline ::agv_map::Map* MAP_ARR::add_map() {
  ::agv_map::Map* _add = _internal_add_map();
  // @@protoc_insertion_point(field_add:agv_map.MAP_ARR.map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Map >&
MAP_ARR::map() const {
  // @@protoc_insertion_point(field_list:agv_map.MAP_ARR.map)
  return _impl_.map_;
}

// .agv_map.Describe describe = 2;
inline bool MAP_ARR::_internal_has_describe() const {
  return this != internal_default_instance() && _impl_.describe_ != nullptr;
}
inline bool MAP_ARR::has_describe() const {
  return _internal_has_describe();
}
inline void MAP_ARR::clear_describe() {
  if (GetArenaForAllocation() == nullptr && _impl_.describe_ != nullptr) {
    delete _impl_.describe_;
  }
  _impl_.describe_ = nullptr;
}
inline const ::agv_map::Describe& MAP_ARR::_internal_describe() const {
  const ::agv_map::Describe* p = _impl_.describe_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Describe&>(
      ::agv_map::_Describe_default_instance_);
}
inline const ::agv_map::Describe& MAP_ARR::describe() const {
  // @@protoc_insertion_point(field_get:agv_map.MAP_ARR.describe)
  return _internal_describe();
}
inline void MAP_ARR::unsafe_arena_set_allocated_describe(
    ::agv_map::Describe* describe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.describe_);
  }
  _impl_.describe_ = describe;
  if (describe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.MAP_ARR.describe)
}
inline ::agv_map::Describe* MAP_ARR::release_describe() {
  
  ::agv_map::Describe* temp = _impl_.describe_;
  _impl_.describe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Describe* MAP_ARR::unsafe_arena_release_describe() {
  // @@protoc_insertion_point(field_release:agv_map.MAP_ARR.describe)
  
  ::agv_map::Describe* temp = _impl_.describe_;
  _impl_.describe_ = nullptr;
  return temp;
}
inline ::agv_map::Describe* MAP_ARR::_internal_mutable_describe() {
  
  if (_impl_.describe_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Describe>(GetArenaForAllocation());
    _impl_.describe_ = p;
  }
  return _impl_.describe_;
}
inline ::agv_map::Describe* MAP_ARR::mutable_describe() {
  ::agv_map::Describe* _msg = _internal_mutable_describe();
  // @@protoc_insertion_point(field_mutable:agv_map.MAP_ARR.describe)
  return _msg;
}
inline void MAP_ARR::set_allocated_describe(::agv_map::Describe* describe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.describe_;
  }
  if (describe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(describe);
    if (message_arena != submessage_arena) {
      describe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, describe, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.describe_ = describe;
  // @@protoc_insertion_point(field_set_allocated:agv_map.MAP_ARR.describe)
}

// map<int32, .agv_map.Store_offset> store_off_config = 3;
inline int MAP_ARR::_internal_store_off_config_size() const {
  return _impl_.store_off_config_.size();
}
inline int MAP_ARR::store_off_config_size() const {
  return _internal_store_off_config_size();
}
inline void MAP_ARR::clear_store_off_config() {
  _impl_.store_off_config_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >&
MAP_ARR::_internal_store_off_config() const {
  return _impl_.store_off_config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >&
MAP_ARR::store_off_config() const {
  // @@protoc_insertion_point(field_map:agv_map.MAP_ARR.store_off_config)
  return _internal_store_off_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >*
MAP_ARR::_internal_mutable_store_off_config() {
  return _impl_.store_off_config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Store_offset >*
MAP_ARR::mutable_store_off_config() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.MAP_ARR.store_off_config)
  return _internal_mutable_store_off_config();
}

// map<string, .agv_map.AgvParam> agvparam = 4;
inline int MAP_ARR::_internal_agvparam_size() const {
  return _impl_.agvparam_.size();
}
inline int MAP_ARR::agvparam_size() const {
  return _internal_agvparam_size();
}
inline void MAP_ARR::clear_agvparam() {
  _impl_.agvparam_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >&
MAP_ARR::_internal_agvparam() const {
  return _impl_.agvparam_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >&
MAP_ARR::agvparam() const {
  // @@protoc_insertion_point(field_map:agv_map.MAP_ARR.agvparam)
  return _internal_agvparam();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >*
MAP_ARR::_internal_mutable_agvparam() {
  return _impl_.agvparam_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::AgvParam >*
MAP_ARR::mutable_agvparam() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.MAP_ARR.agvparam)
  return _internal_mutable_agvparam();
}

// map<int32, .agv_map.ReplaceBatteryStation> replace_battery_station = 5;
inline int MAP_ARR::_internal_replace_battery_station_size() const {
  return _impl_.replace_battery_station_.size();
}
inline int MAP_ARR::replace_battery_station_size() const {
  return _internal_replace_battery_station_size();
}
inline void MAP_ARR::clear_replace_battery_station() {
  _impl_.replace_battery_station_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >&
MAP_ARR::_internal_replace_battery_station() const {
  return _impl_.replace_battery_station_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >&
MAP_ARR::replace_battery_station() const {
  // @@protoc_insertion_point(field_map:agv_map.MAP_ARR.replace_battery_station)
  return _internal_replace_battery_station();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >*
MAP_ARR::_internal_mutable_replace_battery_station() {
  return _impl_.replace_battery_station_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation >*
MAP_ARR::mutable_replace_battery_station() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.MAP_ARR.replace_battery_station)
  return _internal_mutable_replace_battery_station();
}

// map<int32, .agv_map.Pallet> pallet = 6;
inline int MAP_ARR::_internal_pallet_size() const {
  return _impl_.pallet_.size();
}
inline int MAP_ARR::pallet_size() const {
  return _internal_pallet_size();
}
inline void MAP_ARR::clear_pallet() {
  _impl_.pallet_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >&
MAP_ARR::_internal_pallet() const {
  return _impl_.pallet_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >&
MAP_ARR::pallet() const {
  // @@protoc_insertion_point(field_map:agv_map.MAP_ARR.pallet)
  return _internal_pallet();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >*
MAP_ARR::_internal_mutable_pallet() {
  return _impl_.pallet_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Pallet >*
MAP_ARR::mutable_pallet() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.MAP_ARR.pallet)
  return _internal_mutable_pallet();
}

// map<string, .agv_map.DefautForkSet> default_frok = 7;
inline int MAP_ARR::_internal_default_frok_size() const {
  return _impl_.default_frok_.size();
}
inline int MAP_ARR::default_frok_size() const {
  return _internal_default_frok_size();
}
inline void MAP_ARR::clear_default_frok() {
  _impl_.default_frok_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >&
MAP_ARR::_internal_default_frok() const {
  return _impl_.default_frok_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >&
MAP_ARR::default_frok() const {
  // @@protoc_insertion_point(field_map:agv_map.MAP_ARR.default_frok)
  return _internal_default_frok();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >*
MAP_ARR::_internal_mutable_default_frok() {
  return _impl_.default_frok_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::DefautForkSet >*
MAP_ARR::mutable_default_frok() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.MAP_ARR.default_frok)
  return _internal_mutable_default_frok();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Map

// .agv_map.Conf conf = 1;
inline bool Map::_internal_has_conf() const {
  return this != internal_default_instance() && _impl_.conf_ != nullptr;
}
inline bool Map::has_conf() const {
  return _internal_has_conf();
}
inline void Map::clear_conf() {
  if (GetArenaForAllocation() == nullptr && _impl_.conf_ != nullptr) {
    delete _impl_.conf_;
  }
  _impl_.conf_ = nullptr;
}
inline const ::agv_map::Conf& Map::_internal_conf() const {
  const ::agv_map::Conf* p = _impl_.conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Conf&>(
      ::agv_map::_Conf_default_instance_);
}
inline const ::agv_map::Conf& Map::conf() const {
  // @@protoc_insertion_point(field_get:agv_map.Map.conf)
  return _internal_conf();
}
inline void Map::unsafe_arena_set_allocated_conf(
    ::agv_map::Conf* conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conf_);
  }
  _impl_.conf_ = conf;
  if (conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Map.conf)
}
inline ::agv_map::Conf* Map::release_conf() {
  
  ::agv_map::Conf* temp = _impl_.conf_;
  _impl_.conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Conf* Map::unsafe_arena_release_conf() {
  // @@protoc_insertion_point(field_release:agv_map.Map.conf)
  
  ::agv_map::Conf* temp = _impl_.conf_;
  _impl_.conf_ = nullptr;
  return temp;
}
inline ::agv_map::Conf* Map::_internal_mutable_conf() {
  
  if (_impl_.conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Conf>(GetArenaForAllocation());
    _impl_.conf_ = p;
  }
  return _impl_.conf_;
}
inline ::agv_map::Conf* Map::mutable_conf() {
  ::agv_map::Conf* _msg = _internal_mutable_conf();
  // @@protoc_insertion_point(field_mutable:agv_map.Map.conf)
  return _msg;
}
inline void Map::set_allocated_conf(::agv_map::Conf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conf);
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Map.conf)
}

// map<int32, .agv_map.Node> node = 2;
inline int Map::_internal_node_size() const {
  return _impl_.node_.size();
}
inline int Map::node_size() const {
  return _internal_node_size();
}
inline void Map::clear_node() {
  _impl_.node_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >&
Map::_internal_node() const {
  return _impl_.node_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >&
Map::node() const {
  // @@protoc_insertion_point(field_map:agv_map.Map.node)
  return _internal_node();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >*
Map::_internal_mutable_node() {
  return _impl_.node_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Node >*
Map::mutable_node() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Map.node)
  return _internal_mutable_node();
}

// map<int32, .agv_map.Segment> segment = 3;
inline int Map::_internal_segment_size() const {
  return _impl_.segment_.size();
}
inline int Map::segment_size() const {
  return _internal_segment_size();
}
inline void Map::clear_segment() {
  _impl_.segment_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >&
Map::_internal_segment() const {
  return _impl_.segment_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >&
Map::segment() const {
  // @@protoc_insertion_point(field_map:agv_map.Map.segment)
  return _internal_segment();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >*
Map::_internal_mutable_segment() {
  return _impl_.segment_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Segment >*
Map::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Map.segment)
  return _internal_mutable_segment();
}

// map<int32, .agv_map.Area> area = 4;
inline int Map::_internal_area_size() const {
  return _impl_.area_.size();
}
inline int Map::area_size() const {
  return _internal_area_size();
}
inline void Map::clear_area() {
  _impl_.area_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >&
Map::_internal_area() const {
  return _impl_.area_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >&
Map::area() const {
  // @@protoc_insertion_point(field_map:agv_map.Map.area)
  return _internal_area();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >*
Map::_internal_mutable_area() {
  return _impl_.area_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Area >*
Map::mutable_area() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Map.area)
  return _internal_mutable_area();
}

// map<int32, .agv_map.Label> label = 5;
inline int Map::_internal_label_size() const {
  return _impl_.label_.size();
}
inline int Map::label_size() const {
  return _internal_label_size();
}
inline void Map::clear_label() {
  _impl_.label_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >&
Map::_internal_label() const {
  return _impl_.label_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >&
Map::label() const {
  // @@protoc_insertion_point(field_map:agv_map.Map.label)
  return _internal_label();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >*
Map::_internal_mutable_label() {
  return _impl_.label_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Label >*
Map::mutable_label() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Map.label)
  return _internal_mutable_label();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Conf_param

// string key = 1;
inline void Conf_param::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Conf_param::key() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.param.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Conf_param::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Conf.param.key)
}
inline std::string* Conf_param::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:agv_map.Conf.param.key)
  return _s;
}
inline const std::string& Conf_param::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Conf_param::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Conf_param::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Conf_param::release_key() {
  // @@protoc_insertion_point(field_release:agv_map.Conf.param.key)
  return _impl_.key_.Release();
}
inline void Conf_param::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Conf.param.key)
}

// string value = 2;
inline void Conf_param::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Conf_param::value() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.param.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Conf_param::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Conf.param.value)
}
inline std::string* Conf_param::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:agv_map.Conf.param.value)
  return _s;
}
inline const std::string& Conf_param::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Conf_param::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Conf_param::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Conf_param::release_value() {
  // @@protoc_insertion_point(field_release:agv_map.Conf.param.value)
  return _impl_.value_.Release();
}
inline void Conf_param::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Conf.param.value)
}

// -------------------------------------------------------------------

// Conf

// int64 map_ts = 1;
inline void Conf::clear_map_ts() {
  _impl_.map_ts_ = int64_t{0};
}
inline int64_t Conf::_internal_map_ts() const {
  return _impl_.map_ts_;
}
inline int64_t Conf::map_ts() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.map_ts)
  return _internal_map_ts();
}
inline void Conf::_internal_set_map_ts(int64_t value) {
  
  _impl_.map_ts_ = value;
}
inline void Conf::set_map_ts(int64_t value) {
  _internal_set_map_ts(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.map_ts)
}

// int32 map_zone = 2;
inline void Conf::clear_map_zone() {
  _impl_.map_zone_ = 0;
}
inline int32_t Conf::_internal_map_zone() const {
  return _impl_.map_zone_;
}
inline int32_t Conf::map_zone() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.map_zone)
  return _internal_map_zone();
}
inline void Conf::_internal_set_map_zone(int32_t value) {
  
  _impl_.map_zone_ = value;
}
inline void Conf::set_map_zone(int32_t value) {
  _internal_set_map_zone(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.map_zone)
}

// string map_name = 3;
inline void Conf::clear_map_name() {
  _impl_.map_name_.ClearToEmpty();
}
inline const std::string& Conf::map_name() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Conf::set_map_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Conf.map_name)
}
inline std::string* Conf::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:agv_map.Conf.map_name)
  return _s;
}
inline const std::string& Conf::_internal_map_name() const {
  return _impl_.map_name_.Get();
}
inline void Conf::_internal_set_map_name(const std::string& value) {
  
  _impl_.map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Conf::_internal_mutable_map_name() {
  
  return _impl_.map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Conf::release_map_name() {
  // @@protoc_insertion_point(field_release:agv_map.Conf.map_name)
  return _impl_.map_name_.Release();
}
inline void Conf::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  _impl_.map_name_.SetAllocated(map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Conf.map_name)
}

// int32 max_x = 4;
inline void Conf::clear_max_x() {
  _impl_.max_x_ = 0;
}
inline int32_t Conf::_internal_max_x() const {
  return _impl_.max_x_;
}
inline int32_t Conf::max_x() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.max_x)
  return _internal_max_x();
}
inline void Conf::_internal_set_max_x(int32_t value) {
  
  _impl_.max_x_ = value;
}
inline void Conf::set_max_x(int32_t value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.max_x)
}

// int32 min_x = 5;
inline void Conf::clear_min_x() {
  _impl_.min_x_ = 0;
}
inline int32_t Conf::_internal_min_x() const {
  return _impl_.min_x_;
}
inline int32_t Conf::min_x() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.min_x)
  return _internal_min_x();
}
inline void Conf::_internal_set_min_x(int32_t value) {
  
  _impl_.min_x_ = value;
}
inline void Conf::set_min_x(int32_t value) {
  _internal_set_min_x(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.min_x)
}

// int32 max_y = 6;
inline void Conf::clear_max_y() {
  _impl_.max_y_ = 0;
}
inline int32_t Conf::_internal_max_y() const {
  return _impl_.max_y_;
}
inline int32_t Conf::max_y() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.max_y)
  return _internal_max_y();
}
inline void Conf::_internal_set_max_y(int32_t value) {
  
  _impl_.max_y_ = value;
}
inline void Conf::set_max_y(int32_t value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.max_y)
}

// int32 min_y = 7;
inline void Conf::clear_min_y() {
  _impl_.min_y_ = 0;
}
inline int32_t Conf::_internal_min_y() const {
  return _impl_.min_y_;
}
inline int32_t Conf::min_y() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.min_y)
  return _internal_min_y();
}
inline void Conf::_internal_set_min_y(int32_t value) {
  
  _impl_.min_y_ = value;
}
inline void Conf::set_min_y(int32_t value) {
  _internal_set_min_y(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.min_y)
}

// string project_name = 8;
inline void Conf::clear_project_name() {
  _impl_.project_name_.ClearToEmpty();
}
inline const std::string& Conf::project_name() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.project_name)
  return _internal_project_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Conf::set_project_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Conf.project_name)
}
inline std::string* Conf::mutable_project_name() {
  std::string* _s = _internal_mutable_project_name();
  // @@protoc_insertion_point(field_mutable:agv_map.Conf.project_name)
  return _s;
}
inline const std::string& Conf::_internal_project_name() const {
  return _impl_.project_name_.Get();
}
inline void Conf::_internal_set_project_name(const std::string& value) {
  
  _impl_.project_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Conf::_internal_mutable_project_name() {
  
  return _impl_.project_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Conf::release_project_name() {
  // @@protoc_insertion_point(field_release:agv_map.Conf.project_name)
  return _impl_.project_name_.Release();
}
inline void Conf::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  _impl_.project_name_.SetAllocated(project_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_name_.IsDefault()) {
    _impl_.project_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Conf.project_name)
}

// map<int32, int32> agv_ids = 9;
inline int Conf::_internal_agv_ids_size() const {
  return _impl_.agv_ids_.size();
}
inline int Conf::agv_ids_size() const {
  return _internal_agv_ids_size();
}
inline void Conf::clear_agv_ids() {
  _impl_.agv_ids_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
Conf::_internal_agv_ids() const {
  return _impl_.agv_ids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
Conf::agv_ids() const {
  // @@protoc_insertion_point(field_map:agv_map.Conf.agv_ids)
  return _internal_agv_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
Conf::_internal_mutable_agv_ids() {
  return _impl_.agv_ids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
Conf::mutable_agv_ids() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Conf.agv_ids)
  return _internal_mutable_agv_ids();
}

// string gcood_type = 10;
inline void Conf::clear_gcood_type() {
  _impl_.gcood_type_.ClearToEmpty();
}
inline const std::string& Conf::gcood_type() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.gcood_type)
  return _internal_gcood_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Conf::set_gcood_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gcood_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Conf.gcood_type)
}
inline std::string* Conf::mutable_gcood_type() {
  std::string* _s = _internal_mutable_gcood_type();
  // @@protoc_insertion_point(field_mutable:agv_map.Conf.gcood_type)
  return _s;
}
inline const std::string& Conf::_internal_gcood_type() const {
  return _impl_.gcood_type_.Get();
}
inline void Conf::_internal_set_gcood_type(const std::string& value) {
  
  _impl_.gcood_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Conf::_internal_mutable_gcood_type() {
  
  return _impl_.gcood_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Conf::release_gcood_type() {
  // @@protoc_insertion_point(field_release:agv_map.Conf.gcood_type)
  return _impl_.gcood_type_.Release();
}
inline void Conf::set_allocated_gcood_type(std::string* gcood_type) {
  if (gcood_type != nullptr) {
    
  } else {
    
  }
  _impl_.gcood_type_.SetAllocated(gcood_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gcood_type_.IsDefault()) {
    _impl_.gcood_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Conf.gcood_type)
}

// int32 gcood_dm_value = 11;
inline void Conf::clear_gcood_dm_value() {
  _impl_.gcood_dm_value_ = 0;
}
inline int32_t Conf::_internal_gcood_dm_value() const {
  return _impl_.gcood_dm_value_;
}
inline int32_t Conf::gcood_dm_value() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.gcood_dm_value)
  return _internal_gcood_dm_value();
}
inline void Conf::_internal_set_gcood_dm_value(int32_t value) {
  
  _impl_.gcood_dm_value_ = value;
}
inline void Conf::set_gcood_dm_value(int32_t value) {
  _internal_set_gcood_dm_value(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.gcood_dm_value)
}

// int32 background_pos_x = 12;
inline void Conf::clear_background_pos_x() {
  _impl_.background_pos_x_ = 0;
}
inline int32_t Conf::_internal_background_pos_x() const {
  return _impl_.background_pos_x_;
}
inline int32_t Conf::background_pos_x() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.background_pos_x)
  return _internal_background_pos_x();
}
inline void Conf::_internal_set_background_pos_x(int32_t value) {
  
  _impl_.background_pos_x_ = value;
}
inline void Conf::set_background_pos_x(int32_t value) {
  _internal_set_background_pos_x(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.background_pos_x)
}

// int32 background_pos_y = 13;
inline void Conf::clear_background_pos_y() {
  _impl_.background_pos_y_ = 0;
}
inline int32_t Conf::_internal_background_pos_y() const {
  return _impl_.background_pos_y_;
}
inline int32_t Conf::background_pos_y() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.background_pos_y)
  return _internal_background_pos_y();
}
inline void Conf::_internal_set_background_pos_y(int32_t value) {
  
  _impl_.background_pos_y_ = value;
}
inline void Conf::set_background_pos_y(int32_t value) {
  _internal_set_background_pos_y(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.background_pos_y)
}

// int32 background_length = 14;
inline void Conf::clear_background_length() {
  _impl_.background_length_ = 0;
}
inline int32_t Conf::_internal_background_length() const {
  return _impl_.background_length_;
}
inline int32_t Conf::background_length() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.background_length)
  return _internal_background_length();
}
inline void Conf::_internal_set_background_length(int32_t value) {
  
  _impl_.background_length_ = value;
}
inline void Conf::set_background_length(int32_t value) {
  _internal_set_background_length(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.background_length)
}

// int32 background_width = 15;
inline void Conf::clear_background_width() {
  _impl_.background_width_ = 0;
}
inline int32_t Conf::_internal_background_width() const {
  return _impl_.background_width_;
}
inline int32_t Conf::background_width() const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.background_width)
  return _internal_background_width();
}
inline void Conf::_internal_set_background_width(int32_t value) {
  
  _impl_.background_width_ = value;
}
inline void Conf::set_background_width(int32_t value) {
  _internal_set_background_width(value);
  // @@protoc_insertion_point(field_set:agv_map.Conf.background_width)
}

// repeated .agv_map.Conf.param mission_type_list = 16;
inline int Conf::_internal_mission_type_list_size() const {
  return _impl_.mission_type_list_.size();
}
inline int Conf::mission_type_list_size() const {
  return _internal_mission_type_list_size();
}
inline void Conf::clear_mission_type_list() {
  _impl_.mission_type_list_.Clear();
}
inline ::agv_map::Conf_param* Conf::mutable_mission_type_list(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Conf.mission_type_list)
  return _impl_.mission_type_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Conf_param >*
Conf::mutable_mission_type_list() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Conf.mission_type_list)
  return &_impl_.mission_type_list_;
}
inline const ::agv_map::Conf_param& Conf::_internal_mission_type_list(int index) const {
  return _impl_.mission_type_list_.Get(index);
}
inline const ::agv_map::Conf_param& Conf::mission_type_list(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Conf.mission_type_list)
  return _internal_mission_type_list(index);
}
inline ::agv_map::Conf_param* Conf::_internal_add_mission_type_list() {
  return _impl_.mission_type_list_.Add();
}
inline ::agv_map::Conf_param* Conf::add_mission_type_list() {
  ::agv_map::Conf_param* _add = _internal_add_mission_type_list();
  // @@protoc_insertion_point(field_add:agv_map.Conf.mission_type_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Conf_param >&
Conf::mission_type_list() const {
  // @@protoc_insertion_point(field_list:agv_map.Conf.mission_type_list)
  return _impl_.mission_type_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// sceneData_data

// map<string, string> param_map = 1;
inline int sceneData_data::_internal_param_map_size() const {
  return _impl_.param_map_.size();
}
inline int sceneData_data::param_map_size() const {
  return _internal_param_map_size();
}
inline void sceneData_data::clear_param_map() {
  _impl_.param_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
sceneData_data::_internal_param_map() const {
  return _impl_.param_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
sceneData_data::param_map() const {
  // @@protoc_insertion_point(field_map:agv_map.sceneData.data.param_map)
  return _internal_param_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
sceneData_data::_internal_mutable_param_map() {
  return _impl_.param_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
sceneData_data::mutable_param_map() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.sceneData.data.param_map)
  return _internal_mutable_param_map();
}

// map<string, string> index_map = 2;
inline int sceneData_data::_internal_index_map_size() const {
  return _impl_.index_map_.size();
}
inline int sceneData_data::index_map_size() const {
  return _internal_index_map_size();
}
inline void sceneData_data::clear_index_map() {
  _impl_.index_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
sceneData_data::_internal_index_map() const {
  return _impl_.index_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
sceneData_data::index_map() const {
  // @@protoc_insertion_point(field_map:agv_map.sceneData.data.index_map)
  return _internal_index_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
sceneData_data::_internal_mutable_index_map() {
  return _impl_.index_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
sceneData_data::mutable_index_map() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.sceneData.data.index_map)
  return _internal_mutable_index_map();
}

// -------------------------------------------------------------------

// sceneData

// map<string, .agv_map.sceneData.data> param_map = 1;
inline int sceneData::_internal_param_map_size() const {
  return _impl_.param_map_.size();
}
inline int sceneData::param_map_size() const {
  return _internal_param_map_size();
}
inline void sceneData::clear_param_map() {
  _impl_.param_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >&
sceneData::_internal_param_map() const {
  return _impl_.param_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >&
sceneData::param_map() const {
  // @@protoc_insertion_point(field_map:agv_map.sceneData.param_map)
  return _internal_param_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >*
sceneData::_internal_mutable_param_map() {
  return _impl_.param_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::sceneData_data >*
sceneData::mutable_param_map() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.sceneData.param_map)
  return _internal_mutable_param_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Node_Basic

// int32 id = 1;
inline void Node_Basic::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Node_Basic::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Node_Basic::id() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.id)
  return _internal_id();
}
inline void Node_Basic::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Node_Basic::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.id)
}

// string name = 2;
inline void Node_Basic::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Node_Basic::name() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node_Basic::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.name)
}
inline std::string* Node_Basic::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.Basic.name)
  return _s;
}
inline const std::string& Node_Basic::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Node_Basic::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Node_Basic::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Node_Basic::release_name() {
  // @@protoc_insertion_point(field_release:agv_map.Node.Basic.name)
  return _impl_.name_.Release();
}
inline void Node_Basic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.Basic.name)
}

// int32 type = 3;
inline void Node_Basic::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Node_Basic::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Node_Basic::type() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.type)
  return _internal_type();
}
inline void Node_Basic::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Node_Basic::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.type)
}

// .agv_map.Coord coord = 4;
inline bool Node_Basic::_internal_has_coord() const {
  return this != internal_default_instance() && _impl_.coord_ != nullptr;
}
inline bool Node_Basic::has_coord() const {
  return _internal_has_coord();
}
inline void Node_Basic::clear_coord() {
  if (GetArenaForAllocation() == nullptr && _impl_.coord_ != nullptr) {
    delete _impl_.coord_;
  }
  _impl_.coord_ = nullptr;
}
inline const ::agv_map::Coord& Node_Basic::_internal_coord() const {
  const ::agv_map::Coord* p = _impl_.coord_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Coord&>(
      ::agv_map::_Coord_default_instance_);
}
inline const ::agv_map::Coord& Node_Basic::coord() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.coord)
  return _internal_coord();
}
inline void Node_Basic::unsafe_arena_set_allocated_coord(
    ::agv_map::Coord* coord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coord_);
  }
  _impl_.coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Node.Basic.coord)
}
inline ::agv_map::Coord* Node_Basic::release_coord() {
  
  ::agv_map::Coord* temp = _impl_.coord_;
  _impl_.coord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Coord* Node_Basic::unsafe_arena_release_coord() {
  // @@protoc_insertion_point(field_release:agv_map.Node.Basic.coord)
  
  ::agv_map::Coord* temp = _impl_.coord_;
  _impl_.coord_ = nullptr;
  return temp;
}
inline ::agv_map::Coord* Node_Basic::_internal_mutable_coord() {
  
  if (_impl_.coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Coord>(GetArenaForAllocation());
    _impl_.coord_ = p;
  }
  return _impl_.coord_;
}
inline ::agv_map::Coord* Node_Basic::mutable_coord() {
  ::agv_map::Coord* _msg = _internal_mutable_coord();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.Basic.coord)
  return _msg;
}
inline void Node_Basic::set_allocated_coord(::agv_map::Coord* coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coord_;
  }
  if (coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coord);
    if (message_arena != submessage_arena) {
      coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coord_ = coord;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.Basic.coord)
}

// int32 group_id = 5;
inline void Node_Basic::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t Node_Basic::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t Node_Basic::group_id() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.group_id)
  return _internal_group_id();
}
inline void Node_Basic::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void Node_Basic::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.group_id)
}

// sint32 QRcode = 6;
inline void Node_Basic::clear_qrcode() {
  _impl_.qrcode_ = 0;
}
inline int32_t Node_Basic::_internal_qrcode() const {
  return _impl_.qrcode_;
}
inline int32_t Node_Basic::qrcode() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.QRcode)
  return _internal_qrcode();
}
inline void Node_Basic::_internal_set_qrcode(int32_t value) {
  
  _impl_.qrcode_ = value;
}
inline void Node_Basic::set_qrcode(int32_t value) {
  _internal_set_qrcode(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.QRcode)
}

// int32 node_info = 7;
inline void Node_Basic::clear_node_info() {
  _impl_.node_info_ = 0;
}
inline int32_t Node_Basic::_internal_node_info() const {
  return _impl_.node_info_;
}
inline int32_t Node_Basic::node_info() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.node_info)
  return _internal_node_info();
}
inline void Node_Basic::_internal_set_node_info(int32_t value) {
  
  _impl_.node_info_ = value;
}
inline void Node_Basic::set_node_info(int32_t value) {
  _internal_set_node_info(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.node_info)
}

// sint32 floor = 8;
inline void Node_Basic::clear_floor() {
  _impl_.floor_ = 0;
}
inline int32_t Node_Basic::_internal_floor() const {
  return _impl_.floor_;
}
inline int32_t Node_Basic::floor() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.floor)
  return _internal_floor();
}
inline void Node_Basic::_internal_set_floor(int32_t value) {
  
  _impl_.floor_ = value;
}
inline void Node_Basic::set_floor(int32_t value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.floor)
}

// map<string, string> agv_type = 9;
inline int Node_Basic::_internal_agv_type_size() const {
  return _impl_.agv_type_.size();
}
inline int Node_Basic::agv_type_size() const {
  return _internal_agv_type_size();
}
inline void Node_Basic::clear_agv_type() {
  _impl_.agv_type_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Node_Basic::_internal_agv_type() const {
  return _impl_.agv_type_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Node_Basic::agv_type() const {
  // @@protoc_insertion_point(field_map:agv_map.Node.Basic.agv_type)
  return _internal_agv_type();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Node_Basic::_internal_mutable_agv_type() {
  return _impl_.agv_type_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Node_Basic::mutable_agv_type() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Node.Basic.agv_type)
  return _internal_mutable_agv_type();
}

// string qrcode_str = 10;
inline void Node_Basic::clear_qrcode_str() {
  _impl_.qrcode_str_.ClearToEmpty();
}
inline const std::string& Node_Basic::qrcode_str() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.qrcode_str)
  return _internal_qrcode_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node_Basic::set_qrcode_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.qrcode_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.qrcode_str)
}
inline std::string* Node_Basic::mutable_qrcode_str() {
  std::string* _s = _internal_mutable_qrcode_str();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.Basic.qrcode_str)
  return _s;
}
inline const std::string& Node_Basic::_internal_qrcode_str() const {
  return _impl_.qrcode_str_.Get();
}
inline void Node_Basic::_internal_set_qrcode_str(const std::string& value) {
  
  _impl_.qrcode_str_.Set(value, GetArenaForAllocation());
}
inline std::string* Node_Basic::_internal_mutable_qrcode_str() {
  
  return _impl_.qrcode_str_.Mutable(GetArenaForAllocation());
}
inline std::string* Node_Basic::release_qrcode_str() {
  // @@protoc_insertion_point(field_release:agv_map.Node.Basic.qrcode_str)
  return _impl_.qrcode_str_.Release();
}
inline void Node_Basic::set_allocated_qrcode_str(std::string* qrcode_str) {
  if (qrcode_str != nullptr) {
    
  } else {
    
  }
  _impl_.qrcode_str_.SetAllocated(qrcode_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qrcode_str_.IsDefault()) {
    _impl_.qrcode_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.Basic.qrcode_str)
}

// int32 stype = 11;
inline void Node_Basic::clear_stype() {
  _impl_.stype_ = 0;
}
inline int32_t Node_Basic::_internal_stype() const {
  return _impl_.stype_;
}
inline int32_t Node_Basic::stype() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.stype)
  return _internal_stype();
}
inline void Node_Basic::_internal_set_stype(int32_t value) {
  
  _impl_.stype_ = value;
}
inline void Node_Basic::set_stype(int32_t value) {
  _internal_set_stype(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.stype)
}

// string mission_type = 12;
inline void Node_Basic::clear_mission_type() {
  _impl_.mission_type_.ClearToEmpty();
}
inline const std::string& Node_Basic::mission_type() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.mission_type)
  return _internal_mission_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node_Basic::set_mission_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mission_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.mission_type)
}
inline std::string* Node_Basic::mutable_mission_type() {
  std::string* _s = _internal_mutable_mission_type();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.Basic.mission_type)
  return _s;
}
inline const std::string& Node_Basic::_internal_mission_type() const {
  return _impl_.mission_type_.Get();
}
inline void Node_Basic::_internal_set_mission_type(const std::string& value) {
  
  _impl_.mission_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Node_Basic::_internal_mutable_mission_type() {
  
  return _impl_.mission_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Node_Basic::release_mission_type() {
  // @@protoc_insertion_point(field_release:agv_map.Node.Basic.mission_type)
  return _impl_.mission_type_.Release();
}
inline void Node_Basic::set_allocated_mission_type(std::string* mission_type) {
  if (mission_type != nullptr) {
    
  } else {
    
  }
  _impl_.mission_type_.SetAllocated(mission_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mission_type_.IsDefault()) {
    _impl_.mission_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.Basic.mission_type)
}

// int32 instapnt_id = 13;
inline void Node_Basic::clear_instapnt_id() {
  _impl_.instapnt_id_ = 0;
}
inline int32_t Node_Basic::_internal_instapnt_id() const {
  return _impl_.instapnt_id_;
}
inline int32_t Node_Basic::instapnt_id() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.instapnt_id)
  return _internal_instapnt_id();
}
inline void Node_Basic::_internal_set_instapnt_id(int32_t value) {
  
  _impl_.instapnt_id_ = value;
}
inline void Node_Basic::set_instapnt_id(int32_t value) {
  _internal_set_instapnt_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.instapnt_id)
}

// int32 pallet_dir = 14;
inline void Node_Basic::clear_pallet_dir() {
  _impl_.pallet_dir_ = 0;
}
inline int32_t Node_Basic::_internal_pallet_dir() const {
  return _impl_.pallet_dir_;
}
inline int32_t Node_Basic::pallet_dir() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Basic.pallet_dir)
  return _internal_pallet_dir();
}
inline void Node_Basic::_internal_set_pallet_dir(int32_t value) {
  
  _impl_.pallet_dir_ = value;
}
inline void Node_Basic::set_pallet_dir(int32_t value) {
  _internal_set_pallet_dir(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Basic.pallet_dir)
}

// -------------------------------------------------------------------

// Node_Sim_param

// int32 enable = 1;
inline void Node_Sim_param::clear_enable() {
  _impl_.enable_ = 0;
}
inline int32_t Node_Sim_param::_internal_enable() const {
  return _impl_.enable_;
}
inline int32_t Node_Sim_param::enable() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Sim_param.enable)
  return _internal_enable();
}
inline void Node_Sim_param::_internal_set_enable(int32_t value) {
  
  _impl_.enable_ = value;
}
inline void Node_Sim_param::set_enable(int32_t value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Sim_param.enable)
}

// int32 type = 2;
inline void Node_Sim_param::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Node_Sim_param::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Node_Sim_param::type() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Sim_param.type)
  return _internal_type();
}
inline void Node_Sim_param::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Node_Sim_param::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Sim_param.type)
}

// int32 interval = 3;
inline void Node_Sim_param::clear_interval() {
  _impl_.interval_ = 0;
}
inline int32_t Node_Sim_param::_internal_interval() const {
  return _impl_.interval_;
}
inline int32_t Node_Sim_param::interval() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Sim_param.interval)
  return _internal_interval();
}
inline void Node_Sim_param::_internal_set_interval(int32_t value) {
  
  _impl_.interval_ = value;
}
inline void Node_Sim_param::set_interval(int32_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Sim_param.interval)
}

// sint32 offset = 4;
inline void Node_Sim_param::clear_offset() {
  _impl_.offset_ = 0;
}
inline int32_t Node_Sim_param::_internal_offset() const {
  return _impl_.offset_;
}
inline int32_t Node_Sim_param::offset() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Sim_param.offset)
  return _internal_offset();
}
inline void Node_Sim_param::_internal_set_offset(int32_t value) {
  
  _impl_.offset_ = value;
}
inline void Node_Sim_param::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Sim_param.offset)
}

// sint32 target_area = 5;
inline void Node_Sim_param::clear_target_area() {
  _impl_.target_area_ = 0;
}
inline int32_t Node_Sim_param::_internal_target_area() const {
  return _impl_.target_area_;
}
inline int32_t Node_Sim_param::target_area() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Sim_param.target_area)
  return _internal_target_area();
}
inline void Node_Sim_param::_internal_set_target_area(int32_t value) {
  
  _impl_.target_area_ = value;
}
inline void Node_Sim_param::set_target_area(int32_t value) {
  _internal_set_target_area(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Sim_param.target_area)
}

// sint32 target_sta = 6;
inline void Node_Sim_param::clear_target_sta() {
  _impl_.target_sta_ = 0;
}
inline int32_t Node_Sim_param::_internal_target_sta() const {
  return _impl_.target_sta_;
}
inline int32_t Node_Sim_param::target_sta() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Sim_param.target_sta)
  return _internal_target_sta();
}
inline void Node_Sim_param::_internal_set_target_sta(int32_t value) {
  
  _impl_.target_sta_ = value;
}
inline void Node_Sim_param::set_target_sta(int32_t value) {
  _internal_set_target_sta(value);
  // @@protoc_insertion_point(field_set:agv_map.Node.Sim_param.target_sta)
}

// string target = 7;
inline void Node_Sim_param::clear_target() {
  _impl_.target_.ClearToEmpty();
}
inline const std::string& Node_Sim_param::target() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.Sim_param.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node_Sim_param::set_target(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Node.Sim_param.target)
}
inline std::string* Node_Sim_param::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.Sim_param.target)
  return _s;
}
inline const std::string& Node_Sim_param::_internal_target() const {
  return _impl_.target_.Get();
}
inline void Node_Sim_param::_internal_set_target(const std::string& value) {
  
  _impl_.target_.Set(value, GetArenaForAllocation());
}
inline std::string* Node_Sim_param::_internal_mutable_target() {
  
  return _impl_.target_.Mutable(GetArenaForAllocation());
}
inline std::string* Node_Sim_param::release_target() {
  // @@protoc_insertion_point(field_release:agv_map.Node.Sim_param.target)
  return _impl_.target_.Release();
}
inline void Node_Sim_param::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  _impl_.target_.SetAllocated(target, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_.IsDefault()) {
    _impl_.target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.Sim_param.target)
}

// -------------------------------------------------------------------

// Node

// .agv_map.Node.Basic basic = 1;
inline bool Node::_internal_has_basic() const {
  return this != internal_default_instance() && _impl_.basic_ != nullptr;
}
inline bool Node::has_basic() const {
  return _internal_has_basic();
}
inline void Node::clear_basic() {
  if (GetArenaForAllocation() == nullptr && _impl_.basic_ != nullptr) {
    delete _impl_.basic_;
  }
  _impl_.basic_ = nullptr;
}
inline const ::agv_map::Node_Basic& Node::_internal_basic() const {
  const ::agv_map::Node_Basic* p = _impl_.basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Node_Basic&>(
      ::agv_map::_Node_Basic_default_instance_);
}
inline const ::agv_map::Node_Basic& Node::basic() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.basic)
  return _internal_basic();
}
inline void Node::unsafe_arena_set_allocated_basic(
    ::agv_map::Node_Basic* basic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basic_);
  }
  _impl_.basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Node.basic)
}
inline ::agv_map::Node_Basic* Node::release_basic() {
  
  ::agv_map::Node_Basic* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Node_Basic* Node::unsafe_arena_release_basic() {
  // @@protoc_insertion_point(field_release:agv_map.Node.basic)
  
  ::agv_map::Node_Basic* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
  return temp;
}
inline ::agv_map::Node_Basic* Node::_internal_mutable_basic() {
  
  if (_impl_.basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Node_Basic>(GetArenaForAllocation());
    _impl_.basic_ = p;
  }
  return _impl_.basic_;
}
inline ::agv_map::Node_Basic* Node::mutable_basic() {
  ::agv_map::Node_Basic* _msg = _internal_mutable_basic();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.basic)
  return _msg;
}
inline void Node::set_allocated_basic(::agv_map::Node_Basic* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basic);
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.basic)
}

// repeated int32 in_area = 2;
inline int Node::_internal_in_area_size() const {
  return _impl_.in_area_.size();
}
inline int Node::in_area_size() const {
  return _internal_in_area_size();
}
inline void Node::clear_in_area() {
  _impl_.in_area_.Clear();
}
inline int32_t Node::_internal_in_area(int index) const {
  return _impl_.in_area_.Get(index);
}
inline int32_t Node::in_area(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Node.in_area)
  return _internal_in_area(index);
}
inline void Node::set_in_area(int index, int32_t value) {
  _impl_.in_area_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_map.Node.in_area)
}
inline void Node::_internal_add_in_area(int32_t value) {
  _impl_.in_area_.Add(value);
}
inline void Node::add_in_area(int32_t value) {
  _internal_add_in_area(value);
  // @@protoc_insertion_point(field_add:agv_map.Node.in_area)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::_internal_in_area() const {
  return _impl_.in_area_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::in_area() const {
  // @@protoc_insertion_point(field_list:agv_map.Node.in_area)
  return _internal_in_area();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::_internal_mutable_in_area() {
  return &_impl_.in_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::mutable_in_area() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Node.in_area)
  return _internal_mutable_in_area();
}

// repeated int32 edge_list = 3;
inline int Node::_internal_edge_list_size() const {
  return _impl_.edge_list_.size();
}
inline int Node::edge_list_size() const {
  return _internal_edge_list_size();
}
inline void Node::clear_edge_list() {
  _impl_.edge_list_.Clear();
}
inline int32_t Node::_internal_edge_list(int index) const {
  return _impl_.edge_list_.Get(index);
}
inline int32_t Node::edge_list(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Node.edge_list)
  return _internal_edge_list(index);
}
inline void Node::set_edge_list(int index, int32_t value) {
  _impl_.edge_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_map.Node.edge_list)
}
inline void Node::_internal_add_edge_list(int32_t value) {
  _impl_.edge_list_.Add(value);
}
inline void Node::add_edge_list(int32_t value) {
  _internal_add_edge_list(value);
  // @@protoc_insertion_point(field_add:agv_map.Node.edge_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::_internal_edge_list() const {
  return _impl_.edge_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::edge_list() const {
  // @@protoc_insertion_point(field_list:agv_map.Node.edge_list)
  return _internal_edge_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::_internal_mutable_edge_list() {
  return &_impl_.edge_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::mutable_edge_list() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Node.edge_list)
  return _internal_mutable_edge_list();
}

// .agv_map.sceneData agv_param = 4;
inline bool Node::_internal_has_agv_param() const {
  return this != internal_default_instance() && _impl_.agv_param_ != nullptr;
}
inline bool Node::has_agv_param() const {
  return _internal_has_agv_param();
}
inline void Node::clear_agv_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.agv_param_ != nullptr) {
    delete _impl_.agv_param_;
  }
  _impl_.agv_param_ = nullptr;
}
inline const ::agv_map::sceneData& Node::_internal_agv_param() const {
  const ::agv_map::sceneData* p = _impl_.agv_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Node::agv_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.agv_param)
  return _internal_agv_param();
}
inline void Node::unsafe_arena_set_allocated_agv_param(
    ::agv_map::sceneData* agv_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agv_param_);
  }
  _impl_.agv_param_ = agv_param;
  if (agv_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Node.agv_param)
}
inline ::agv_map::sceneData* Node::release_agv_param() {
  
  ::agv_map::sceneData* temp = _impl_.agv_param_;
  _impl_.agv_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Node::unsafe_arena_release_agv_param() {
  // @@protoc_insertion_point(field_release:agv_map.Node.agv_param)
  
  ::agv_map::sceneData* temp = _impl_.agv_param_;
  _impl_.agv_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Node::_internal_mutable_agv_param() {
  
  if (_impl_.agv_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.agv_param_ = p;
  }
  return _impl_.agv_param_;
}
inline ::agv_map::sceneData* Node::mutable_agv_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_agv_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.agv_param)
  return _msg;
}
inline void Node::set_allocated_agv_param(::agv_map::sceneData* agv_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.agv_param_;
  }
  if (agv_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(agv_param);
    if (message_arena != submessage_arena) {
      agv_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agv_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agv_param_ = agv_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.agv_param)
}

// .agv_map.sceneData avo_param = 5;
inline bool Node::_internal_has_avo_param() const {
  return this != internal_default_instance() && _impl_.avo_param_ != nullptr;
}
inline bool Node::has_avo_param() const {
  return _internal_has_avo_param();
}
inline void Node::clear_avo_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.avo_param_ != nullptr) {
    delete _impl_.avo_param_;
  }
  _impl_.avo_param_ = nullptr;
}
inline const ::agv_map::sceneData& Node::_internal_avo_param() const {
  const ::agv_map::sceneData* p = _impl_.avo_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Node::avo_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.avo_param)
  return _internal_avo_param();
}
inline void Node::unsafe_arena_set_allocated_avo_param(
    ::agv_map::sceneData* avo_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.avo_param_);
  }
  _impl_.avo_param_ = avo_param;
  if (avo_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Node.avo_param)
}
inline ::agv_map::sceneData* Node::release_avo_param() {
  
  ::agv_map::sceneData* temp = _impl_.avo_param_;
  _impl_.avo_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Node::unsafe_arena_release_avo_param() {
  // @@protoc_insertion_point(field_release:agv_map.Node.avo_param)
  
  ::agv_map::sceneData* temp = _impl_.avo_param_;
  _impl_.avo_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Node::_internal_mutable_avo_param() {
  
  if (_impl_.avo_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.avo_param_ = p;
  }
  return _impl_.avo_param_;
}
inline ::agv_map::sceneData* Node::mutable_avo_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_avo_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.avo_param)
  return _msg;
}
inline void Node::set_allocated_avo_param(::agv_map::sceneData* avo_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.avo_param_;
  }
  if (avo_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(avo_param);
    if (message_arena != submessage_arena) {
      avo_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avo_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.avo_param_ = avo_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.avo_param)
}

// .agv_map.sceneData ctl_param = 6;
inline bool Node::_internal_has_ctl_param() const {
  return this != internal_default_instance() && _impl_.ctl_param_ != nullptr;
}
inline bool Node::has_ctl_param() const {
  return _internal_has_ctl_param();
}
inline void Node::clear_ctl_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.ctl_param_ != nullptr) {
    delete _impl_.ctl_param_;
  }
  _impl_.ctl_param_ = nullptr;
}
inline const ::agv_map::sceneData& Node::_internal_ctl_param() const {
  const ::agv_map::sceneData* p = _impl_.ctl_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Node::ctl_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.ctl_param)
  return _internal_ctl_param();
}
inline void Node::unsafe_arena_set_allocated_ctl_param(
    ::agv_map::sceneData* ctl_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ctl_param_);
  }
  _impl_.ctl_param_ = ctl_param;
  if (ctl_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Node.ctl_param)
}
inline ::agv_map::sceneData* Node::release_ctl_param() {
  
  ::agv_map::sceneData* temp = _impl_.ctl_param_;
  _impl_.ctl_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Node::unsafe_arena_release_ctl_param() {
  // @@protoc_insertion_point(field_release:agv_map.Node.ctl_param)
  
  ::agv_map::sceneData* temp = _impl_.ctl_param_;
  _impl_.ctl_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Node::_internal_mutable_ctl_param() {
  
  if (_impl_.ctl_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.ctl_param_ = p;
  }
  return _impl_.ctl_param_;
}
inline ::agv_map::sceneData* Node::mutable_ctl_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_ctl_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.ctl_param)
  return _msg;
}
inline void Node::set_allocated_ctl_param(::agv_map::sceneData* ctl_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ctl_param_;
  }
  if (ctl_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ctl_param);
    if (message_arena != submessage_arena) {
      ctl_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctl_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ctl_param_ = ctl_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.ctl_param)
}

// .agv_map.sceneData rut_param = 7;
inline bool Node::_internal_has_rut_param() const {
  return this != internal_default_instance() && _impl_.rut_param_ != nullptr;
}
inline bool Node::has_rut_param() const {
  return _internal_has_rut_param();
}
inline void Node::clear_rut_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.rut_param_ != nullptr) {
    delete _impl_.rut_param_;
  }
  _impl_.rut_param_ = nullptr;
}
inline const ::agv_map::sceneData& Node::_internal_rut_param() const {
  const ::agv_map::sceneData* p = _impl_.rut_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Node::rut_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.rut_param)
  return _internal_rut_param();
}
inline void Node::unsafe_arena_set_allocated_rut_param(
    ::agv_map::sceneData* rut_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rut_param_);
  }
  _impl_.rut_param_ = rut_param;
  if (rut_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Node.rut_param)
}
inline ::agv_map::sceneData* Node::release_rut_param() {
  
  ::agv_map::sceneData* temp = _impl_.rut_param_;
  _impl_.rut_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Node::unsafe_arena_release_rut_param() {
  // @@protoc_insertion_point(field_release:agv_map.Node.rut_param)
  
  ::agv_map::sceneData* temp = _impl_.rut_param_;
  _impl_.rut_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Node::_internal_mutable_rut_param() {
  
  if (_impl_.rut_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.rut_param_ = p;
  }
  return _impl_.rut_param_;
}
inline ::agv_map::sceneData* Node::mutable_rut_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_rut_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.rut_param)
  return _msg;
}
inline void Node::set_allocated_rut_param(::agv_map::sceneData* rut_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rut_param_;
  }
  if (rut_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rut_param);
    if (message_arena != submessage_arena) {
      rut_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rut_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rut_param_ = rut_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.rut_param)
}

// .agv_map.sceneData act_param = 8;
inline bool Node::_internal_has_act_param() const {
  return this != internal_default_instance() && _impl_.act_param_ != nullptr;
}
inline bool Node::has_act_param() const {
  return _internal_has_act_param();
}
inline void Node::clear_act_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.act_param_ != nullptr) {
    delete _impl_.act_param_;
  }
  _impl_.act_param_ = nullptr;
}
inline const ::agv_map::sceneData& Node::_internal_act_param() const {
  const ::agv_map::sceneData* p = _impl_.act_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Node::act_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.act_param)
  return _internal_act_param();
}
inline void Node::unsafe_arena_set_allocated_act_param(
    ::agv_map::sceneData* act_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.act_param_);
  }
  _impl_.act_param_ = act_param;
  if (act_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Node.act_param)
}
inline ::agv_map::sceneData* Node::release_act_param() {
  
  ::agv_map::sceneData* temp = _impl_.act_param_;
  _impl_.act_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Node::unsafe_arena_release_act_param() {
  // @@protoc_insertion_point(field_release:agv_map.Node.act_param)
  
  ::agv_map::sceneData* temp = _impl_.act_param_;
  _impl_.act_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Node::_internal_mutable_act_param() {
  
  if (_impl_.act_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.act_param_ = p;
  }
  return _impl_.act_param_;
}
inline ::agv_map::sceneData* Node::mutable_act_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_act_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.act_param)
  return _msg;
}
inline void Node::set_allocated_act_param(::agv_map::sceneData* act_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.act_param_;
  }
  if (act_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(act_param);
    if (message_arena != submessage_arena) {
      act_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, act_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.act_param_ = act_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.act_param)
}

// .agv_map.Node.Sim_param sim_param = 9;
inline bool Node::_internal_has_sim_param() const {
  return this != internal_default_instance() && _impl_.sim_param_ != nullptr;
}
inline bool Node::has_sim_param() const {
  return _internal_has_sim_param();
}
inline void Node::clear_sim_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.sim_param_ != nullptr) {
    delete _impl_.sim_param_;
  }
  _impl_.sim_param_ = nullptr;
}
inline const ::agv_map::Node_Sim_param& Node::_internal_sim_param() const {
  const ::agv_map::Node_Sim_param* p = _impl_.sim_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Node_Sim_param&>(
      ::agv_map::_Node_Sim_param_default_instance_);
}
inline const ::agv_map::Node_Sim_param& Node::sim_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Node.sim_param)
  return _internal_sim_param();
}
inline void Node::unsafe_arena_set_allocated_sim_param(
    ::agv_map::Node_Sim_param* sim_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sim_param_);
  }
  _impl_.sim_param_ = sim_param;
  if (sim_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Node.sim_param)
}
inline ::agv_map::Node_Sim_param* Node::release_sim_param() {
  
  ::agv_map::Node_Sim_param* temp = _impl_.sim_param_;
  _impl_.sim_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Node_Sim_param* Node::unsafe_arena_release_sim_param() {
  // @@protoc_insertion_point(field_release:agv_map.Node.sim_param)
  
  ::agv_map::Node_Sim_param* temp = _impl_.sim_param_;
  _impl_.sim_param_ = nullptr;
  return temp;
}
inline ::agv_map::Node_Sim_param* Node::_internal_mutable_sim_param() {
  
  if (_impl_.sim_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Node_Sim_param>(GetArenaForAllocation());
    _impl_.sim_param_ = p;
  }
  return _impl_.sim_param_;
}
inline ::agv_map::Node_Sim_param* Node::mutable_sim_param() {
  ::agv_map::Node_Sim_param* _msg = _internal_mutable_sim_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Node.sim_param)
  return _msg;
}
inline void Node::set_allocated_sim_param(::agv_map::Node_Sim_param* sim_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sim_param_;
  }
  if (sim_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sim_param);
    if (message_arena != submessage_arena) {
      sim_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sim_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sim_param_ = sim_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Node.sim_param)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Edge_Basic

// int32 id = 1;
inline void Edge_Basic::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Edge_Basic::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Edge_Basic::id() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.id)
  return _internal_id();
}
inline void Edge_Basic::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Edge_Basic::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.id)
}

// int32 type = 2;
inline void Edge_Basic::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Edge_Basic::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Edge_Basic::type() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.type)
  return _internal_type();
}
inline void Edge_Basic::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Edge_Basic::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.type)
}

// int32 start_id = 3;
inline void Edge_Basic::clear_start_id() {
  _impl_.start_id_ = 0;
}
inline int32_t Edge_Basic::_internal_start_id() const {
  return _impl_.start_id_;
}
inline int32_t Edge_Basic::start_id() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.start_id)
  return _internal_start_id();
}
inline void Edge_Basic::_internal_set_start_id(int32_t value) {
  
  _impl_.start_id_ = value;
}
inline void Edge_Basic::set_start_id(int32_t value) {
  _internal_set_start_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.start_id)
}

// .agv_map.Position start_pos = 4;
inline bool Edge_Basic::_internal_has_start_pos() const {
  return this != internal_default_instance() && _impl_.start_pos_ != nullptr;
}
inline bool Edge_Basic::has_start_pos() const {
  return _internal_has_start_pos();
}
inline void Edge_Basic::clear_start_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_pos_ != nullptr) {
    delete _impl_.start_pos_;
  }
  _impl_.start_pos_ = nullptr;
}
inline const ::agv_map::Position& Edge_Basic::_internal_start_pos() const {
  const ::agv_map::Position* p = _impl_.start_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Position&>(
      ::agv_map::_Position_default_instance_);
}
inline const ::agv_map::Position& Edge_Basic::start_pos() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.start_pos)
  return _internal_start_pos();
}
inline void Edge_Basic::unsafe_arena_set_allocated_start_pos(
    ::agv_map::Position* start_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_pos_);
  }
  _impl_.start_pos_ = start_pos;
  if (start_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.Basic.start_pos)
}
inline ::agv_map::Position* Edge_Basic::release_start_pos() {
  
  ::agv_map::Position* temp = _impl_.start_pos_;
  _impl_.start_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Position* Edge_Basic::unsafe_arena_release_start_pos() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.Basic.start_pos)
  
  ::agv_map::Position* temp = _impl_.start_pos_;
  _impl_.start_pos_ = nullptr;
  return temp;
}
inline ::agv_map::Position* Edge_Basic::_internal_mutable_start_pos() {
  
  if (_impl_.start_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Position>(GetArenaForAllocation());
    _impl_.start_pos_ = p;
  }
  return _impl_.start_pos_;
}
inline ::agv_map::Position* Edge_Basic::mutable_start_pos() {
  ::agv_map::Position* _msg = _internal_mutable_start_pos();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.Basic.start_pos)
  return _msg;
}
inline void Edge_Basic::set_allocated_start_pos(::agv_map::Position* start_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_pos_;
  }
  if (start_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_pos);
    if (message_arena != submessage_arena) {
      start_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_pos_ = start_pos;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.Basic.start_pos)
}

// int32 end_id = 5;
inline void Edge_Basic::clear_end_id() {
  _impl_.end_id_ = 0;
}
inline int32_t Edge_Basic::_internal_end_id() const {
  return _impl_.end_id_;
}
inline int32_t Edge_Basic::end_id() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.end_id)
  return _internal_end_id();
}
inline void Edge_Basic::_internal_set_end_id(int32_t value) {
  
  _impl_.end_id_ = value;
}
inline void Edge_Basic::set_end_id(int32_t value) {
  _internal_set_end_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.end_id)
}

// .agv_map.Position end_pos = 6;
inline bool Edge_Basic::_internal_has_end_pos() const {
  return this != internal_default_instance() && _impl_.end_pos_ != nullptr;
}
inline bool Edge_Basic::has_end_pos() const {
  return _internal_has_end_pos();
}
inline void Edge_Basic::clear_end_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_pos_ != nullptr) {
    delete _impl_.end_pos_;
  }
  _impl_.end_pos_ = nullptr;
}
inline const ::agv_map::Position& Edge_Basic::_internal_end_pos() const {
  const ::agv_map::Position* p = _impl_.end_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Position&>(
      ::agv_map::_Position_default_instance_);
}
inline const ::agv_map::Position& Edge_Basic::end_pos() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.end_pos)
  return _internal_end_pos();
}
inline void Edge_Basic::unsafe_arena_set_allocated_end_pos(
    ::agv_map::Position* end_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_pos_);
  }
  _impl_.end_pos_ = end_pos;
  if (end_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.Basic.end_pos)
}
inline ::agv_map::Position* Edge_Basic::release_end_pos() {
  
  ::agv_map::Position* temp = _impl_.end_pos_;
  _impl_.end_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Position* Edge_Basic::unsafe_arena_release_end_pos() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.Basic.end_pos)
  
  ::agv_map::Position* temp = _impl_.end_pos_;
  _impl_.end_pos_ = nullptr;
  return temp;
}
inline ::agv_map::Position* Edge_Basic::_internal_mutable_end_pos() {
  
  if (_impl_.end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Position>(GetArenaForAllocation());
    _impl_.end_pos_ = p;
  }
  return _impl_.end_pos_;
}
inline ::agv_map::Position* Edge_Basic::mutable_end_pos() {
  ::agv_map::Position* _msg = _internal_mutable_end_pos();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.Basic.end_pos)
  return _msg;
}
inline void Edge_Basic::set_allocated_end_pos(::agv_map::Position* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_pos_;
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_pos);
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.Basic.end_pos)
}

// int32 seglen = 7;
inline void Edge_Basic::clear_seglen() {
  _impl_.seglen_ = 0;
}
inline int32_t Edge_Basic::_internal_seglen() const {
  return _impl_.seglen_;
}
inline int32_t Edge_Basic::seglen() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.seglen)
  return _internal_seglen();
}
inline void Edge_Basic::_internal_set_seglen(int32_t value) {
  
  _impl_.seglen_ = value;
}
inline void Edge_Basic::set_seglen(int32_t value) {
  _internal_set_seglen(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.seglen)
}

// map<string, string> agv_type = 8;
inline int Edge_Basic::_internal_agv_type_size() const {
  return _impl_.agv_type_.size();
}
inline int Edge_Basic::agv_type_size() const {
  return _internal_agv_type_size();
}
inline void Edge_Basic::clear_agv_type() {
  _impl_.agv_type_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Edge_Basic::_internal_agv_type() const {
  return _impl_.agv_type_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Edge_Basic::agv_type() const {
  // @@protoc_insertion_point(field_map:agv_map.Edge.Basic.agv_type)
  return _internal_agv_type();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Edge_Basic::_internal_mutable_agv_type() {
  return _impl_.agv_type_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Edge_Basic::mutable_agv_type() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Edge.Basic.agv_type)
  return _internal_mutable_agv_type();
}

// int32 enable = 9;
inline void Edge_Basic::clear_enable() {
  _impl_.enable_ = 0;
}
inline int32_t Edge_Basic::_internal_enable() const {
  return _impl_.enable_;
}
inline int32_t Edge_Basic::enable() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.enable)
  return _internal_enable();
}
inline void Edge_Basic::_internal_set_enable(int32_t value) {
  
  _impl_.enable_ = value;
}
inline void Edge_Basic::set_enable(int32_t value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.enable)
}

// sint32 floor = 10;
inline void Edge_Basic::clear_floor() {
  _impl_.floor_ = 0;
}
inline int32_t Edge_Basic::_internal_floor() const {
  return _impl_.floor_;
}
inline int32_t Edge_Basic::floor() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.floor)
  return _internal_floor();
}
inline void Edge_Basic::_internal_set_floor(int32_t value) {
  
  _impl_.floor_ = value;
}
inline void Edge_Basic::set_floor(int32_t value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.floor)
}

// int32 trans_angle = 11;
inline void Edge_Basic::clear_trans_angle() {
  _impl_.trans_angle_ = 0;
}
inline int32_t Edge_Basic::_internal_trans_angle() const {
  return _impl_.trans_angle_;
}
inline int32_t Edge_Basic::trans_angle() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.trans_angle)
  return _internal_trans_angle();
}
inline void Edge_Basic::_internal_set_trans_angle(int32_t value) {
  
  _impl_.trans_angle_ = value;
}
inline void Edge_Basic::set_trans_angle(int32_t value) {
  _internal_set_trans_angle(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.trans_angle)
}

// float orientation_angle = 12;
inline void Edge_Basic::clear_orientation_angle() {
  _impl_.orientation_angle_ = 0;
}
inline float Edge_Basic::_internal_orientation_angle() const {
  return _impl_.orientation_angle_;
}
inline float Edge_Basic::orientation_angle() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.orientation_angle)
  return _internal_orientation_angle();
}
inline void Edge_Basic::_internal_set_orientation_angle(float value) {
  
  _impl_.orientation_angle_ = value;
}
inline void Edge_Basic::set_orientation_angle(float value) {
  _internal_set_orientation_angle(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.orientation_angle)
}

// .agv_map.Edge.Arc arc = 13;
inline bool Edge_Basic::_internal_has_arc() const {
  return this != internal_default_instance() && _impl_.arc_ != nullptr;
}
inline bool Edge_Basic::has_arc() const {
  return _internal_has_arc();
}
inline void Edge_Basic::clear_arc() {
  if (GetArenaForAllocation() == nullptr && _impl_.arc_ != nullptr) {
    delete _impl_.arc_;
  }
  _impl_.arc_ = nullptr;
}
inline const ::agv_map::Edge_Arc& Edge_Basic::_internal_arc() const {
  const ::agv_map::Edge_Arc* p = _impl_.arc_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Edge_Arc&>(
      ::agv_map::_Edge_Arc_default_instance_);
}
inline const ::agv_map::Edge_Arc& Edge_Basic::arc() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.arc)
  return _internal_arc();
}
inline void Edge_Basic::unsafe_arena_set_allocated_arc(
    ::agv_map::Edge_Arc* arc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arc_);
  }
  _impl_.arc_ = arc;
  if (arc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.Basic.arc)
}
inline ::agv_map::Edge_Arc* Edge_Basic::release_arc() {
  
  ::agv_map::Edge_Arc* temp = _impl_.arc_;
  _impl_.arc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Edge_Arc* Edge_Basic::unsafe_arena_release_arc() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.Basic.arc)
  
  ::agv_map::Edge_Arc* temp = _impl_.arc_;
  _impl_.arc_ = nullptr;
  return temp;
}
inline ::agv_map::Edge_Arc* Edge_Basic::_internal_mutable_arc() {
  
  if (_impl_.arc_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Edge_Arc>(GetArenaForAllocation());
    _impl_.arc_ = p;
  }
  return _impl_.arc_;
}
inline ::agv_map::Edge_Arc* Edge_Basic::mutable_arc() {
  ::agv_map::Edge_Arc* _msg = _internal_mutable_arc();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.Basic.arc)
  return _msg;
}
inline void Edge_Basic::set_allocated_arc(::agv_map::Edge_Arc* arc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.arc_;
  }
  if (arc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(arc);
    if (message_arena != submessage_arena) {
      arc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arc_ = arc;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.Basic.arc)
}

// sint32 bothways = 14;
inline void Edge_Basic::clear_bothways() {
  _impl_.bothways_ = 0;
}
inline int32_t Edge_Basic::_internal_bothways() const {
  return _impl_.bothways_;
}
inline int32_t Edge_Basic::bothways() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.bothways)
  return _internal_bothways();
}
inline void Edge_Basic::_internal_set_bothways(int32_t value) {
  
  _impl_.bothways_ = value;
}
inline void Edge_Basic::set_bothways(int32_t value) {
  _internal_set_bothways(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.bothways)
}

// int32 a = 15;
inline void Edge_Basic::clear_a() {
  _impl_.a_ = 0;
}
inline int32_t Edge_Basic::_internal_a() const {
  return _impl_.a_;
}
inline int32_t Edge_Basic::a() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.a)
  return _internal_a();
}
inline void Edge_Basic::_internal_set_a(int32_t value) {
  
  _impl_.a_ = value;
}
inline void Edge_Basic::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.a)
}

// int32 b = 16;
inline void Edge_Basic::clear_b() {
  _impl_.b_ = 0;
}
inline int32_t Edge_Basic::_internal_b() const {
  return _impl_.b_;
}
inline int32_t Edge_Basic::b() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.b)
  return _internal_b();
}
inline void Edge_Basic::_internal_set_b(int32_t value) {
  
  _impl_.b_ = value;
}
inline void Edge_Basic::set_b(int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.b)
}

// int32 c = 17;
inline void Edge_Basic::clear_c() {
  _impl_.c_ = 0;
}
inline int32_t Edge_Basic::_internal_c() const {
  return _impl_.c_;
}
inline int32_t Edge_Basic::c() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.c)
  return _internal_c();
}
inline void Edge_Basic::_internal_set_c(int32_t value) {
  
  _impl_.c_ = value;
}
inline void Edge_Basic::set_c(int32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.c)
}

// int32 speed_max = 18;
inline void Edge_Basic::clear_speed_max() {
  _impl_.speed_max_ = 0;
}
inline int32_t Edge_Basic::_internal_speed_max() const {
  return _impl_.speed_max_;
}
inline int32_t Edge_Basic::speed_max() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.speed_max)
  return _internal_speed_max();
}
inline void Edge_Basic::_internal_set_speed_max(int32_t value) {
  
  _impl_.speed_max_ = value;
}
inline void Edge_Basic::set_speed_max(int32_t value) {
  _internal_set_speed_max(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.speed_max)
}

// int32 bond_seg_id = 19;
inline void Edge_Basic::clear_bond_seg_id() {
  _impl_.bond_seg_id_ = 0;
}
inline int32_t Edge_Basic::_internal_bond_seg_id() const {
  return _impl_.bond_seg_id_;
}
inline int32_t Edge_Basic::bond_seg_id() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Basic.bond_seg_id)
  return _internal_bond_seg_id();
}
inline void Edge_Basic::_internal_set_bond_seg_id(int32_t value) {
  
  _impl_.bond_seg_id_ = value;
}
inline void Edge_Basic::set_bond_seg_id(int32_t value) {
  _internal_set_bond_seg_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Basic.bond_seg_id)
}

// -------------------------------------------------------------------

// Edge_Arc

// .agv_map.Coord cen_pnt = 1;
inline bool Edge_Arc::_internal_has_cen_pnt() const {
  return this != internal_default_instance() && _impl_.cen_pnt_ != nullptr;
}
inline bool Edge_Arc::has_cen_pnt() const {
  return _internal_has_cen_pnt();
}
inline void Edge_Arc::clear_cen_pnt() {
  if (GetArenaForAllocation() == nullptr && _impl_.cen_pnt_ != nullptr) {
    delete _impl_.cen_pnt_;
  }
  _impl_.cen_pnt_ = nullptr;
}
inline const ::agv_map::Coord& Edge_Arc::_internal_cen_pnt() const {
  const ::agv_map::Coord* p = _impl_.cen_pnt_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Coord&>(
      ::agv_map::_Coord_default_instance_);
}
inline const ::agv_map::Coord& Edge_Arc::cen_pnt() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Arc.cen_pnt)
  return _internal_cen_pnt();
}
inline void Edge_Arc::unsafe_arena_set_allocated_cen_pnt(
    ::agv_map::Coord* cen_pnt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cen_pnt_);
  }
  _impl_.cen_pnt_ = cen_pnt;
  if (cen_pnt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.Arc.cen_pnt)
}
inline ::agv_map::Coord* Edge_Arc::release_cen_pnt() {
  
  ::agv_map::Coord* temp = _impl_.cen_pnt_;
  _impl_.cen_pnt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Coord* Edge_Arc::unsafe_arena_release_cen_pnt() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.Arc.cen_pnt)
  
  ::agv_map::Coord* temp = _impl_.cen_pnt_;
  _impl_.cen_pnt_ = nullptr;
  return temp;
}
inline ::agv_map::Coord* Edge_Arc::_internal_mutable_cen_pnt() {
  
  if (_impl_.cen_pnt_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Coord>(GetArenaForAllocation());
    _impl_.cen_pnt_ = p;
  }
  return _impl_.cen_pnt_;
}
inline ::agv_map::Coord* Edge_Arc::mutable_cen_pnt() {
  ::agv_map::Coord* _msg = _internal_mutable_cen_pnt();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.Arc.cen_pnt)
  return _msg;
}
inline void Edge_Arc::set_allocated_cen_pnt(::agv_map::Coord* cen_pnt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cen_pnt_;
  }
  if (cen_pnt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cen_pnt);
    if (message_arena != submessage_arena) {
      cen_pnt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cen_pnt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cen_pnt_ = cen_pnt;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.Arc.cen_pnt)
}

// int32 radius = 2;
inline void Edge_Arc::clear_radius() {
  _impl_.radius_ = 0;
}
inline int32_t Edge_Arc::_internal_radius() const {
  return _impl_.radius_;
}
inline int32_t Edge_Arc::radius() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Arc.radius)
  return _internal_radius();
}
inline void Edge_Arc::_internal_set_radius(int32_t value) {
  
  _impl_.radius_ = value;
}
inline void Edge_Arc::set_radius(int32_t value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Arc.radius)
}

// sint32 clockdir = 3;
inline void Edge_Arc::clear_clockdir() {
  _impl_.clockdir_ = 0;
}
inline int32_t Edge_Arc::_internal_clockdir() const {
  return _impl_.clockdir_;
}
inline int32_t Edge_Arc::clockdir() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.Arc.clockdir)
  return _internal_clockdir();
}
inline void Edge_Arc::_internal_set_clockdir(int32_t value) {
  
  _impl_.clockdir_ = value;
}
inline void Edge_Arc::set_clockdir(int32_t value) {
  _internal_set_clockdir(value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.Arc.clockdir)
}

// -------------------------------------------------------------------

// Edge

// .agv_map.Edge.Basic basic = 1;
inline bool Edge::_internal_has_basic() const {
  return this != internal_default_instance() && _impl_.basic_ != nullptr;
}
inline bool Edge::has_basic() const {
  return _internal_has_basic();
}
inline void Edge::clear_basic() {
  if (GetArenaForAllocation() == nullptr && _impl_.basic_ != nullptr) {
    delete _impl_.basic_;
  }
  _impl_.basic_ = nullptr;
}
inline const ::agv_map::Edge_Basic& Edge::_internal_basic() const {
  const ::agv_map::Edge_Basic* p = _impl_.basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Edge_Basic&>(
      ::agv_map::_Edge_Basic_default_instance_);
}
inline const ::agv_map::Edge_Basic& Edge::basic() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.basic)
  return _internal_basic();
}
inline void Edge::unsafe_arena_set_allocated_basic(
    ::agv_map::Edge_Basic* basic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basic_);
  }
  _impl_.basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.basic)
}
inline ::agv_map::Edge_Basic* Edge::release_basic() {
  
  ::agv_map::Edge_Basic* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Edge_Basic* Edge::unsafe_arena_release_basic() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.basic)
  
  ::agv_map::Edge_Basic* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
  return temp;
}
inline ::agv_map::Edge_Basic* Edge::_internal_mutable_basic() {
  
  if (_impl_.basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Edge_Basic>(GetArenaForAllocation());
    _impl_.basic_ = p;
  }
  return _impl_.basic_;
}
inline ::agv_map::Edge_Basic* Edge::mutable_basic() {
  ::agv_map::Edge_Basic* _msg = _internal_mutable_basic();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.basic)
  return _msg;
}
inline void Edge::set_allocated_basic(::agv_map::Edge_Basic* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basic);
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.basic)
}

// repeated int32 in_area = 2;
inline int Edge::_internal_in_area_size() const {
  return _impl_.in_area_.size();
}
inline int Edge::in_area_size() const {
  return _internal_in_area_size();
}
inline void Edge::clear_in_area() {
  _impl_.in_area_.Clear();
}
inline int32_t Edge::_internal_in_area(int index) const {
  return _impl_.in_area_.Get(index);
}
inline int32_t Edge::in_area(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.in_area)
  return _internal_in_area(index);
}
inline void Edge::set_in_area(int index, int32_t value) {
  _impl_.in_area_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_map.Edge.in_area)
}
inline void Edge::_internal_add_in_area(int32_t value) {
  _impl_.in_area_.Add(value);
}
inline void Edge::add_in_area(int32_t value) {
  _internal_add_in_area(value);
  // @@protoc_insertion_point(field_add:agv_map.Edge.in_area)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Edge::_internal_in_area() const {
  return _impl_.in_area_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Edge::in_area() const {
  // @@protoc_insertion_point(field_list:agv_map.Edge.in_area)
  return _internal_in_area();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Edge::_internal_mutable_in_area() {
  return &_impl_.in_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Edge::mutable_in_area() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Edge.in_area)
  return _internal_mutable_in_area();
}

// .agv_map.sceneData agv_param = 3;
inline bool Edge::_internal_has_agv_param() const {
  return this != internal_default_instance() && _impl_.agv_param_ != nullptr;
}
inline bool Edge::has_agv_param() const {
  return _internal_has_agv_param();
}
inline void Edge::clear_agv_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.agv_param_ != nullptr) {
    delete _impl_.agv_param_;
  }
  _impl_.agv_param_ = nullptr;
}
inline const ::agv_map::sceneData& Edge::_internal_agv_param() const {
  const ::agv_map::sceneData* p = _impl_.agv_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Edge::agv_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.agv_param)
  return _internal_agv_param();
}
inline void Edge::unsafe_arena_set_allocated_agv_param(
    ::agv_map::sceneData* agv_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agv_param_);
  }
  _impl_.agv_param_ = agv_param;
  if (agv_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.agv_param)
}
inline ::agv_map::sceneData* Edge::release_agv_param() {
  
  ::agv_map::sceneData* temp = _impl_.agv_param_;
  _impl_.agv_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Edge::unsafe_arena_release_agv_param() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.agv_param)
  
  ::agv_map::sceneData* temp = _impl_.agv_param_;
  _impl_.agv_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Edge::_internal_mutable_agv_param() {
  
  if (_impl_.agv_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.agv_param_ = p;
  }
  return _impl_.agv_param_;
}
inline ::agv_map::sceneData* Edge::mutable_agv_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_agv_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.agv_param)
  return _msg;
}
inline void Edge::set_allocated_agv_param(::agv_map::sceneData* agv_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.agv_param_;
  }
  if (agv_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(agv_param);
    if (message_arena != submessage_arena) {
      agv_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agv_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agv_param_ = agv_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.agv_param)
}

// .agv_map.sceneData avo_param = 4;
inline bool Edge::_internal_has_avo_param() const {
  return this != internal_default_instance() && _impl_.avo_param_ != nullptr;
}
inline bool Edge::has_avo_param() const {
  return _internal_has_avo_param();
}
inline void Edge::clear_avo_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.avo_param_ != nullptr) {
    delete _impl_.avo_param_;
  }
  _impl_.avo_param_ = nullptr;
}
inline const ::agv_map::sceneData& Edge::_internal_avo_param() const {
  const ::agv_map::sceneData* p = _impl_.avo_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Edge::avo_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.avo_param)
  return _internal_avo_param();
}
inline void Edge::unsafe_arena_set_allocated_avo_param(
    ::agv_map::sceneData* avo_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.avo_param_);
  }
  _impl_.avo_param_ = avo_param;
  if (avo_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.avo_param)
}
inline ::agv_map::sceneData* Edge::release_avo_param() {
  
  ::agv_map::sceneData* temp = _impl_.avo_param_;
  _impl_.avo_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Edge::unsafe_arena_release_avo_param() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.avo_param)
  
  ::agv_map::sceneData* temp = _impl_.avo_param_;
  _impl_.avo_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Edge::_internal_mutable_avo_param() {
  
  if (_impl_.avo_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.avo_param_ = p;
  }
  return _impl_.avo_param_;
}
inline ::agv_map::sceneData* Edge::mutable_avo_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_avo_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.avo_param)
  return _msg;
}
inline void Edge::set_allocated_avo_param(::agv_map::sceneData* avo_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.avo_param_;
  }
  if (avo_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(avo_param);
    if (message_arena != submessage_arena) {
      avo_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avo_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.avo_param_ = avo_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.avo_param)
}

// .agv_map.sceneData ctl_param = 5;
inline bool Edge::_internal_has_ctl_param() const {
  return this != internal_default_instance() && _impl_.ctl_param_ != nullptr;
}
inline bool Edge::has_ctl_param() const {
  return _internal_has_ctl_param();
}
inline void Edge::clear_ctl_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.ctl_param_ != nullptr) {
    delete _impl_.ctl_param_;
  }
  _impl_.ctl_param_ = nullptr;
}
inline const ::agv_map::sceneData& Edge::_internal_ctl_param() const {
  const ::agv_map::sceneData* p = _impl_.ctl_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Edge::ctl_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.ctl_param)
  return _internal_ctl_param();
}
inline void Edge::unsafe_arena_set_allocated_ctl_param(
    ::agv_map::sceneData* ctl_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ctl_param_);
  }
  _impl_.ctl_param_ = ctl_param;
  if (ctl_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.ctl_param)
}
inline ::agv_map::sceneData* Edge::release_ctl_param() {
  
  ::agv_map::sceneData* temp = _impl_.ctl_param_;
  _impl_.ctl_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Edge::unsafe_arena_release_ctl_param() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.ctl_param)
  
  ::agv_map::sceneData* temp = _impl_.ctl_param_;
  _impl_.ctl_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Edge::_internal_mutable_ctl_param() {
  
  if (_impl_.ctl_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.ctl_param_ = p;
  }
  return _impl_.ctl_param_;
}
inline ::agv_map::sceneData* Edge::mutable_ctl_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_ctl_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.ctl_param)
  return _msg;
}
inline void Edge::set_allocated_ctl_param(::agv_map::sceneData* ctl_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ctl_param_;
  }
  if (ctl_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ctl_param);
    if (message_arena != submessage_arena) {
      ctl_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctl_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ctl_param_ = ctl_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.ctl_param)
}

// .agv_map.sceneData rut_param = 6;
inline bool Edge::_internal_has_rut_param() const {
  return this != internal_default_instance() && _impl_.rut_param_ != nullptr;
}
inline bool Edge::has_rut_param() const {
  return _internal_has_rut_param();
}
inline void Edge::clear_rut_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.rut_param_ != nullptr) {
    delete _impl_.rut_param_;
  }
  _impl_.rut_param_ = nullptr;
}
inline const ::agv_map::sceneData& Edge::_internal_rut_param() const {
  const ::agv_map::sceneData* p = _impl_.rut_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Edge::rut_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.rut_param)
  return _internal_rut_param();
}
inline void Edge::unsafe_arena_set_allocated_rut_param(
    ::agv_map::sceneData* rut_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rut_param_);
  }
  _impl_.rut_param_ = rut_param;
  if (rut_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.rut_param)
}
inline ::agv_map::sceneData* Edge::release_rut_param() {
  
  ::agv_map::sceneData* temp = _impl_.rut_param_;
  _impl_.rut_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Edge::unsafe_arena_release_rut_param() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.rut_param)
  
  ::agv_map::sceneData* temp = _impl_.rut_param_;
  _impl_.rut_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Edge::_internal_mutable_rut_param() {
  
  if (_impl_.rut_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.rut_param_ = p;
  }
  return _impl_.rut_param_;
}
inline ::agv_map::sceneData* Edge::mutable_rut_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_rut_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.rut_param)
  return _msg;
}
inline void Edge::set_allocated_rut_param(::agv_map::sceneData* rut_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rut_param_;
  }
  if (rut_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rut_param);
    if (message_arena != submessage_arena) {
      rut_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rut_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rut_param_ = rut_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.rut_param)
}

// .agv_map.sceneData act_param = 7;
inline bool Edge::_internal_has_act_param() const {
  return this != internal_default_instance() && _impl_.act_param_ != nullptr;
}
inline bool Edge::has_act_param() const {
  return _internal_has_act_param();
}
inline void Edge::clear_act_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.act_param_ != nullptr) {
    delete _impl_.act_param_;
  }
  _impl_.act_param_ = nullptr;
}
inline const ::agv_map::sceneData& Edge::_internal_act_param() const {
  const ::agv_map::sceneData* p = _impl_.act_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::sceneData&>(
      ::agv_map::_sceneData_default_instance_);
}
inline const ::agv_map::sceneData& Edge::act_param() const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.act_param)
  return _internal_act_param();
}
inline void Edge::unsafe_arena_set_allocated_act_param(
    ::agv_map::sceneData* act_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.act_param_);
  }
  _impl_.act_param_ = act_param;
  if (act_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Edge.act_param)
}
inline ::agv_map::sceneData* Edge::release_act_param() {
  
  ::agv_map::sceneData* temp = _impl_.act_param_;
  _impl_.act_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::sceneData* Edge::unsafe_arena_release_act_param() {
  // @@protoc_insertion_point(field_release:agv_map.Edge.act_param)
  
  ::agv_map::sceneData* temp = _impl_.act_param_;
  _impl_.act_param_ = nullptr;
  return temp;
}
inline ::agv_map::sceneData* Edge::_internal_mutable_act_param() {
  
  if (_impl_.act_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::sceneData>(GetArenaForAllocation());
    _impl_.act_param_ = p;
  }
  return _impl_.act_param_;
}
inline ::agv_map::sceneData* Edge::mutable_act_param() {
  ::agv_map::sceneData* _msg = _internal_mutable_act_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.act_param)
  return _msg;
}
inline void Edge::set_allocated_act_param(::agv_map::sceneData* act_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.act_param_;
  }
  if (act_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(act_param);
    if (message_arena != submessage_arena) {
      act_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, act_param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.act_param_ = act_param;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Edge.act_param)
}

// repeated .agv_map.Coord control_point = 8;
inline int Edge::_internal_control_point_size() const {
  return _impl_.control_point_.size();
}
inline int Edge::control_point_size() const {
  return _internal_control_point_size();
}
inline void Edge::clear_control_point() {
  _impl_.control_point_.Clear();
}
inline ::agv_map::Coord* Edge::mutable_control_point(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.control_point)
  return _impl_.control_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >*
Edge::mutable_control_point() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Edge.control_point)
  return &_impl_.control_point_;
}
inline const ::agv_map::Coord& Edge::_internal_control_point(int index) const {
  return _impl_.control_point_.Get(index);
}
inline const ::agv_map::Coord& Edge::control_point(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.control_point)
  return _internal_control_point(index);
}
inline ::agv_map::Coord* Edge::_internal_add_control_point() {
  return _impl_.control_point_.Add();
}
inline ::agv_map::Coord* Edge::add_control_point() {
  ::agv_map::Coord* _add = _internal_add_control_point();
  // @@protoc_insertion_point(field_add:agv_map.Edge.control_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >&
Edge::control_point() const {
  // @@protoc_insertion_point(field_list:agv_map.Edge.control_point)
  return _impl_.control_point_;
}

// repeated .agv_map.Position curve_point = 9;
inline int Edge::_internal_curve_point_size() const {
  return _impl_.curve_point_.size();
}
inline int Edge::curve_point_size() const {
  return _internal_curve_point_size();
}
inline void Edge::clear_curve_point() {
  _impl_.curve_point_.Clear();
}
inline ::agv_map::Position* Edge::mutable_curve_point(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Edge.curve_point)
  return _impl_.curve_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Position >*
Edge::mutable_curve_point() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Edge.curve_point)
  return &_impl_.curve_point_;
}
inline const ::agv_map::Position& Edge::_internal_curve_point(int index) const {
  return _impl_.curve_point_.Get(index);
}
inline const ::agv_map::Position& Edge::curve_point(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Edge.curve_point)
  return _internal_curve_point(index);
}
inline ::agv_map::Position* Edge::_internal_add_curve_point() {
  return _impl_.curve_point_.Add();
}
inline ::agv_map::Position* Edge::add_curve_point() {
  ::agv_map::Position* _add = _internal_add_curve_point();
  // @@protoc_insertion_point(field_add:agv_map.Edge.curve_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Position >&
Edge::curve_point() const {
  // @@protoc_insertion_point(field_list:agv_map.Edge.curve_point)
  return _impl_.curve_point_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Area_Basic

// int32 id = 1;
inline void Area_Basic::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Area_Basic::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Area_Basic::id() const {
  // @@protoc_insertion_point(field_get:agv_map.Area.Basic.id)
  return _internal_id();
}
inline void Area_Basic::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Area_Basic::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Area.Basic.id)
}

// string type = 2;
inline void Area_Basic::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Area_Basic::type() const {
  // @@protoc_insertion_point(field_get:agv_map.Area.Basic.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Area_Basic::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Area.Basic.type)
}
inline std::string* Area_Basic::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:agv_map.Area.Basic.type)
  return _s;
}
inline const std::string& Area_Basic::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Area_Basic::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Area_Basic::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Area_Basic::release_type() {
  // @@protoc_insertion_point(field_release:agv_map.Area.Basic.type)
  return _impl_.type_.Release();
}
inline void Area_Basic::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Area.Basic.type)
}

// string name = 3;
inline void Area_Basic::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Area_Basic::name() const {
  // @@protoc_insertion_point(field_get:agv_map.Area.Basic.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Area_Basic::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Area.Basic.name)
}
inline std::string* Area_Basic::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:agv_map.Area.Basic.name)
  return _s;
}
inline const std::string& Area_Basic::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Area_Basic::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Area_Basic::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Area_Basic::release_name() {
  // @@protoc_insertion_point(field_release:agv_map.Area.Basic.name)
  return _impl_.name_.Release();
}
inline void Area_Basic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Area.Basic.name)
}

// -------------------------------------------------------------------

// Area

// .agv_map.Area.Basic basic = 1;
inline bool Area::_internal_has_basic() const {
  return this != internal_default_instance() && _impl_.basic_ != nullptr;
}
inline bool Area::has_basic() const {
  return _internal_has_basic();
}
inline void Area::clear_basic() {
  if (GetArenaForAllocation() == nullptr && _impl_.basic_ != nullptr) {
    delete _impl_.basic_;
  }
  _impl_.basic_ = nullptr;
}
inline const ::agv_map::Area_Basic& Area::_internal_basic() const {
  const ::agv_map::Area_Basic* p = _impl_.basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Area_Basic&>(
      ::agv_map::_Area_Basic_default_instance_);
}
inline const ::agv_map::Area_Basic& Area::basic() const {
  // @@protoc_insertion_point(field_get:agv_map.Area.basic)
  return _internal_basic();
}
inline void Area::unsafe_arena_set_allocated_basic(
    ::agv_map::Area_Basic* basic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basic_);
  }
  _impl_.basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Area.basic)
}
inline ::agv_map::Area_Basic* Area::release_basic() {
  
  ::agv_map::Area_Basic* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Area_Basic* Area::unsafe_arena_release_basic() {
  // @@protoc_insertion_point(field_release:agv_map.Area.basic)
  
  ::agv_map::Area_Basic* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
  return temp;
}
inline ::agv_map::Area_Basic* Area::_internal_mutable_basic() {
  
  if (_impl_.basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Area_Basic>(GetArenaForAllocation());
    _impl_.basic_ = p;
  }
  return _impl_.basic_;
}
inline ::agv_map::Area_Basic* Area::mutable_basic() {
  ::agv_map::Area_Basic* _msg = _internal_mutable_basic();
  // @@protoc_insertion_point(field_mutable:agv_map.Area.basic)
  return _msg;
}
inline void Area::set_allocated_basic(::agv_map::Area_Basic* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basic);
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Area.basic)
}

// map<string, string> param = 2;
inline int Area::_internal_param_size() const {
  return _impl_.param_.size();
}
inline int Area::param_size() const {
  return _internal_param_size();
}
inline void Area::clear_param() {
  _impl_.param_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Area::_internal_param() const {
  return _impl_.param_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Area::param() const {
  // @@protoc_insertion_point(field_map:agv_map.Area.param)
  return _internal_param();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Area::_internal_mutable_param() {
  return _impl_.param_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Area::mutable_param() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Area.param)
  return _internal_mutable_param();
}

// repeated .agv_map.Coord vertex_list = 3;
inline int Area::_internal_vertex_list_size() const {
  return _impl_.vertex_list_.size();
}
inline int Area::vertex_list_size() const {
  return _internal_vertex_list_size();
}
inline void Area::clear_vertex_list() {
  _impl_.vertex_list_.Clear();
}
inline ::agv_map::Coord* Area::mutable_vertex_list(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Area.vertex_list)
  return _impl_.vertex_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >*
Area::mutable_vertex_list() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Area.vertex_list)
  return &_impl_.vertex_list_;
}
inline const ::agv_map::Coord& Area::_internal_vertex_list(int index) const {
  return _impl_.vertex_list_.Get(index);
}
inline const ::agv_map::Coord& Area::vertex_list(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Area.vertex_list)
  return _internal_vertex_list(index);
}
inline ::agv_map::Coord* Area::_internal_add_vertex_list() {
  return _impl_.vertex_list_.Add();
}
inline ::agv_map::Coord* Area::add_vertex_list() {
  ::agv_map::Coord* _add = _internal_add_vertex_list();
  // @@protoc_insertion_point(field_add:agv_map.Area.vertex_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >&
Area::vertex_list() const {
  // @@protoc_insertion_point(field_list:agv_map.Area.vertex_list)
  return _impl_.vertex_list_;
}

// repeated int32 node_in = 4;
inline int Area::_internal_node_in_size() const {
  return _impl_.node_in_.size();
}
inline int Area::node_in_size() const {
  return _internal_node_in_size();
}
inline void Area::clear_node_in() {
  _impl_.node_in_.Clear();
}
inline int32_t Area::_internal_node_in(int index) const {
  return _impl_.node_in_.Get(index);
}
inline int32_t Area::node_in(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Area.node_in)
  return _internal_node_in(index);
}
inline void Area::set_node_in(int index, int32_t value) {
  _impl_.node_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_map.Area.node_in)
}
inline void Area::_internal_add_node_in(int32_t value) {
  _impl_.node_in_.Add(value);
}
inline void Area::add_node_in(int32_t value) {
  _internal_add_node_in(value);
  // @@protoc_insertion_point(field_add:agv_map.Area.node_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Area::_internal_node_in() const {
  return _impl_.node_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Area::node_in() const {
  // @@protoc_insertion_point(field_list:agv_map.Area.node_in)
  return _internal_node_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Area::_internal_mutable_node_in() {
  return &_impl_.node_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Area::mutable_node_in() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Area.node_in)
  return _internal_mutable_node_in();
}

// map<string, string> agv_num = 5;
inline int Area::_internal_agv_num_size() const {
  return _impl_.agv_num_.size();
}
inline int Area::agv_num_size() const {
  return _internal_agv_num_size();
}
inline void Area::clear_agv_num() {
  _impl_.agv_num_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Area::_internal_agv_num() const {
  return _impl_.agv_num_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Area::agv_num() const {
  // @@protoc_insertion_point(field_map:agv_map.Area.agv_num)
  return _internal_agv_num();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Area::_internal_mutable_agv_num() {
  return _impl_.agv_num_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Area::mutable_agv_num() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Area.agv_num)
  return _internal_mutable_agv_num();
}

// repeated int32 relate_area = 6;
inline int Area::_internal_relate_area_size() const {
  return _impl_.relate_area_.size();
}
inline int Area::relate_area_size() const {
  return _internal_relate_area_size();
}
inline void Area::clear_relate_area() {
  _impl_.relate_area_.Clear();
}
inline int32_t Area::_internal_relate_area(int index) const {
  return _impl_.relate_area_.Get(index);
}
inline int32_t Area::relate_area(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Area.relate_area)
  return _internal_relate_area(index);
}
inline void Area::set_relate_area(int index, int32_t value) {
  _impl_.relate_area_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_map.Area.relate_area)
}
inline void Area::_internal_add_relate_area(int32_t value) {
  _impl_.relate_area_.Add(value);
}
inline void Area::add_relate_area(int32_t value) {
  _internal_add_relate_area(value);
  // @@protoc_insertion_point(field_add:agv_map.Area.relate_area)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Area::_internal_relate_area() const {
  return _impl_.relate_area_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Area::relate_area() const {
  // @@protoc_insertion_point(field_list:agv_map.Area.relate_area)
  return _internal_relate_area();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Area::_internal_mutable_relate_area() {
  return &_impl_.relate_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Area::mutable_relate_area() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Area.relate_area)
  return _internal_mutable_relate_area();
}

// -------------------------------------------------------------------

// Coord

// sint32 x = 1;
inline void Coord::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Coord::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Coord::x() const {
  // @@protoc_insertion_point(field_get:agv_map.Coord.x)
  return _internal_x();
}
inline void Coord::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Coord::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:agv_map.Coord.x)
}

// sint32 y = 2;
inline void Coord::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Coord::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Coord::y() const {
  // @@protoc_insertion_point(field_get:agv_map.Coord.y)
  return _internal_y();
}
inline void Coord::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Coord::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:agv_map.Coord.y)
}

// -------------------------------------------------------------------

// Position

// sint32 x = 1;
inline void Position::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Position::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Position::x() const {
  // @@protoc_insertion_point(field_get:agv_map.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Position::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:agv_map.Position.x)
}

// sint32 y = 2;
inline void Position::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Position::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Position::y() const {
  // @@protoc_insertion_point(field_get:agv_map.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Position::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:agv_map.Position.y)
}

// float angle = 3;
inline void Position::clear_angle() {
  _impl_.angle_ = 0;
}
inline float Position::_internal_angle() const {
  return _impl_.angle_;
}
inline float Position::angle() const {
  // @@protoc_insertion_point(field_get:agv_map.Position.angle)
  return _internal_angle();
}
inline void Position::_internal_set_angle(float value) {
  
  _impl_.angle_ = value;
}
inline void Position::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:agv_map.Position.angle)
}

// -------------------------------------------------------------------

// Segment

// int32 id = 1;
inline void Segment::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Segment::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Segment::id() const {
  // @@protoc_insertion_point(field_get:agv_map.Segment.id)
  return _internal_id();
}
inline void Segment::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Segment::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Segment.id)
}

// int32 type = 2;
inline void Segment::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Segment::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Segment::type() const {
  // @@protoc_insertion_point(field_get:agv_map.Segment.type)
  return _internal_type();
}
inline void Segment::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Segment::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_map.Segment.type)
}

// sint32 dir_mode = 3;
inline void Segment::clear_dir_mode() {
  _impl_.dir_mode_ = 0;
}
inline int32_t Segment::_internal_dir_mode() const {
  return _impl_.dir_mode_;
}
inline int32_t Segment::dir_mode() const {
  // @@protoc_insertion_point(field_get:agv_map.Segment.dir_mode)
  return _internal_dir_mode();
}
inline void Segment::_internal_set_dir_mode(int32_t value) {
  
  _impl_.dir_mode_ = value;
}
inline void Segment::set_dir_mode(int32_t value) {
  _internal_set_dir_mode(value);
  // @@protoc_insertion_point(field_set:agv_map.Segment.dir_mode)
}

// int32 lock = 4;
inline void Segment::clear_lock() {
  _impl_.lock_ = 0;
}
inline int32_t Segment::_internal_lock() const {
  return _impl_.lock_;
}
inline int32_t Segment::lock() const {
  // @@protoc_insertion_point(field_get:agv_map.Segment.lock)
  return _internal_lock();
}
inline void Segment::_internal_set_lock(int32_t value) {
  
  _impl_.lock_ = value;
}
inline void Segment::set_lock(int32_t value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:agv_map.Segment.lock)
}

// .agv_map.Edge edge_1 = 5;
inline bool Segment::_internal_has_edge_1() const {
  return this != internal_default_instance() && _impl_.edge_1_ != nullptr;
}
inline bool Segment::has_edge_1() const {
  return _internal_has_edge_1();
}
inline void Segment::clear_edge_1() {
  if (GetArenaForAllocation() == nullptr && _impl_.edge_1_ != nullptr) {
    delete _impl_.edge_1_;
  }
  _impl_.edge_1_ = nullptr;
}
inline const ::agv_map::Edge& Segment::_internal_edge_1() const {
  const ::agv_map::Edge* p = _impl_.edge_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Edge&>(
      ::agv_map::_Edge_default_instance_);
}
inline const ::agv_map::Edge& Segment::edge_1() const {
  // @@protoc_insertion_point(field_get:agv_map.Segment.edge_1)
  return _internal_edge_1();
}
inline void Segment::unsafe_arena_set_allocated_edge_1(
    ::agv_map::Edge* edge_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edge_1_);
  }
  _impl_.edge_1_ = edge_1;
  if (edge_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Segment.edge_1)
}
inline ::agv_map::Edge* Segment::release_edge_1() {
  
  ::agv_map::Edge* temp = _impl_.edge_1_;
  _impl_.edge_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Edge* Segment::unsafe_arena_release_edge_1() {
  // @@protoc_insertion_point(field_release:agv_map.Segment.edge_1)
  
  ::agv_map::Edge* temp = _impl_.edge_1_;
  _impl_.edge_1_ = nullptr;
  return temp;
}
inline ::agv_map::Edge* Segment::_internal_mutable_edge_1() {
  
  if (_impl_.edge_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Edge>(GetArenaForAllocation());
    _impl_.edge_1_ = p;
  }
  return _impl_.edge_1_;
}
inline ::agv_map::Edge* Segment::mutable_edge_1() {
  ::agv_map::Edge* _msg = _internal_mutable_edge_1();
  // @@protoc_insertion_point(field_mutable:agv_map.Segment.edge_1)
  return _msg;
}
inline void Segment::set_allocated_edge_1(::agv_map::Edge* edge_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edge_1_;
  }
  if (edge_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edge_1);
    if (message_arena != submessage_arena) {
      edge_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.edge_1_ = edge_1;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Segment.edge_1)
}

// .agv_map.Edge edge_2 = 6;
inline bool Segment::_internal_has_edge_2() const {
  return this != internal_default_instance() && _impl_.edge_2_ != nullptr;
}
inline bool Segment::has_edge_2() const {
  return _internal_has_edge_2();
}
inline void Segment::clear_edge_2() {
  if (GetArenaForAllocation() == nullptr && _impl_.edge_2_ != nullptr) {
    delete _impl_.edge_2_;
  }
  _impl_.edge_2_ = nullptr;
}
inline const ::agv_map::Edge& Segment::_internal_edge_2() const {
  const ::agv_map::Edge* p = _impl_.edge_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Edge&>(
      ::agv_map::_Edge_default_instance_);
}
inline const ::agv_map::Edge& Segment::edge_2() const {
  // @@protoc_insertion_point(field_get:agv_map.Segment.edge_2)
  return _internal_edge_2();
}
inline void Segment::unsafe_arena_set_allocated_edge_2(
    ::agv_map::Edge* edge_2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edge_2_);
  }
  _impl_.edge_2_ = edge_2;
  if (edge_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Segment.edge_2)
}
inline ::agv_map::Edge* Segment::release_edge_2() {
  
  ::agv_map::Edge* temp = _impl_.edge_2_;
  _impl_.edge_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Edge* Segment::unsafe_arena_release_edge_2() {
  // @@protoc_insertion_point(field_release:agv_map.Segment.edge_2)
  
  ::agv_map::Edge* temp = _impl_.edge_2_;
  _impl_.edge_2_ = nullptr;
  return temp;
}
inline ::agv_map::Edge* Segment::_internal_mutable_edge_2() {
  
  if (_impl_.edge_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Edge>(GetArenaForAllocation());
    _impl_.edge_2_ = p;
  }
  return _impl_.edge_2_;
}
inline ::agv_map::Edge* Segment::mutable_edge_2() {
  ::agv_map::Edge* _msg = _internal_mutable_edge_2();
  // @@protoc_insertion_point(field_mutable:agv_map.Segment.edge_2)
  return _msg;
}
inline void Segment::set_allocated_edge_2(::agv_map::Edge* edge_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edge_2_;
  }
  if (edge_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edge_2);
    if (message_arena != submessage_arena) {
      edge_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.edge_2_ = edge_2;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Segment.edge_2)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Describe_ParamTmpl_paramTmplInstance

// string describe = 1;
inline void Describe_ParamTmpl_paramTmplInstance::clear_describe() {
  _impl_.describe_.ClearToEmpty();
}
inline const std::string& Describe_ParamTmpl_paramTmplInstance::describe() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.ParamTmpl.paramTmplInstance.describe)
  return _internal_describe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_ParamTmpl_paramTmplInstance::set_describe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.describe_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.ParamTmpl.paramTmplInstance.describe)
}
inline std::string* Describe_ParamTmpl_paramTmplInstance::mutable_describe() {
  std::string* _s = _internal_mutable_describe();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.ParamTmpl.paramTmplInstance.describe)
  return _s;
}
inline const std::string& Describe_ParamTmpl_paramTmplInstance::_internal_describe() const {
  return _impl_.describe_.Get();
}
inline void Describe_ParamTmpl_paramTmplInstance::_internal_set_describe(const std::string& value) {
  
  _impl_.describe_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_ParamTmpl_paramTmplInstance::_internal_mutable_describe() {
  
  return _impl_.describe_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_ParamTmpl_paramTmplInstance::release_describe() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.ParamTmpl.paramTmplInstance.describe)
  return _impl_.describe_.Release();
}
inline void Describe_ParamTmpl_paramTmplInstance::set_allocated_describe(std::string* describe) {
  if (describe != nullptr) {
    
  } else {
    
  }
  _impl_.describe_.SetAllocated(describe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.describe_.IsDefault()) {
    _impl_.describe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.ParamTmpl.paramTmplInstance.describe)
}

// string key = 2;
inline void Describe_ParamTmpl_paramTmplInstance::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Describe_ParamTmpl_paramTmplInstance::key() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.ParamTmpl.paramTmplInstance.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_ParamTmpl_paramTmplInstance::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.ParamTmpl.paramTmplInstance.key)
}
inline std::string* Describe_ParamTmpl_paramTmplInstance::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.ParamTmpl.paramTmplInstance.key)
  return _s;
}
inline const std::string& Describe_ParamTmpl_paramTmplInstance::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Describe_ParamTmpl_paramTmplInstance::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_ParamTmpl_paramTmplInstance::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_ParamTmpl_paramTmplInstance::release_key() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.ParamTmpl.paramTmplInstance.key)
  return _impl_.key_.Release();
}
inline void Describe_ParamTmpl_paramTmplInstance::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.ParamTmpl.paramTmplInstance.key)
}

// map<string, string> param = 3;
inline int Describe_ParamTmpl_paramTmplInstance::_internal_param_size() const {
  return _impl_.param_.size();
}
inline int Describe_ParamTmpl_paramTmplInstance::param_size() const {
  return _internal_param_size();
}
inline void Describe_ParamTmpl_paramTmplInstance::clear_param() {
  _impl_.param_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe_ParamTmpl_paramTmplInstance::_internal_param() const {
  return _impl_.param_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe_ParamTmpl_paramTmplInstance::param() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.ParamTmpl.paramTmplInstance.param)
  return _internal_param();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe_ParamTmpl_paramTmplInstance::_internal_mutable_param() {
  return _impl_.param_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe_ParamTmpl_paramTmplInstance::mutable_param() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.ParamTmpl.paramTmplInstance.param)
  return _internal_mutable_param();
}

// -------------------------------------------------------------------

// Describe_ParamTmpl

// string desc = 1;
inline void Describe_ParamTmpl::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& Describe_ParamTmpl::desc() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.ParamTmpl.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_ParamTmpl::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.ParamTmpl.desc)
}
inline std::string* Describe_ParamTmpl::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.ParamTmpl.desc)
  return _s;
}
inline const std::string& Describe_ParamTmpl::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void Describe_ParamTmpl::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_ParamTmpl::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_ParamTmpl::release_desc() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.ParamTmpl.desc)
  return _impl_.desc_.Release();
}
inline void Describe_ParamTmpl::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.ParamTmpl.desc)
}

// map<string, string> data = 2;
inline int Describe_ParamTmpl::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Describe_ParamTmpl::data_size() const {
  return _internal_data_size();
}
inline void Describe_ParamTmpl::clear_data() {
  _impl_.data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe_ParamTmpl::_internal_data() const {
  return _impl_.data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe_ParamTmpl::data() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.ParamTmpl.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe_ParamTmpl::_internal_mutable_data() {
  return _impl_.data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe_ParamTmpl::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.ParamTmpl.data)
  return _internal_mutable_data();
}

// map<string, .agv_map.Describe.ParamTmpl.paramTmplInstance> param_instance_list = 3;
inline int Describe_ParamTmpl::_internal_param_instance_list_size() const {
  return _impl_.param_instance_list_.size();
}
inline int Describe_ParamTmpl::param_instance_list_size() const {
  return _internal_param_instance_list_size();
}
inline void Describe_ParamTmpl::clear_param_instance_list() {
  _impl_.param_instance_list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >&
Describe_ParamTmpl::_internal_param_instance_list() const {
  return _impl_.param_instance_list_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >&
Describe_ParamTmpl::param_instance_list() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.ParamTmpl.param_instance_list)
  return _internal_param_instance_list();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >*
Describe_ParamTmpl::_internal_mutable_param_instance_list() {
  return _impl_.param_instance_list_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl_paramTmplInstance >*
Describe_ParamTmpl::mutable_param_instance_list() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.ParamTmpl.param_instance_list)
  return _internal_mutable_param_instance_list();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Describe_actionTmpl_action

// string name = 1;
inline void Describe_actionTmpl_action::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Describe_actionTmpl_action::name() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.actionTmpl.action.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_actionTmpl_action::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.actionTmpl.action.name)
}
inline std::string* Describe_actionTmpl_action::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.actionTmpl.action.name)
  return _s;
}
inline const std::string& Describe_actionTmpl_action::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Describe_actionTmpl_action::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl_action::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl_action::release_name() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.actionTmpl.action.name)
  return _impl_.name_.Release();
}
inline void Describe_actionTmpl_action::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.actionTmpl.action.name)
}

// string block_type = 2;
inline void Describe_actionTmpl_action::clear_block_type() {
  _impl_.block_type_.ClearToEmpty();
}
inline const std::string& Describe_actionTmpl_action::block_type() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.actionTmpl.action.block_type)
  return _internal_block_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_actionTmpl_action::set_block_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.actionTmpl.action.block_type)
}
inline std::string* Describe_actionTmpl_action::mutable_block_type() {
  std::string* _s = _internal_mutable_block_type();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.actionTmpl.action.block_type)
  return _s;
}
inline const std::string& Describe_actionTmpl_action::_internal_block_type() const {
  return _impl_.block_type_.Get();
}
inline void Describe_actionTmpl_action::_internal_set_block_type(const std::string& value) {
  
  _impl_.block_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl_action::_internal_mutable_block_type() {
  
  return _impl_.block_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl_action::release_block_type() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.actionTmpl.action.block_type)
  return _impl_.block_type_.Release();
}
inline void Describe_actionTmpl_action::set_allocated_block_type(std::string* block_type) {
  if (block_type != nullptr) {
    
  } else {
    
  }
  _impl_.block_type_.SetAllocated(block_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_type_.IsDefault()) {
    _impl_.block_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.actionTmpl.action.block_type)
}

// string param = 3;
inline void Describe_actionTmpl_action::clear_param() {
  _impl_.param_.ClearToEmpty();
}
inline const std::string& Describe_actionTmpl_action::param() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.actionTmpl.action.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_actionTmpl_action::set_param(ArgT0&& arg0, ArgT... args) {
 
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.actionTmpl.action.param)
}
inline std::string* Describe_actionTmpl_action::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.actionTmpl.action.param)
  return _s;
}
inline const std::string& Describe_actionTmpl_action::_internal_param() const {
  return _impl_.param_.Get();
}
inline void Describe_actionTmpl_action::_internal_set_param(const std::string& value) {
  
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl_action::_internal_mutable_param() {
  
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl_action::release_param() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.actionTmpl.action.param)
  return _impl_.param_.Release();
}
inline void Describe_actionTmpl_action::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.actionTmpl.action.param)
}

// -------------------------------------------------------------------

// Describe_actionTmpl_actTmplInstance

// string describe = 1;
inline void Describe_actionTmpl_actTmplInstance::clear_describe() {
  _impl_.describe_.ClearToEmpty();
}
inline const std::string& Describe_actionTmpl_actTmplInstance::describe() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.actionTmpl.actTmplInstance.describe)
  return _internal_describe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_actionTmpl_actTmplInstance::set_describe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.describe_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.actionTmpl.actTmplInstance.describe)
}
inline std::string* Describe_actionTmpl_actTmplInstance::mutable_describe() {
  std::string* _s = _internal_mutable_describe();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.actionTmpl.actTmplInstance.describe)
  return _s;
}
inline const std::string& Describe_actionTmpl_actTmplInstance::_internal_describe() const {
  return _impl_.describe_.Get();
}
inline void Describe_actionTmpl_actTmplInstance::_internal_set_describe(const std::string& value) {
  
  _impl_.describe_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl_actTmplInstance::_internal_mutable_describe() {
  
  return _impl_.describe_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl_actTmplInstance::release_describe() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.actionTmpl.actTmplInstance.describe)
  return _impl_.describe_.Release();
}
inline void Describe_actionTmpl_actTmplInstance::set_allocated_describe(std::string* describe) {
  if (describe != nullptr) {
    
  } else {
    
  }
  _impl_.describe_.SetAllocated(describe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.describe_.IsDefault()) {
    _impl_.describe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.actionTmpl.actTmplInstance.describe)
}

// repeated .agv_map.Describe.actionTmpl.action act_list = 2;
inline int Describe_actionTmpl_actTmplInstance::_internal_act_list_size() const {
  return _impl_.act_list_.size();
}
inline int Describe_actionTmpl_actTmplInstance::act_list_size() const {
  return _internal_act_list_size();
}
inline void Describe_actionTmpl_actTmplInstance::clear_act_list() {
  _impl_.act_list_.Clear();
}
inline ::agv_map::Describe_actionTmpl_action* Describe_actionTmpl_actTmplInstance::mutable_act_list(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.actionTmpl.actTmplInstance.act_list)
  return _impl_.act_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action >*
Describe_actionTmpl_actTmplInstance::mutable_act_list() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Describe.actionTmpl.actTmplInstance.act_list)
  return &_impl_.act_list_;
}
inline const ::agv_map::Describe_actionTmpl_action& Describe_actionTmpl_actTmplInstance::_internal_act_list(int index) const {
  return _impl_.act_list_.Get(index);
}
inline const ::agv_map::Describe_actionTmpl_action& Describe_actionTmpl_actTmplInstance::act_list(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.actionTmpl.actTmplInstance.act_list)
  return _internal_act_list(index);
}
inline ::agv_map::Describe_actionTmpl_action* Describe_actionTmpl_actTmplInstance::_internal_add_act_list() {
  return _impl_.act_list_.Add();
}
inline ::agv_map::Describe_actionTmpl_action* Describe_actionTmpl_actTmplInstance::add_act_list() {
  ::agv_map::Describe_actionTmpl_action* _add = _internal_add_act_list();
  // @@protoc_insertion_point(field_add:agv_map.Describe.actionTmpl.actTmplInstance.act_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action >&
Describe_actionTmpl_actTmplInstance::act_list() const {
  // @@protoc_insertion_point(field_list:agv_map.Describe.actionTmpl.actTmplInstance.act_list)
  return _impl_.act_list_;
}

// -------------------------------------------------------------------

// Describe_actionTmpl

// string descibe = 1;
inline void Describe_actionTmpl::clear_descibe() {
  _impl_.descibe_.ClearToEmpty();
}
inline const std::string& Describe_actionTmpl::descibe() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.actionTmpl.descibe)
  return _internal_descibe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_actionTmpl::set_descibe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.descibe_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.actionTmpl.descibe)
}
inline std::string* Describe_actionTmpl::mutable_descibe() {
  std::string* _s = _internal_mutable_descibe();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.actionTmpl.descibe)
  return _s;
}
inline const std::string& Describe_actionTmpl::_internal_descibe() const {
  return _impl_.descibe_.Get();
}
inline void Describe_actionTmpl::_internal_set_descibe(const std::string& value) {
  
  _impl_.descibe_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl::_internal_mutable_descibe() {
  
  return _impl_.descibe_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_actionTmpl::release_descibe() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.actionTmpl.descibe)
  return _impl_.descibe_.Release();
}
inline void Describe_actionTmpl::set_allocated_descibe(std::string* descibe) {
  if (descibe != nullptr) {
    
  } else {
    
  }
  _impl_.descibe_.SetAllocated(descibe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.descibe_.IsDefault()) {
    _impl_.descibe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.actionTmpl.descibe)
}

// repeated .agv_map.Describe.actionTmpl.action data = 2;
inline int Describe_actionTmpl::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Describe_actionTmpl::data_size() const {
  return _internal_data_size();
}
inline void Describe_actionTmpl::clear_data() {
  _impl_.data_.Clear();
}
inline ::agv_map::Describe_actionTmpl_action* Describe_actionTmpl::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.actionTmpl.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action >*
Describe_actionTmpl::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Describe.actionTmpl.data)
  return &_impl_.data_;
}
inline const ::agv_map::Describe_actionTmpl_action& Describe_actionTmpl::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::agv_map::Describe_actionTmpl_action& Describe_actionTmpl::data(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.actionTmpl.data)
  return _internal_data(index);
}
inline ::agv_map::Describe_actionTmpl_action* Describe_actionTmpl::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::agv_map::Describe_actionTmpl_action* Describe_actionTmpl::add_data() {
  ::agv_map::Describe_actionTmpl_action* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:agv_map.Describe.actionTmpl.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_actionTmpl_action >&
Describe_actionTmpl::data() const {
  // @@protoc_insertion_point(field_list:agv_map.Describe.actionTmpl.data)
  return _impl_.data_;
}

// map<string, .agv_map.Describe.actionTmpl.actTmplInstance> act_instance_list = 3;
inline int Describe_actionTmpl::_internal_act_instance_list_size() const {
  return _impl_.act_instance_list_.size();
}
inline int Describe_actionTmpl::act_instance_list_size() const {
  return _internal_act_instance_list_size();
}
inline void Describe_actionTmpl::clear_act_instance_list() {
  _impl_.act_instance_list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >&
Describe_actionTmpl::_internal_act_instance_list() const {
  return _impl_.act_instance_list_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >&
Describe_actionTmpl::act_instance_list() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.actionTmpl.act_instance_list)
  return _internal_act_instance_list();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >*
Describe_actionTmpl::_internal_mutable_act_instance_list() {
  return _impl_.act_instance_list_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl_actTmplInstance >*
Describe_actionTmpl::mutable_act_instance_list() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.actionTmpl.act_instance_list)
  return _internal_mutable_act_instance_list();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Describe_taskActionTmpl_action

// string action_type = 1;
inline void Describe_taskActionTmpl_action::clear_action_type() {
  _impl_.action_type_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl_action::action_type() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.action.action_type)
  return _internal_action_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl_action::set_action_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.action.action_type)
}
inline std::string* Describe_taskActionTmpl_action::mutable_action_type() {
  std::string* _s = _internal_mutable_action_type();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.action.action_type)
  return _s;
}
inline const std::string& Describe_taskActionTmpl_action::_internal_action_type() const {
  return _impl_.action_type_.Get();
}
inline void Describe_taskActionTmpl_action::_internal_set_action_type(const std::string& value) {
  
  _impl_.action_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_action::_internal_mutable_action_type() {
  
  return _impl_.action_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_action::release_action_type() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.action.action_type)
  return _impl_.action_type_.Release();
}
inline void Describe_taskActionTmpl_action::set_allocated_action_type(std::string* action_type) {
  if (action_type != nullptr) {
    
  } else {
    
  }
  _impl_.action_type_.SetAllocated(action_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_type_.IsDefault()) {
    _impl_.action_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.action.action_type)
}

// string action_name = 2;
inline void Describe_taskActionTmpl_action::clear_action_name() {
  _impl_.action_name_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl_action::action_name() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.action.action_name)
  return _internal_action_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl_action::set_action_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.action.action_name)
}
inline std::string* Describe_taskActionTmpl_action::mutable_action_name() {
  std::string* _s = _internal_mutable_action_name();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.action.action_name)
  return _s;
}
inline const std::string& Describe_taskActionTmpl_action::_internal_action_name() const {
  return _impl_.action_name_.Get();
}
inline void Describe_taskActionTmpl_action::_internal_set_action_name(const std::string& value) {
  
  _impl_.action_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_action::_internal_mutable_action_name() {
  
  return _impl_.action_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_action::release_action_name() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.action.action_name)
  return _impl_.action_name_.Release();
}
inline void Describe_taskActionTmpl_action::set_allocated_action_name(std::string* action_name) {
  if (action_name != nullptr) {
    
  } else {
    
  }
  _impl_.action_name_.SetAllocated(action_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_name_.IsDefault()) {
    _impl_.action_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.action.action_name)
}

// string block_type = 3;
inline void Describe_taskActionTmpl_action::clear_block_type() {
  _impl_.block_type_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl_action::block_type() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.action.block_type)
  return _internal_block_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl_action::set_block_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.action.block_type)
}
inline std::string* Describe_taskActionTmpl_action::mutable_block_type() {
  std::string* _s = _internal_mutable_block_type();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.action.block_type)
  return _s;
}
inline const std::string& Describe_taskActionTmpl_action::_internal_block_type() const {
  return _impl_.block_type_.Get();
}
inline void Describe_taskActionTmpl_action::_internal_set_block_type(const std::string& value) {
  
  _impl_.block_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_action::_internal_mutable_block_type() {
  
  return _impl_.block_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_action::release_block_type() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.action.block_type)
  return _impl_.block_type_.Release();
}
inline void Describe_taskActionTmpl_action::set_allocated_block_type(std::string* block_type) {
  if (block_type != nullptr) {
    
  } else {
    
  }
  _impl_.block_type_.SetAllocated(block_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_type_.IsDefault()) {
    _impl_.block_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.action.block_type)
}

// string param = 4;
inline void Describe_taskActionTmpl_action::clear_param() {
  _impl_.param_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl_action::param() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.action.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl_action::set_param(ArgT0&& arg0, ArgT... args) {
 
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.action.param)
}
inline std::string* Describe_taskActionTmpl_action::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.action.param)
  return _s;
}
inline const std::string& Describe_taskActionTmpl_action::_internal_param() const {
  return _impl_.param_.Get();
}
inline void Describe_taskActionTmpl_action::_internal_set_param(const std::string& value) {
  
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_action::_internal_mutable_param() {
  
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_action::release_param() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.action.param)
  return _impl_.param_.Release();
}
inline void Describe_taskActionTmpl_action::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.action.param)
}

// -------------------------------------------------------------------

// Describe_taskActionTmpl_actTmplInstance

// string describe = 1;
inline void Describe_taskActionTmpl_actTmplInstance::clear_describe() {
  _impl_.describe_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl_actTmplInstance::describe() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.actTmplInstance.describe)
  return _internal_describe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl_actTmplInstance::set_describe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.describe_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.actTmplInstance.describe)
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::mutable_describe() {
  std::string* _s = _internal_mutable_describe();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.actTmplInstance.describe)
  return _s;
}
inline const std::string& Describe_taskActionTmpl_actTmplInstance::_internal_describe() const {
  return _impl_.describe_.Get();
}
inline void Describe_taskActionTmpl_actTmplInstance::_internal_set_describe(const std::string& value) {
  
  _impl_.describe_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::_internal_mutable_describe() {
  
  return _impl_.describe_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::release_describe() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.actTmplInstance.describe)
  return _impl_.describe_.Release();
}
inline void Describe_taskActionTmpl_actTmplInstance::set_allocated_describe(std::string* describe) {
  if (describe != nullptr) {
    
  } else {
    
  }
  _impl_.describe_.SetAllocated(describe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.describe_.IsDefault()) {
    _impl_.describe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.actTmplInstance.describe)
}

// string stype_value = 2;
inline void Describe_taskActionTmpl_actTmplInstance::clear_stype_value() {
  _impl_.stype_value_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl_actTmplInstance::stype_value() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.actTmplInstance.stype_value)
  return _internal_stype_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl_actTmplInstance::set_stype_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stype_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.actTmplInstance.stype_value)
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::mutable_stype_value() {
  std::string* _s = _internal_mutable_stype_value();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.actTmplInstance.stype_value)
  return _s;
}
inline const std::string& Describe_taskActionTmpl_actTmplInstance::_internal_stype_value() const {
  return _impl_.stype_value_.Get();
}
inline void Describe_taskActionTmpl_actTmplInstance::_internal_set_stype_value(const std::string& value) {
  
  _impl_.stype_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::_internal_mutable_stype_value() {
  
  return _impl_.stype_value_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::release_stype_value() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.actTmplInstance.stype_value)
  return _impl_.stype_value_.Release();
}
inline void Describe_taskActionTmpl_actTmplInstance::set_allocated_stype_value(std::string* stype_value) {
  if (stype_value != nullptr) {
    
  } else {
    
  }
  _impl_.stype_value_.SetAllocated(stype_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stype_value_.IsDefault()) {
    _impl_.stype_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.actTmplInstance.stype_value)
}

// string gtype_value = 3;
inline void Describe_taskActionTmpl_actTmplInstance::clear_gtype_value() {
  _impl_.gtype_value_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl_actTmplInstance::gtype_value() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.actTmplInstance.gtype_value)
  return _internal_gtype_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl_actTmplInstance::set_gtype_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gtype_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.actTmplInstance.gtype_value)
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::mutable_gtype_value() {
  std::string* _s = _internal_mutable_gtype_value();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.actTmplInstance.gtype_value)
  return _s;
}
inline const std::string& Describe_taskActionTmpl_actTmplInstance::_internal_gtype_value() const {
  return _impl_.gtype_value_.Get();
}
inline void Describe_taskActionTmpl_actTmplInstance::_internal_set_gtype_value(const std::string& value) {
  
  _impl_.gtype_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::_internal_mutable_gtype_value() {
  
  return _impl_.gtype_value_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::release_gtype_value() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.actTmplInstance.gtype_value)
  return _impl_.gtype_value_.Release();
}
inline void Describe_taskActionTmpl_actTmplInstance::set_allocated_gtype_value(std::string* gtype_value) {
  if (gtype_value != nullptr) {
    
  } else {
    
  }
  _impl_.gtype_value_.SetAllocated(gtype_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gtype_value_.IsDefault()) {
    _impl_.gtype_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.actTmplInstance.gtype_value)
}

// string agv_type_value = 4;
inline void Describe_taskActionTmpl_actTmplInstance::clear_agv_type_value() {
  _impl_.agv_type_value_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl_actTmplInstance::agv_type_value() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.actTmplInstance.agv_type_value)
  return _internal_agv_type_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl_actTmplInstance::set_agv_type_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agv_type_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.actTmplInstance.agv_type_value)
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::mutable_agv_type_value() {
  std::string* _s = _internal_mutable_agv_type_value();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.actTmplInstance.agv_type_value)
  return _s;
}
inline const std::string& Describe_taskActionTmpl_actTmplInstance::_internal_agv_type_value() const {
  return _impl_.agv_type_value_.Get();
}
inline void Describe_taskActionTmpl_actTmplInstance::_internal_set_agv_type_value(const std::string& value) {
  
  _impl_.agv_type_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::_internal_mutable_agv_type_value() {
  
  return _impl_.agv_type_value_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl_actTmplInstance::release_agv_type_value() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.actTmplInstance.agv_type_value)
  return _impl_.agv_type_value_.Release();
}
inline void Describe_taskActionTmpl_actTmplInstance::set_allocated_agv_type_value(std::string* agv_type_value) {
  if (agv_type_value != nullptr) {
    
  } else {
    
  }
  _impl_.agv_type_value_.SetAllocated(agv_type_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agv_type_value_.IsDefault()) {
    _impl_.agv_type_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.actTmplInstance.agv_type_value)
}

// int32 layer_value = 5;
inline void Describe_taskActionTmpl_actTmplInstance::clear_layer_value() {
  _impl_.layer_value_ = 0;
}
inline int32_t Describe_taskActionTmpl_actTmplInstance::_internal_layer_value() const {
  return _impl_.layer_value_;
}
inline int32_t Describe_taskActionTmpl_actTmplInstance::layer_value() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.actTmplInstance.layer_value)
  return _internal_layer_value();
}
inline void Describe_taskActionTmpl_actTmplInstance::_internal_set_layer_value(int32_t value) {
  
  _impl_.layer_value_ = value;
}
inline void Describe_taskActionTmpl_actTmplInstance::set_layer_value(int32_t value) {
  _internal_set_layer_value(value);
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.actTmplInstance.layer_value)
}

// repeated .agv_map.Describe.taskActionTmpl.action act_list = 6;
inline int Describe_taskActionTmpl_actTmplInstance::_internal_act_list_size() const {
  return _impl_.act_list_.size();
}
inline int Describe_taskActionTmpl_actTmplInstance::act_list_size() const {
  return _internal_act_list_size();
}
inline void Describe_taskActionTmpl_actTmplInstance::clear_act_list() {
  _impl_.act_list_.Clear();
}
inline ::agv_map::Describe_taskActionTmpl_action* Describe_taskActionTmpl_actTmplInstance::mutable_act_list(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.actTmplInstance.act_list)
  return _impl_.act_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action >*
Describe_taskActionTmpl_actTmplInstance::mutable_act_list() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Describe.taskActionTmpl.actTmplInstance.act_list)
  return &_impl_.act_list_;
}
inline const ::agv_map::Describe_taskActionTmpl_action& Describe_taskActionTmpl_actTmplInstance::_internal_act_list(int index) const {
  return _impl_.act_list_.Get(index);
}
inline const ::agv_map::Describe_taskActionTmpl_action& Describe_taskActionTmpl_actTmplInstance::act_list(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.actTmplInstance.act_list)
  return _internal_act_list(index);
}
inline ::agv_map::Describe_taskActionTmpl_action* Describe_taskActionTmpl_actTmplInstance::_internal_add_act_list() {
  return _impl_.act_list_.Add();
}
inline ::agv_map::Describe_taskActionTmpl_action* Describe_taskActionTmpl_actTmplInstance::add_act_list() {
  ::agv_map::Describe_taskActionTmpl_action* _add = _internal_add_act_list();
  // @@protoc_insertion_point(field_add:agv_map.Describe.taskActionTmpl.actTmplInstance.act_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action >&
Describe_taskActionTmpl_actTmplInstance::act_list() const {
  // @@protoc_insertion_point(field_list:agv_map.Describe.taskActionTmpl.actTmplInstance.act_list)
  return _impl_.act_list_;
}

// -------------------------------------------------------------------

// Describe_taskActionTmpl

// string descibe = 1;
inline void Describe_taskActionTmpl::clear_descibe() {
  _impl_.descibe_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl::descibe() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.descibe)
  return _internal_descibe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl::set_descibe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.descibe_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.descibe)
}
inline std::string* Describe_taskActionTmpl::mutable_descibe() {
  std::string* _s = _internal_mutable_descibe();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.descibe)
  return _s;
}
inline const std::string& Describe_taskActionTmpl::_internal_descibe() const {
  return _impl_.descibe_.Get();
}
inline void Describe_taskActionTmpl::_internal_set_descibe(const std::string& value) {
  
  _impl_.descibe_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl::_internal_mutable_descibe() {
  
  return _impl_.descibe_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl::release_descibe() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.descibe)
  return _impl_.descibe_.Release();
}
inline void Describe_taskActionTmpl::set_allocated_descibe(std::string* descibe) {
  if (descibe != nullptr) {
    
  } else {
    
  }
  _impl_.descibe_.SetAllocated(descibe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.descibe_.IsDefault()) {
    _impl_.descibe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.descibe)
}

// string stype = 2;
inline void Describe_taskActionTmpl::clear_stype() {
  _impl_.stype_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl::stype() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.stype)
  return _internal_stype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl::set_stype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.stype)
}
inline std::string* Describe_taskActionTmpl::mutable_stype() {
  std::string* _s = _internal_mutable_stype();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.stype)
  return _s;
}
inline const std::string& Describe_taskActionTmpl::_internal_stype() const {
  return _impl_.stype_.Get();
}
inline void Describe_taskActionTmpl::_internal_set_stype(const std::string& value) {
  
  _impl_.stype_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl::_internal_mutable_stype() {
  
  return _impl_.stype_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl::release_stype() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.stype)
  return _impl_.stype_.Release();
}
inline void Describe_taskActionTmpl::set_allocated_stype(std::string* stype) {
  if (stype != nullptr) {
    
  } else {
    
  }
  _impl_.stype_.SetAllocated(stype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stype_.IsDefault()) {
    _impl_.stype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.stype)
}

// string gtype = 3;
inline void Describe_taskActionTmpl::clear_gtype() {
  _impl_.gtype_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl::gtype() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.gtype)
  return _internal_gtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl::set_gtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.gtype)
}
inline std::string* Describe_taskActionTmpl::mutable_gtype() {
  std::string* _s = _internal_mutable_gtype();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.gtype)
  return _s;
}
inline const std::string& Describe_taskActionTmpl::_internal_gtype() const {
  return _impl_.gtype_.Get();
}
inline void Describe_taskActionTmpl::_internal_set_gtype(const std::string& value) {
  
  _impl_.gtype_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl::_internal_mutable_gtype() {
  
  return _impl_.gtype_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl::release_gtype() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.gtype)
  return _impl_.gtype_.Release();
}
inline void Describe_taskActionTmpl::set_allocated_gtype(std::string* gtype) {
  if (gtype != nullptr) {
    
  } else {
    
  }
  _impl_.gtype_.SetAllocated(gtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gtype_.IsDefault()) {
    _impl_.gtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.gtype)
}

// string agv_type = 4;
inline void Describe_taskActionTmpl::clear_agv_type() {
  _impl_.agv_type_.ClearToEmpty();
}
inline const std::string& Describe_taskActionTmpl::agv_type() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.agv_type)
  return _internal_agv_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_taskActionTmpl::set_agv_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agv_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.agv_type)
}
inline std::string* Describe_taskActionTmpl::mutable_agv_type() {
  std::string* _s = _internal_mutable_agv_type();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.agv_type)
  return _s;
}
inline const std::string& Describe_taskActionTmpl::_internal_agv_type() const {
  return _impl_.agv_type_.Get();
}
inline void Describe_taskActionTmpl::_internal_set_agv_type(const std::string& value) {
  
  _impl_.agv_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl::_internal_mutable_agv_type() {
  
  return _impl_.agv_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_taskActionTmpl::release_agv_type() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.taskActionTmpl.agv_type)
  return _impl_.agv_type_.Release();
}
inline void Describe_taskActionTmpl::set_allocated_agv_type(std::string* agv_type) {
  if (agv_type != nullptr) {
    
  } else {
    
  }
  _impl_.agv_type_.SetAllocated(agv_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agv_type_.IsDefault()) {
    _impl_.agv_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.taskActionTmpl.agv_type)
}

// int32 layer = 5;
inline void Describe_taskActionTmpl::clear_layer() {
  _impl_.layer_ = 0;
}
inline int32_t Describe_taskActionTmpl::_internal_layer() const {
  return _impl_.layer_;
}
inline int32_t Describe_taskActionTmpl::layer() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.layer)
  return _internal_layer();
}
inline void Describe_taskActionTmpl::_internal_set_layer(int32_t value) {
  
  _impl_.layer_ = value;
}
inline void Describe_taskActionTmpl::set_layer(int32_t value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:agv_map.Describe.taskActionTmpl.layer)
}

// repeated .agv_map.Describe.taskActionTmpl.action data = 6;
inline int Describe_taskActionTmpl::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Describe_taskActionTmpl::data_size() const {
  return _internal_data_size();
}
inline void Describe_taskActionTmpl::clear_data() {
  _impl_.data_.Clear();
}
inline ::agv_map::Describe_taskActionTmpl_action* Describe_taskActionTmpl::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.taskActionTmpl.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action >*
Describe_taskActionTmpl::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Describe.taskActionTmpl.data)
  return &_impl_.data_;
}
inline const ::agv_map::Describe_taskActionTmpl_action& Describe_taskActionTmpl::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::agv_map::Describe_taskActionTmpl_action& Describe_taskActionTmpl::data(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.taskActionTmpl.data)
  return _internal_data(index);
}
inline ::agv_map::Describe_taskActionTmpl_action* Describe_taskActionTmpl::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::agv_map::Describe_taskActionTmpl_action* Describe_taskActionTmpl::add_data() {
  ::agv_map::Describe_taskActionTmpl_action* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:agv_map.Describe.taskActionTmpl.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Describe_taskActionTmpl_action >&
Describe_taskActionTmpl::data() const {
  // @@protoc_insertion_point(field_list:agv_map.Describe.taskActionTmpl.data)
  return _impl_.data_;
}

// map<string, .agv_map.Describe.taskActionTmpl.actTmplInstance> act_instance_list = 7;
inline int Describe_taskActionTmpl::_internal_act_instance_list_size() const {
  return _impl_.act_instance_list_.size();
}
inline int Describe_taskActionTmpl::act_instance_list_size() const {
  return _internal_act_instance_list_size();
}
inline void Describe_taskActionTmpl::clear_act_instance_list() {
  _impl_.act_instance_list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >&
Describe_taskActionTmpl::_internal_act_instance_list() const {
  return _impl_.act_instance_list_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >&
Describe_taskActionTmpl::act_instance_list() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.taskActionTmpl.act_instance_list)
  return _internal_act_instance_list();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >*
Describe_taskActionTmpl::_internal_mutable_act_instance_list() {
  return _impl_.act_instance_list_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl_actTmplInstance >*
Describe_taskActionTmpl::mutable_act_instance_list() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.taskActionTmpl.act_instance_list)
  return _internal_mutable_act_instance_list();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Describe_dataDesc

// string describe = 1;
inline void Describe_dataDesc::clear_describe() {
  _impl_.describe_.ClearToEmpty();
}
inline const std::string& Describe_dataDesc::describe() const {
  // @@protoc_insertion_point(field_get:agv_map.Describe.dataDesc.describe)
  return _internal_describe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Describe_dataDesc::set_describe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.describe_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Describe.dataDesc.describe)
}
inline std::string* Describe_dataDesc::mutable_describe() {
  std::string* _s = _internal_mutable_describe();
  // @@protoc_insertion_point(field_mutable:agv_map.Describe.dataDesc.describe)
  return _s;
}
inline const std::string& Describe_dataDesc::_internal_describe() const {
  return _impl_.describe_.Get();
}
inline void Describe_dataDesc::_internal_set_describe(const std::string& value) {
  
  _impl_.describe_.Set(value, GetArenaForAllocation());
}
inline std::string* Describe_dataDesc::_internal_mutable_describe() {
  
  return _impl_.describe_.Mutable(GetArenaForAllocation());
}
inline std::string* Describe_dataDesc::release_describe() {
  // @@protoc_insertion_point(field_release:agv_map.Describe.dataDesc.describe)
  return _impl_.describe_.Release();
}
inline void Describe_dataDesc::set_allocated_describe(std::string* describe) {
  if (describe != nullptr) {
    
  } else {
    
  }
  _impl_.describe_.SetAllocated(describe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.describe_.IsDefault()) {
    _impl_.describe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Describe.dataDesc.describe)
}

// map<string, string> param = 2;
inline int Describe_dataDesc::_internal_param_size() const {
  return _impl_.param_.size();
}
inline int Describe_dataDesc::param_size() const {
  return _internal_param_size();
}
inline void Describe_dataDesc::clear_param() {
  _impl_.param_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe_dataDesc::_internal_param() const {
  return _impl_.param_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe_dataDesc::param() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.dataDesc.param)
  return _internal_param();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe_dataDesc::_internal_mutable_param() {
  return _impl_.param_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe_dataDesc::mutable_param() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.dataDesc.param)
  return _internal_mutable_param();
}

// -------------------------------------------------------------------

// Describe

// map<string, string> agv_desc = 1;
inline int Describe::_internal_agv_desc_size() const {
  return _impl_.agv_desc_.size();
}
inline int Describe::agv_desc_size() const {
  return _internal_agv_desc_size();
}
inline void Describe::clear_agv_desc() {
  _impl_.agv_desc_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe::_internal_agv_desc() const {
  return _impl_.agv_desc_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe::agv_desc() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.agv_desc)
  return _internal_agv_desc();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe::_internal_mutable_agv_desc() {
  return _impl_.agv_desc_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe::mutable_agv_desc() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.agv_desc)
  return _internal_mutable_agv_desc();
}

// map<string, string> ctl_desc = 2;
inline int Describe::_internal_ctl_desc_size() const {
  return _impl_.ctl_desc_.size();
}
inline int Describe::ctl_desc_size() const {
  return _internal_ctl_desc_size();
}
inline void Describe::clear_ctl_desc() {
  _impl_.ctl_desc_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe::_internal_ctl_desc() const {
  return _impl_.ctl_desc_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe::ctl_desc() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.ctl_desc)
  return _internal_ctl_desc();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe::_internal_mutable_ctl_desc() {
  return _impl_.ctl_desc_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe::mutable_ctl_desc() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.ctl_desc)
  return _internal_mutable_ctl_desc();
}

// map<string, string> avo_desc = 3;
inline int Describe::_internal_avo_desc_size() const {
  return _impl_.avo_desc_.size();
}
inline int Describe::avo_desc_size() const {
  return _internal_avo_desc_size();
}
inline void Describe::clear_avo_desc() {
  _impl_.avo_desc_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe::_internal_avo_desc() const {
  return _impl_.avo_desc_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe::avo_desc() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.avo_desc)
  return _internal_avo_desc();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe::_internal_mutable_avo_desc() {
  return _impl_.avo_desc_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe::mutable_avo_desc() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.avo_desc)
  return _internal_mutable_avo_desc();
}

// map<string, string> rut_desc = 4;
inline int Describe::_internal_rut_desc_size() const {
  return _impl_.rut_desc_.size();
}
inline int Describe::rut_desc_size() const {
  return _internal_rut_desc_size();
}
inline void Describe::clear_rut_desc() {
  _impl_.rut_desc_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe::_internal_rut_desc() const {
  return _impl_.rut_desc_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Describe::rut_desc() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.rut_desc)
  return _internal_rut_desc();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe::_internal_mutable_rut_desc() {
  return _impl_.rut_desc_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Describe::mutable_rut_desc() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.rut_desc)
  return _internal_mutable_rut_desc();
}

// map<string, .agv_map.Describe.dataDesc> action_desc = 5;
inline int Describe::_internal_action_desc_size() const {
  return _impl_.action_desc_.size();
}
inline int Describe::action_desc_size() const {
  return _internal_action_desc_size();
}
inline void Describe::clear_action_desc() {
  _impl_.action_desc_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >&
Describe::_internal_action_desc() const {
  return _impl_.action_desc_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >&
Describe::action_desc() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.action_desc)
  return _internal_action_desc();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >*
Describe::_internal_mutable_action_desc() {
  return _impl_.action_desc_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >*
Describe::mutable_action_desc() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.action_desc)
  return _internal_mutable_action_desc();
}

// map<string, .agv_map.Describe.dataDesc> area_desc = 6;
inline int Describe::_internal_area_desc_size() const {
  return _impl_.area_desc_.size();
}
inline int Describe::area_desc_size() const {
  return _internal_area_desc_size();
}
inline void Describe::clear_area_desc() {
  _impl_.area_desc_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >&
Describe::_internal_area_desc() const {
  return _impl_.area_desc_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >&
Describe::area_desc() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.area_desc)
  return _internal_area_desc();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >*
Describe::_internal_mutable_area_desc() {
  return _impl_.area_desc_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_dataDesc >*
Describe::mutable_area_desc() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.area_desc)
  return _internal_mutable_area_desc();
}

// map<string, .agv_map.Describe.ParamTmpl> param_tmpl = 7;
inline int Describe::_internal_param_tmpl_size() const {
  return _impl_.param_tmpl_.size();
}
inline int Describe::param_tmpl_size() const {
  return _internal_param_tmpl_size();
}
inline void Describe::clear_param_tmpl() {
  _impl_.param_tmpl_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >&
Describe::_internal_param_tmpl() const {
  return _impl_.param_tmpl_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >&
Describe::param_tmpl() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.param_tmpl)
  return _internal_param_tmpl();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >*
Describe::_internal_mutable_param_tmpl() {
  return _impl_.param_tmpl_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_ParamTmpl >*
Describe::mutable_param_tmpl() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.param_tmpl)
  return _internal_mutable_param_tmpl();
}

// map<string, .agv_map.Describe.actionTmpl> action_tmpl = 8;
inline int Describe::_internal_action_tmpl_size() const {
  return _impl_.action_tmpl_.size();
}
inline int Describe::action_tmpl_size() const {
  return _internal_action_tmpl_size();
}
inline void Describe::clear_action_tmpl() {
  _impl_.action_tmpl_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >&
Describe::_internal_action_tmpl() const {
  return _impl_.action_tmpl_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >&
Describe::action_tmpl() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.action_tmpl)
  return _internal_action_tmpl();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >*
Describe::_internal_mutable_action_tmpl() {
  return _impl_.action_tmpl_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_actionTmpl >*
Describe::mutable_action_tmpl() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.action_tmpl)
  return _internal_mutable_action_tmpl();
}

// map<string, .agv_map.Describe.taskActionTmpl> task_action_tmpl = 9;
inline int Describe::_internal_task_action_tmpl_size() const {
  return _impl_.task_action_tmpl_.size();
}
inline int Describe::task_action_tmpl_size() const {
  return _internal_task_action_tmpl_size();
}
inline void Describe::clear_task_action_tmpl() {
  _impl_.task_action_tmpl_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >&
Describe::_internal_task_action_tmpl() const {
  return _impl_.task_action_tmpl_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >&
Describe::task_action_tmpl() const {
  // @@protoc_insertion_point(field_map:agv_map.Describe.task_action_tmpl)
  return _internal_task_action_tmpl();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >*
Describe::_internal_mutable_task_action_tmpl() {
  return _impl_.task_action_tmpl_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Describe_taskActionTmpl >*
Describe::mutable_task_action_tmpl() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.Describe.task_action_tmpl)
  return _internal_mutable_task_action_tmpl();
}

// -------------------------------------------------------------------

// Store_offset

// .agv_map.store_offset_by_layer layer1 = 1;
inline bool Store_offset::_internal_has_layer1() const {
  return this != internal_default_instance() && _impl_.layer1_ != nullptr;
}
inline bool Store_offset::has_layer1() const {
  return _internal_has_layer1();
}
inline void Store_offset::clear_layer1() {
  if (GetArenaForAllocation() == nullptr && _impl_.layer1_ != nullptr) {
    delete _impl_.layer1_;
  }
  _impl_.layer1_ = nullptr;
}
inline const ::agv_map::store_offset_by_layer& Store_offset::_internal_layer1() const {
  const ::agv_map::store_offset_by_layer* p = _impl_.layer1_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::store_offset_by_layer&>(
      ::agv_map::_store_offset_by_layer_default_instance_);
}
inline const ::agv_map::store_offset_by_layer& Store_offset::layer1() const {
  // @@protoc_insertion_point(field_get:agv_map.Store_offset.layer1)
  return _internal_layer1();
}
inline void Store_offset::unsafe_arena_set_allocated_layer1(
    ::agv_map::store_offset_by_layer* layer1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer1_);
  }
  _impl_.layer1_ = layer1;
  if (layer1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Store_offset.layer1)
}
inline ::agv_map::store_offset_by_layer* Store_offset::release_layer1() {
  
  ::agv_map::store_offset_by_layer* temp = _impl_.layer1_;
  _impl_.layer1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::store_offset_by_layer* Store_offset::unsafe_arena_release_layer1() {
  // @@protoc_insertion_point(field_release:agv_map.Store_offset.layer1)
  
  ::agv_map::store_offset_by_layer* temp = _impl_.layer1_;
  _impl_.layer1_ = nullptr;
  return temp;
}
inline ::agv_map::store_offset_by_layer* Store_offset::_internal_mutable_layer1() {
  
  if (_impl_.layer1_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::store_offset_by_layer>(GetArenaForAllocation());
    _impl_.layer1_ = p;
  }
  return _impl_.layer1_;
}
inline ::agv_map::store_offset_by_layer* Store_offset::mutable_layer1() {
  ::agv_map::store_offset_by_layer* _msg = _internal_mutable_layer1();
  // @@protoc_insertion_point(field_mutable:agv_map.Store_offset.layer1)
  return _msg;
}
inline void Store_offset::set_allocated_layer1(::agv_map::store_offset_by_layer* layer1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.layer1_;
  }
  if (layer1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layer1);
    if (message_arena != submessage_arena) {
      layer1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.layer1_ = layer1;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Store_offset.layer1)
}

// .agv_map.store_offset_by_layer layer2 = 2;
inline bool Store_offset::_internal_has_layer2() const {
  return this != internal_default_instance() && _impl_.layer2_ != nullptr;
}
inline bool Store_offset::has_layer2() const {
  return _internal_has_layer2();
}
inline void Store_offset::clear_layer2() {
  if (GetArenaForAllocation() == nullptr && _impl_.layer2_ != nullptr) {
    delete _impl_.layer2_;
  }
  _impl_.layer2_ = nullptr;
}
inline const ::agv_map::store_offset_by_layer& Store_offset::_internal_layer2() const {
  const ::agv_map::store_offset_by_layer* p = _impl_.layer2_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::store_offset_by_layer&>(
      ::agv_map::_store_offset_by_layer_default_instance_);
}
inline const ::agv_map::store_offset_by_layer& Store_offset::layer2() const {
  // @@protoc_insertion_point(field_get:agv_map.Store_offset.layer2)
  return _internal_layer2();
}
inline void Store_offset::unsafe_arena_set_allocated_layer2(
    ::agv_map::store_offset_by_layer* layer2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer2_);
  }
  _impl_.layer2_ = layer2;
  if (layer2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Store_offset.layer2)
}
inline ::agv_map::store_offset_by_layer* Store_offset::release_layer2() {
  
  ::agv_map::store_offset_by_layer* temp = _impl_.layer2_;
  _impl_.layer2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::store_offset_by_layer* Store_offset::unsafe_arena_release_layer2() {
  // @@protoc_insertion_point(field_release:agv_map.Store_offset.layer2)
  
  ::agv_map::store_offset_by_layer* temp = _impl_.layer2_;
  _impl_.layer2_ = nullptr;
  return temp;
}
inline ::agv_map::store_offset_by_layer* Store_offset::_internal_mutable_layer2() {
  
  if (_impl_.layer2_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::store_offset_by_layer>(GetArenaForAllocation());
    _impl_.layer2_ = p;
  }
  return _impl_.layer2_;
}
inline ::agv_map::store_offset_by_layer* Store_offset::mutable_layer2() {
  ::agv_map::store_offset_by_layer* _msg = _internal_mutable_layer2();
  // @@protoc_insertion_point(field_mutable:agv_map.Store_offset.layer2)
  return _msg;
}
inline void Store_offset::set_allocated_layer2(::agv_map::store_offset_by_layer* layer2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.layer2_;
  }
  if (layer2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layer2);
    if (message_arena != submessage_arena) {
      layer2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.layer2_ = layer2;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Store_offset.layer2)
}

// .agv_map.store_offset_by_layer layer3 = 3;
inline bool Store_offset::_internal_has_layer3() const {
  return this != internal_default_instance() && _impl_.layer3_ != nullptr;
}
inline bool Store_offset::has_layer3() const {
  return _internal_has_layer3();
}
inline void Store_offset::clear_layer3() {
  if (GetArenaForAllocation() == nullptr && _impl_.layer3_ != nullptr) {
    delete _impl_.layer3_;
  }
  _impl_.layer3_ = nullptr;
}
inline const ::agv_map::store_offset_by_layer& Store_offset::_internal_layer3() const {
  const ::agv_map::store_offset_by_layer* p = _impl_.layer3_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::store_offset_by_layer&>(
      ::agv_map::_store_offset_by_layer_default_instance_);
}
inline const ::agv_map::store_offset_by_layer& Store_offset::layer3() const {
  // @@protoc_insertion_point(field_get:agv_map.Store_offset.layer3)
  return _internal_layer3();
}
inline void Store_offset::unsafe_arena_set_allocated_layer3(
    ::agv_map::store_offset_by_layer* layer3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer3_);
  }
  _impl_.layer3_ = layer3;
  if (layer3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Store_offset.layer3)
}
inline ::agv_map::store_offset_by_layer* Store_offset::release_layer3() {
  
  ::agv_map::store_offset_by_layer* temp = _impl_.layer3_;
  _impl_.layer3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::store_offset_by_layer* Store_offset::unsafe_arena_release_layer3() {
  // @@protoc_insertion_point(field_release:agv_map.Store_offset.layer3)
  
  ::agv_map::store_offset_by_layer* temp = _impl_.layer3_;
  _impl_.layer3_ = nullptr;
  return temp;
}
inline ::agv_map::store_offset_by_layer* Store_offset::_internal_mutable_layer3() {
  
  if (_impl_.layer3_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::store_offset_by_layer>(GetArenaForAllocation());
    _impl_.layer3_ = p;
  }
  return _impl_.layer3_;
}
inline ::agv_map::store_offset_by_layer* Store_offset::mutable_layer3() {
  ::agv_map::store_offset_by_layer* _msg = _internal_mutable_layer3();
  // @@protoc_insertion_point(field_mutable:agv_map.Store_offset.layer3)
  return _msg;
}
inline void Store_offset::set_allocated_layer3(::agv_map::store_offset_by_layer* layer3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.layer3_;
  }
  if (layer3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layer3);
    if (message_arena != submessage_arena) {
      layer3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.layer3_ = layer3;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Store_offset.layer3)
}

// .agv_map.store_offset_by_layer layer4 = 4;
inline bool Store_offset::_internal_has_layer4() const {
  return this != internal_default_instance() && _impl_.layer4_ != nullptr;
}
inline bool Store_offset::has_layer4() const {
  return _internal_has_layer4();
}
inline void Store_offset::clear_layer4() {
  if (GetArenaForAllocation() == nullptr && _impl_.layer4_ != nullptr) {
    delete _impl_.layer4_;
  }
  _impl_.layer4_ = nullptr;
}
inline const ::agv_map::store_offset_by_layer& Store_offset::_internal_layer4() const {
  const ::agv_map::store_offset_by_layer* p = _impl_.layer4_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::store_offset_by_layer&>(
      ::agv_map::_store_offset_by_layer_default_instance_);
}
inline const ::agv_map::store_offset_by_layer& Store_offset::layer4() const {
  // @@protoc_insertion_point(field_get:agv_map.Store_offset.layer4)
  return _internal_layer4();
}
inline void Store_offset::unsafe_arena_set_allocated_layer4(
    ::agv_map::store_offset_by_layer* layer4) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer4_);
  }
  _impl_.layer4_ = layer4;
  if (layer4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Store_offset.layer4)
}
inline ::agv_map::store_offset_by_layer* Store_offset::release_layer4() {
  
  ::agv_map::store_offset_by_layer* temp = _impl_.layer4_;
  _impl_.layer4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::store_offset_by_layer* Store_offset::unsafe_arena_release_layer4() {
  // @@protoc_insertion_point(field_release:agv_map.Store_offset.layer4)
  
  ::agv_map::store_offset_by_layer* temp = _impl_.layer4_;
  _impl_.layer4_ = nullptr;
  return temp;
}
inline ::agv_map::store_offset_by_layer* Store_offset::_internal_mutable_layer4() {
  
  if (_impl_.layer4_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::store_offset_by_layer>(GetArenaForAllocation());
    _impl_.layer4_ = p;
  }
  return _impl_.layer4_;
}
inline ::agv_map::store_offset_by_layer* Store_offset::mutable_layer4() {
  ::agv_map::store_offset_by_layer* _msg = _internal_mutable_layer4();
  // @@protoc_insertion_point(field_mutable:agv_map.Store_offset.layer4)
  return _msg;
}
inline void Store_offset::set_allocated_layer4(::agv_map::store_offset_by_layer* layer4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.layer4_;
  }
  if (layer4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layer4);
    if (message_arena != submessage_arena) {
      layer4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer4, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.layer4_ = layer4;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Store_offset.layer4)
}

// -------------------------------------------------------------------

// store_offset_by_layer

// float high = 1;
inline void store_offset_by_layer::clear_high() {
  _impl_.high_ = 0;
}
inline float store_offset_by_layer::_internal_high() const {
  return _impl_.high_;
}
inline float store_offset_by_layer::high() const {
  // @@protoc_insertion_point(field_get:agv_map.store_offset_by_layer.high)
  return _internal_high();
}
inline void store_offset_by_layer::_internal_set_high(float value) {
  
  _impl_.high_ = value;
}
inline void store_offset_by_layer::set_high(float value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:agv_map.store_offset_by_layer.high)
}

// float horizontal_offset = 2;
inline void store_offset_by_layer::clear_horizontal_offset() {
  _impl_.horizontal_offset_ = 0;
}
inline float store_offset_by_layer::_internal_horizontal_offset() const {
  return _impl_.horizontal_offset_;
}
inline float store_offset_by_layer::horizontal_offset() const {
  // @@protoc_insertion_point(field_get:agv_map.store_offset_by_layer.horizontal_offset)
  return _internal_horizontal_offset();
}
inline void store_offset_by_layer::_internal_set_horizontal_offset(float value) {
  
  _impl_.horizontal_offset_ = value;
}
inline void store_offset_by_layer::set_horizontal_offset(float value) {
  _internal_set_horizontal_offset(value);
  // @@protoc_insertion_point(field_set:agv_map.store_offset_by_layer.horizontal_offset)
}

// float vertical_offset = 3;
inline void store_offset_by_layer::clear_vertical_offset() {
  _impl_.vertical_offset_ = 0;
}
inline float store_offset_by_layer::_internal_vertical_offset() const {
  return _impl_.vertical_offset_;
}
inline float store_offset_by_layer::vertical_offset() const {
  // @@protoc_insertion_point(field_get:agv_map.store_offset_by_layer.vertical_offset)
  return _internal_vertical_offset();
}
inline void store_offset_by_layer::_internal_set_vertical_offset(float value) {
  
  _impl_.vertical_offset_ = value;
}
inline void store_offset_by_layer::set_vertical_offset(float value) {
  _internal_set_vertical_offset(value);
  // @@protoc_insertion_point(field_set:agv_map.store_offset_by_layer.vertical_offset)
}

// float fork_high_offset = 4;
inline void store_offset_by_layer::clear_fork_high_offset() {
  _impl_.fork_high_offset_ = 0;
}
inline float store_offset_by_layer::_internal_fork_high_offset() const {
  return _impl_.fork_high_offset_;
}
inline float store_offset_by_layer::fork_high_offset() const {
  // @@protoc_insertion_point(field_get:agv_map.store_offset_by_layer.fork_high_offset)
  return _internal_fork_high_offset();
}
inline void store_offset_by_layer::_internal_set_fork_high_offset(float value) {
  
  _impl_.fork_high_offset_ = value;
}
inline void store_offset_by_layer::set_fork_high_offset(float value) {
  _internal_set_fork_high_offset(value);
  // @@protoc_insertion_point(field_set:agv_map.store_offset_by_layer.fork_high_offset)
}

// -------------------------------------------------------------------

// Label

// sint32 id = 1;
inline void Label::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Label::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Label::id() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.id)
  return _internal_id();
}
inline void Label::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Label::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.id)
}

// int32 type = 2;
inline void Label::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Label::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Label::type() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.type)
  return _internal_type();
}
inline void Label::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Label::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.type)
}

// string text = 3;
inline void Label::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Label::text() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Label::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Label.text)
}
inline std::string* Label::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:agv_map.Label.text)
  return _s;
}
inline const std::string& Label::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Label::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Label::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Label::release_text() {
  // @@protoc_insertion_point(field_release:agv_map.Label.text)
  return _impl_.text_.Release();
}
inline void Label::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Label.text)
}

// .agv_map.Coord coord = 4;
inline bool Label::_internal_has_coord() const {
  return this != internal_default_instance() && _impl_.coord_ != nullptr;
}
inline bool Label::has_coord() const {
  return _internal_has_coord();
}
inline void Label::clear_coord() {
  if (GetArenaForAllocation() == nullptr && _impl_.coord_ != nullptr) {
    delete _impl_.coord_;
  }
  _impl_.coord_ = nullptr;
}
inline const ::agv_map::Coord& Label::_internal_coord() const {
  const ::agv_map::Coord* p = _impl_.coord_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Coord&>(
      ::agv_map::_Coord_default_instance_);
}
inline const ::agv_map::Coord& Label::coord() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.coord)
  return _internal_coord();
}
inline void Label::unsafe_arena_set_allocated_coord(
    ::agv_map::Coord* coord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coord_);
  }
  _impl_.coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Label.coord)
}
inline ::agv_map::Coord* Label::release_coord() {
  
  ::agv_map::Coord* temp = _impl_.coord_;
  _impl_.coord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Coord* Label::unsafe_arena_release_coord() {
  // @@protoc_insertion_point(field_release:agv_map.Label.coord)
  
  ::agv_map::Coord* temp = _impl_.coord_;
  _impl_.coord_ = nullptr;
  return temp;
}
inline ::agv_map::Coord* Label::_internal_mutable_coord() {
  
  if (_impl_.coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Coord>(GetArenaForAllocation());
    _impl_.coord_ = p;
  }
  return _impl_.coord_;
}
inline ::agv_map::Coord* Label::mutable_coord() {
  ::agv_map::Coord* _msg = _internal_mutable_coord();
  // @@protoc_insertion_point(field_mutable:agv_map.Label.coord)
  return _msg;
}
inline void Label::set_allocated_coord(::agv_map::Coord* coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coord_;
  }
  if (coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coord);
    if (message_arena != submessage_arena) {
      coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coord_ = coord;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Label.coord)
}

// sint32 size = 5;
inline void Label::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t Label::_internal_size() const {
  return _impl_.size_;
}
inline int32_t Label::size() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.size)
  return _internal_size();
}
inline void Label::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void Label::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.size)
}

// sint32 color_r = 6;
inline void Label::clear_color_r() {
  _impl_.color_r_ = 0;
}
inline int32_t Label::_internal_color_r() const {
  return _impl_.color_r_;
}
inline int32_t Label::color_r() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.color_r)
  return _internal_color_r();
}
inline void Label::_internal_set_color_r(int32_t value) {
  
  _impl_.color_r_ = value;
}
inline void Label::set_color_r(int32_t value) {
  _internal_set_color_r(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.color_r)
}

// sint32 color_g = 7;
inline void Label::clear_color_g() {
  _impl_.color_g_ = 0;
}
inline int32_t Label::_internal_color_g() const {
  return _impl_.color_g_;
}
inline int32_t Label::color_g() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.color_g)
  return _internal_color_g();
}
inline void Label::_internal_set_color_g(int32_t value) {
  
  _impl_.color_g_ = value;
}
inline void Label::set_color_g(int32_t value) {
  _internal_set_color_g(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.color_g)
}

// sint32 color_b = 8;
inline void Label::clear_color_b() {
  _impl_.color_b_ = 0;
}
inline int32_t Label::_internal_color_b() const {
  return _impl_.color_b_;
}
inline int32_t Label::color_b() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.color_b)
  return _internal_color_b();
}
inline void Label::_internal_set_color_b(int32_t value) {
  
  _impl_.color_b_ = value;
}
inline void Label::set_color_b(int32_t value) {
  _internal_set_color_b(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.color_b)
}

// sint32 opacity = 9;
inline void Label::clear_opacity() {
  _impl_.opacity_ = 0;
}
inline int32_t Label::_internal_opacity() const {
  return _impl_.opacity_;
}
inline int32_t Label::opacity() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.opacity)
  return _internal_opacity();
}
inline void Label::_internal_set_opacity(int32_t value) {
  
  _impl_.opacity_ = value;
}
inline void Label::set_opacity(int32_t value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.opacity)
}

// int32 bold = 10;
inline void Label::clear_bold() {
  _impl_.bold_ = 0;
}
inline int32_t Label::_internal_bold() const {
  return _impl_.bold_;
}
inline int32_t Label::bold() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.bold)
  return _internal_bold();
}
inline void Label::_internal_set_bold(int32_t value) {
  
  _impl_.bold_ = value;
}
inline void Label::set_bold(int32_t value) {
  _internal_set_bold(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.bold)
}

// int32 italic = 11;
inline void Label::clear_italic() {
  _impl_.italic_ = 0;
}
inline int32_t Label::_internal_italic() const {
  return _impl_.italic_;
}
inline int32_t Label::italic() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.italic)
  return _internal_italic();
}
inline void Label::_internal_set_italic(int32_t value) {
  
  _impl_.italic_ = value;
}
inline void Label::set_italic(int32_t value) {
  _internal_set_italic(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.italic)
}

// int32 dir = 12;
inline void Label::clear_dir() {
  _impl_.dir_ = 0;
}
inline int32_t Label::_internal_dir() const {
  return _impl_.dir_;
}
inline int32_t Label::dir() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.dir)
  return _internal_dir();
}
inline void Label::_internal_set_dir(int32_t value) {
  
  _impl_.dir_ = value;
}
inline void Label::set_dir(int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.dir)
}

// sint32 rotate = 13;
inline void Label::clear_rotate() {
  _impl_.rotate_ = 0;
}
inline int32_t Label::_internal_rotate() const {
  return _impl_.rotate_;
}
inline int32_t Label::rotate() const {
  // @@protoc_insertion_point(field_get:agv_map.Label.rotate)
  return _internal_rotate();
}
inline void Label::_internal_set_rotate(int32_t value) {
  
  _impl_.rotate_ = value;
}
inline void Label::set_rotate(int32_t value) {
  _internal_set_rotate(value);
  // @@protoc_insertion_point(field_set:agv_map.Label.rotate)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AgvParam_opto_elec

// string name = 1;
inline void AgvParam_opto_elec::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AgvParam_opto_elec::name() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.opto_elec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgvParam_opto_elec::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.opto_elec.name)
}
inline std::string* AgvParam_opto_elec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:agv_map.AgvParam.opto_elec.name)
  return _s;
}
inline const std::string& AgvParam_opto_elec::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AgvParam_opto_elec::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AgvParam_opto_elec::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AgvParam_opto_elec::release_name() {
  // @@protoc_insertion_point(field_release:agv_map.AgvParam.opto_elec.name)
  return _impl_.name_.Release();
}
inline void AgvParam_opto_elec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.AgvParam.opto_elec.name)
}

// .agv_map.Position pos = 2;
inline bool AgvParam_opto_elec::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool AgvParam_opto_elec::has_pos() const {
  return _internal_has_pos();
}
inline void AgvParam_opto_elec::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::agv_map::Position& AgvParam_opto_elec::_internal_pos() const {
  const ::agv_map::Position* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Position&>(
      ::agv_map::_Position_default_instance_);
}
inline const ::agv_map::Position& AgvParam_opto_elec::pos() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.opto_elec.pos)
  return _internal_pos();
}
inline void AgvParam_opto_elec::unsafe_arena_set_allocated_pos(
    ::agv_map::Position* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.AgvParam.opto_elec.pos)
}
inline ::agv_map::Position* AgvParam_opto_elec::release_pos() {
  
  ::agv_map::Position* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Position* AgvParam_opto_elec::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:agv_map.AgvParam.opto_elec.pos)
  
  ::agv_map::Position* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::agv_map::Position* AgvParam_opto_elec::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Position>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::agv_map::Position* AgvParam_opto_elec::mutable_pos() {
  ::agv_map::Position* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:agv_map.AgvParam.opto_elec.pos)
  return _msg;
}
inline void AgvParam_opto_elec::set_allocated_pos(::agv_map::Position* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:agv_map.AgvParam.opto_elec.pos)
}

// int32 signal = 3;
inline void AgvParam_opto_elec::clear_signal() {
  _impl_.signal_ = 0;
}
inline int32_t AgvParam_opto_elec::_internal_signal() const {
  return _impl_.signal_;
}
inline int32_t AgvParam_opto_elec::signal() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.opto_elec.signal)
  return _internal_signal();
}
inline void AgvParam_opto_elec::_internal_set_signal(int32_t value) {
  
  _impl_.signal_ = value;
}
inline void AgvParam_opto_elec::set_signal(int32_t value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.opto_elec.signal)
}

// -------------------------------------------------------------------

// AgvParam

// string agv_subtype = 1;
inline void AgvParam::clear_agv_subtype() {
  _impl_.agv_subtype_.ClearToEmpty();
}
inline const std::string& AgvParam::agv_subtype() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.agv_subtype)
  return _internal_agv_subtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgvParam::set_agv_subtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agv_subtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.agv_subtype)
}
inline std::string* AgvParam::mutable_agv_subtype() {
  std::string* _s = _internal_mutable_agv_subtype();
  // @@protoc_insertion_point(field_mutable:agv_map.AgvParam.agv_subtype)
  return _s;
}
inline const std::string& AgvParam::_internal_agv_subtype() const {
  return _impl_.agv_subtype_.Get();
}
inline void AgvParam::_internal_set_agv_subtype(const std::string& value) {
  
  _impl_.agv_subtype_.Set(value, GetArenaForAllocation());
}
inline std::string* AgvParam::_internal_mutable_agv_subtype() {
  
  return _impl_.agv_subtype_.Mutable(GetArenaForAllocation());
}
inline std::string* AgvParam::release_agv_subtype() {
  // @@protoc_insertion_point(field_release:agv_map.AgvParam.agv_subtype)
  return _impl_.agv_subtype_.Release();
}
inline void AgvParam::set_allocated_agv_subtype(std::string* agv_subtype) {
  if (agv_subtype != nullptr) {
    
  } else {
    
  }
  _impl_.agv_subtype_.SetAllocated(agv_subtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agv_subtype_.IsDefault()) {
    _impl_.agv_subtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.AgvParam.agv_subtype)
}

// int32 body_Width = 2;
inline void AgvParam::clear_body_width() {
  _impl_.body_width_ = 0;
}
inline int32_t AgvParam::_internal_body_width() const {
  return _impl_.body_width_;
}
inline int32_t AgvParam::body_width() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.body_Width)
  return _internal_body_width();
}
inline void AgvParam::_internal_set_body_width(int32_t value) {
  
  _impl_.body_width_ = value;
}
inline void AgvParam::set_body_width(int32_t value) {
  _internal_set_body_width(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.body_Width)
}

// int32 body_Length = 3;
inline void AgvParam::clear_body_length() {
  _impl_.body_length_ = 0;
}
inline int32_t AgvParam::_internal_body_length() const {
  return _impl_.body_length_;
}
inline int32_t AgvParam::body_length() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.body_Length)
  return _internal_body_length();
}
inline void AgvParam::_internal_set_body_length(int32_t value) {
  
  _impl_.body_length_ = value;
}
inline void AgvParam::set_body_length(int32_t value) {
  _internal_set_body_length(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.body_Length)
}

// int32 body_High = 4;
inline void AgvParam::clear_body_high() {
  _impl_.body_high_ = 0;
}
inline int32_t AgvParam::_internal_body_high() const {
  return _impl_.body_high_;
}
inline int32_t AgvParam::body_high() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.body_High)
  return _internal_body_high();
}
inline void AgvParam::_internal_set_body_high(int32_t value) {
  
  _impl_.body_high_ = value;
}
inline void AgvParam::set_body_high(int32_t value) {
  _internal_set_body_high(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.body_High)
}

// int32 wheel_base = 5;
inline void AgvParam::clear_wheel_base() {
  _impl_.wheel_base_ = 0;
}
inline int32_t AgvParam::_internal_wheel_base() const {
  return _impl_.wheel_base_;
}
inline int32_t AgvParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.wheel_base)
  return _internal_wheel_base();
}
inline void AgvParam::_internal_set_wheel_base(int32_t value) {
  
  _impl_.wheel_base_ = value;
}
inline void AgvParam::set_wheel_base(int32_t value) {
  _internal_set_wheel_base(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.wheel_base)
}

// int32 rotate_radius = 6;
inline void AgvParam::clear_rotate_radius() {
  _impl_.rotate_radius_ = 0;
}
inline int32_t AgvParam::_internal_rotate_radius() const {
  return _impl_.rotate_radius_;
}
inline int32_t AgvParam::rotate_radius() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.rotate_radius)
  return _internal_rotate_radius();
}
inline void AgvParam::_internal_set_rotate_radius(int32_t value) {
  
  _impl_.rotate_radius_ = value;
}
inline void AgvParam::set_rotate_radius(int32_t value) {
  _internal_set_rotate_radius(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.rotate_radius)
}

// int32 p2head = 7;
inline void AgvParam::clear_p2head() {
  _impl_.p2head_ = 0;
}
inline int32_t AgvParam::_internal_p2head() const {
  return _impl_.p2head_;
}
inline int32_t AgvParam::p2head() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.p2head)
  return _internal_p2head();
}
inline void AgvParam::_internal_set_p2head(int32_t value) {
  
  _impl_.p2head_ = value;
}
inline void AgvParam::set_p2head(int32_t value) {
  _internal_set_p2head(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.p2head)
}

// int32 p2tail = 8;
inline void AgvParam::clear_p2tail() {
  _impl_.p2tail_ = 0;
}
inline int32_t AgvParam::_internal_p2tail() const {
  return _impl_.p2tail_;
}
inline int32_t AgvParam::p2tail() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.p2tail)
  return _internal_p2tail();
}
inline void AgvParam::_internal_set_p2tail(int32_t value) {
  
  _impl_.p2tail_ = value;
}
inline void AgvParam::set_p2tail(int32_t value) {
  _internal_set_p2tail(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.p2tail)
}

// int32 p2nav = 9;
inline void AgvParam::clear_p2nav() {
  _impl_.p2nav_ = 0;
}
inline int32_t AgvParam::_internal_p2nav() const {
  return _impl_.p2nav_;
}
inline int32_t AgvParam::p2nav() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.p2nav)
  return _internal_p2nav();
}
inline void AgvParam::_internal_set_p2nav(int32_t value) {
  
  _impl_.p2nav_ = value;
}
inline void AgvParam::set_p2nav(int32_t value) {
  _internal_set_p2nav(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.p2nav)
}

// sint32 fork_min = 10;
inline void AgvParam::clear_fork_min() {
  _impl_.fork_min_ = 0;
}
inline int32_t AgvParam::_internal_fork_min() const {
  return _impl_.fork_min_;
}
inline int32_t AgvParam::fork_min() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.fork_min)
  return _internal_fork_min();
}
inline void AgvParam::_internal_set_fork_min(int32_t value) {
  
  _impl_.fork_min_ = value;
}
inline void AgvParam::set_fork_min(int32_t value) {
  _internal_set_fork_min(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.fork_min)
}

// sint32 fork_max = 11;
inline void AgvParam::clear_fork_max() {
  _impl_.fork_max_ = 0;
}
inline int32_t AgvParam::_internal_fork_max() const {
  return _impl_.fork_max_;
}
inline int32_t AgvParam::fork_max() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.fork_max)
  return _internal_fork_max();
}
inline void AgvParam::_internal_set_fork_max(int32_t value) {
  
  _impl_.fork_max_ = value;
}
inline void AgvParam::set_fork_max(int32_t value) {
  _internal_set_fork_max(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.fork_max)
}

// sint32 fork_noload_high = 13;
inline void AgvParam::clear_fork_noload_high() {
  _impl_.fork_noload_high_ = 0;
}
inline int32_t AgvParam::_internal_fork_noload_high() const {
  return _impl_.fork_noload_high_;
}
inline int32_t AgvParam::fork_noload_high() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.fork_noload_high)
  return _internal_fork_noload_high();
}
inline void AgvParam::_internal_set_fork_noload_high(int32_t value) {
  
  _impl_.fork_noload_high_ = value;
}
inline void AgvParam::set_fork_noload_high(int32_t value) {
  _internal_set_fork_noload_high(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.fork_noload_high)
}

// .agv_map.Coord id_pos = 14;
inline bool AgvParam::_internal_has_id_pos() const {
  return this != internal_default_instance() && _impl_.id_pos_ != nullptr;
}
inline bool AgvParam::has_id_pos() const {
  return _internal_has_id_pos();
}
inline void AgvParam::clear_id_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_pos_ != nullptr) {
    delete _impl_.id_pos_;
  }
  _impl_.id_pos_ = nullptr;
}
inline const ::agv_map::Coord& AgvParam::_internal_id_pos() const {
  const ::agv_map::Coord* p = _impl_.id_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Coord&>(
      ::agv_map::_Coord_default_instance_);
}
inline const ::agv_map::Coord& AgvParam::id_pos() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.id_pos)
  return _internal_id_pos();
}
inline void AgvParam::unsafe_arena_set_allocated_id_pos(
    ::agv_map::Coord* id_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_pos_);
  }
  _impl_.id_pos_ = id_pos;
  if (id_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.AgvParam.id_pos)
}
inline ::agv_map::Coord* AgvParam::release_id_pos() {
  
  ::agv_map::Coord* temp = _impl_.id_pos_;
  _impl_.id_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Coord* AgvParam::unsafe_arena_release_id_pos() {
  // @@protoc_insertion_point(field_release:agv_map.AgvParam.id_pos)
  
  ::agv_map::Coord* temp = _impl_.id_pos_;
  _impl_.id_pos_ = nullptr;
  return temp;
}
inline ::agv_map::Coord* AgvParam::_internal_mutable_id_pos() {
  
  if (_impl_.id_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Coord>(GetArenaForAllocation());
    _impl_.id_pos_ = p;
  }
  return _impl_.id_pos_;
}
inline ::agv_map::Coord* AgvParam::mutable_id_pos() {
  ::agv_map::Coord* _msg = _internal_mutable_id_pos();
  // @@protoc_insertion_point(field_mutable:agv_map.AgvParam.id_pos)
  return _msg;
}
inline void AgvParam::set_allocated_id_pos(::agv_map::Coord* id_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id_pos_;
  }
  if (id_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id_pos);
    if (message_arena != submessage_arena) {
      id_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_pos_ = id_pos;
  // @@protoc_insertion_point(field_set_allocated:agv_map.AgvParam.id_pos)
}

// .agv_map.Coord pallet_pos = 15;
inline bool AgvParam::_internal_has_pallet_pos() const {
  return this != internal_default_instance() && _impl_.pallet_pos_ != nullptr;
}
inline bool AgvParam::has_pallet_pos() const {
  return _internal_has_pallet_pos();
}
inline void AgvParam::clear_pallet_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pallet_pos_ != nullptr) {
    delete _impl_.pallet_pos_;
  }
  _impl_.pallet_pos_ = nullptr;
}
inline const ::agv_map::Coord& AgvParam::_internal_pallet_pos() const {
  const ::agv_map::Coord* p = _impl_.pallet_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Coord&>(
      ::agv_map::_Coord_default_instance_);
}
inline const ::agv_map::Coord& AgvParam::pallet_pos() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.pallet_pos)
  return _internal_pallet_pos();
}
inline void AgvParam::unsafe_arena_set_allocated_pallet_pos(
    ::agv_map::Coord* pallet_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pallet_pos_);
  }
  _impl_.pallet_pos_ = pallet_pos;
  if (pallet_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.AgvParam.pallet_pos)
}
inline ::agv_map::Coord* AgvParam::release_pallet_pos() {
  
  ::agv_map::Coord* temp = _impl_.pallet_pos_;
  _impl_.pallet_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Coord* AgvParam::unsafe_arena_release_pallet_pos() {
  // @@protoc_insertion_point(field_release:agv_map.AgvParam.pallet_pos)
  
  ::agv_map::Coord* temp = _impl_.pallet_pos_;
  _impl_.pallet_pos_ = nullptr;
  return temp;
}
inline ::agv_map::Coord* AgvParam::_internal_mutable_pallet_pos() {
  
  if (_impl_.pallet_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Coord>(GetArenaForAllocation());
    _impl_.pallet_pos_ = p;
  }
  return _impl_.pallet_pos_;
}
inline ::agv_map::Coord* AgvParam::mutable_pallet_pos() {
  ::agv_map::Coord* _msg = _internal_mutable_pallet_pos();
  // @@protoc_insertion_point(field_mutable:agv_map.AgvParam.pallet_pos)
  return _msg;
}
inline void AgvParam::set_allocated_pallet_pos(::agv_map::Coord* pallet_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pallet_pos_;
  }
  if (pallet_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pallet_pos);
    if (message_arena != submessage_arena) {
      pallet_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pallet_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pallet_pos_ = pallet_pos;
  // @@protoc_insertion_point(field_set_allocated:agv_map.AgvParam.pallet_pos)
}

// repeated .agv_map.AgvParam.opto_elec opto_elec_pos = 16;
inline int AgvParam::_internal_opto_elec_pos_size() const {
  return _impl_.opto_elec_pos_.size();
}
inline int AgvParam::opto_elec_pos_size() const {
  return _internal_opto_elec_pos_size();
}
inline void AgvParam::clear_opto_elec_pos() {
  _impl_.opto_elec_pos_.Clear();
}
inline ::agv_map::AgvParam_opto_elec* AgvParam::mutable_opto_elec_pos(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.AgvParam.opto_elec_pos)
  return _impl_.opto_elec_pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::AgvParam_opto_elec >*
AgvParam::mutable_opto_elec_pos() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.AgvParam.opto_elec_pos)
  return &_impl_.opto_elec_pos_;
}
inline const ::agv_map::AgvParam_opto_elec& AgvParam::_internal_opto_elec_pos(int index) const {
  return _impl_.opto_elec_pos_.Get(index);
}
inline const ::agv_map::AgvParam_opto_elec& AgvParam::opto_elec_pos(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.opto_elec_pos)
  return _internal_opto_elec_pos(index);
}
inline ::agv_map::AgvParam_opto_elec* AgvParam::_internal_add_opto_elec_pos() {
  return _impl_.opto_elec_pos_.Add();
}
inline ::agv_map::AgvParam_opto_elec* AgvParam::add_opto_elec_pos() {
  ::agv_map::AgvParam_opto_elec* _add = _internal_add_opto_elec_pos();
  // @@protoc_insertion_point(field_add:agv_map.AgvParam.opto_elec_pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::AgvParam_opto_elec >&
AgvParam::opto_elec_pos() const {
  // @@protoc_insertion_point(field_list:agv_map.AgvParam.opto_elec_pos)
  return _impl_.opto_elec_pos_;
}

// map<string, .agv_map.Protection> protection = 17;
inline int AgvParam::_internal_protection_size() const {
  return _impl_.protection_.size();
}
inline int AgvParam::protection_size() const {
  return _internal_protection_size();
}
inline void AgvParam::clear_protection() {
  _impl_.protection_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >&
AgvParam::_internal_protection() const {
  return _impl_.protection_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >&
AgvParam::protection() const {
  // @@protoc_insertion_point(field_map:agv_map.AgvParam.protection)
  return _internal_protection();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >*
AgvParam::_internal_mutable_protection() {
  return _impl_.protection_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::agv_map::Protection >*
AgvParam::mutable_protection() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.AgvParam.protection)
  return _internal_mutable_protection();
}

// map<int32, .agv_map.Reflector> reflector = 18;
inline int AgvParam::_internal_reflector_size() const {
  return _impl_.reflector_.size();
}
inline int AgvParam::reflector_size() const {
  return _internal_reflector_size();
}
inline void AgvParam::clear_reflector() {
  _impl_.reflector_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >&
AgvParam::_internal_reflector() const {
  return _impl_.reflector_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >&
AgvParam::reflector() const {
  // @@protoc_insertion_point(field_map:agv_map.AgvParam.reflector)
  return _internal_reflector();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >*
AgvParam::_internal_mutable_reflector() {
  return _impl_.reflector_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::Reflector >*
AgvParam::mutable_reflector() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.AgvParam.reflector)
  return _internal_mutable_reflector();
}

// sint32 fork_load_high = 19;
inline void AgvParam::clear_fork_load_high() {
  _impl_.fork_load_high_ = 0;
}
inline int32_t AgvParam::_internal_fork_load_high() const {
  return _impl_.fork_load_high_;
}
inline int32_t AgvParam::fork_load_high() const {
  // @@protoc_insertion_point(field_get:agv_map.AgvParam.fork_load_high)
  return _internal_fork_load_high();
}
inline void AgvParam::_internal_set_fork_load_high(int32_t value) {
  
  _impl_.fork_load_high_ = value;
}
inline void AgvParam::set_fork_load_high(int32_t value) {
  _internal_set_fork_load_high(value);
  // @@protoc_insertion_point(field_set:agv_map.AgvParam.fork_load_high)
}

// -------------------------------------------------------------------

// Protection_Mode

// int32 id = 1;
inline void Protection_Mode::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Protection_Mode::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Protection_Mode::id() const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.Mode.id)
  return _internal_id();
}
inline void Protection_Mode::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Protection_Mode::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Protection.Mode.id)
}

// .agv_map.Protection.Polygon area1 = 2;
inline bool Protection_Mode::_internal_has_area1() const {
  return this != internal_default_instance() && _impl_.area1_ != nullptr;
}
inline bool Protection_Mode::has_area1() const {
  return _internal_has_area1();
}
inline void Protection_Mode::clear_area1() {
  if (GetArenaForAllocation() == nullptr && _impl_.area1_ != nullptr) {
    delete _impl_.area1_;
  }
  _impl_.area1_ = nullptr;
}
inline const ::agv_map::Protection_Polygon& Protection_Mode::_internal_area1() const {
  const ::agv_map::Protection_Polygon* p = _impl_.area1_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Protection_Polygon&>(
      ::agv_map::_Protection_Polygon_default_instance_);
}
inline const ::agv_map::Protection_Polygon& Protection_Mode::area1() const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.Mode.area1)
  return _internal_area1();
}
inline void Protection_Mode::unsafe_arena_set_allocated_area1(
    ::agv_map::Protection_Polygon* area1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.area1_);
  }
  _impl_.area1_ = area1;
  if (area1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Protection.Mode.area1)
}
inline ::agv_map::Protection_Polygon* Protection_Mode::release_area1() {
  
  ::agv_map::Protection_Polygon* temp = _impl_.area1_;
  _impl_.area1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::unsafe_arena_release_area1() {
  // @@protoc_insertion_point(field_release:agv_map.Protection.Mode.area1)
  
  ::agv_map::Protection_Polygon* temp = _impl_.area1_;
  _impl_.area1_ = nullptr;
  return temp;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::_internal_mutable_area1() {
  
  if (_impl_.area1_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Protection_Polygon>(GetArenaForAllocation());
    _impl_.area1_ = p;
  }
  return _impl_.area1_;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::mutable_area1() {
  ::agv_map::Protection_Polygon* _msg = _internal_mutable_area1();
  // @@protoc_insertion_point(field_mutable:agv_map.Protection.Mode.area1)
  return _msg;
}
inline void Protection_Mode::set_allocated_area1(::agv_map::Protection_Polygon* area1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.area1_;
  }
  if (area1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(area1);
    if (message_arena != submessage_arena) {
      area1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.area1_ = area1;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Protection.Mode.area1)
}

// .agv_map.Protection.Polygon area2 = 3;
inline bool Protection_Mode::_internal_has_area2() const {
  return this != internal_default_instance() && _impl_.area2_ != nullptr;
}
inline bool Protection_Mode::has_area2() const {
  return _internal_has_area2();
}
inline void Protection_Mode::clear_area2() {
  if (GetArenaForAllocation() == nullptr && _impl_.area2_ != nullptr) {
    delete _impl_.area2_;
  }
  _impl_.area2_ = nullptr;
}
inline const ::agv_map::Protection_Polygon& Protection_Mode::_internal_area2() const {
  const ::agv_map::Protection_Polygon* p = _impl_.area2_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Protection_Polygon&>(
      ::agv_map::_Protection_Polygon_default_instance_);
}
inline const ::agv_map::Protection_Polygon& Protection_Mode::area2() const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.Mode.area2)
  return _internal_area2();
}
inline void Protection_Mode::unsafe_arena_set_allocated_area2(
    ::agv_map::Protection_Polygon* area2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.area2_);
  }
  _impl_.area2_ = area2;
  if (area2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Protection.Mode.area2)
}
inline ::agv_map::Protection_Polygon* Protection_Mode::release_area2() {
  
  ::agv_map::Protection_Polygon* temp = _impl_.area2_;
  _impl_.area2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::unsafe_arena_release_area2() {
  // @@protoc_insertion_point(field_release:agv_map.Protection.Mode.area2)
  
  ::agv_map::Protection_Polygon* temp = _impl_.area2_;
  _impl_.area2_ = nullptr;
  return temp;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::_internal_mutable_area2() {
  
  if (_impl_.area2_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Protection_Polygon>(GetArenaForAllocation());
    _impl_.area2_ = p;
  }
  return _impl_.area2_;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::mutable_area2() {
  ::agv_map::Protection_Polygon* _msg = _internal_mutable_area2();
  // @@protoc_insertion_point(field_mutable:agv_map.Protection.Mode.area2)
  return _msg;
}
inline void Protection_Mode::set_allocated_area2(::agv_map::Protection_Polygon* area2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.area2_;
  }
  if (area2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(area2);
    if (message_arena != submessage_arena) {
      area2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.area2_ = area2;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Protection.Mode.area2)
}

// .agv_map.Protection.Polygon area3 = 4;
inline bool Protection_Mode::_internal_has_area3() const {
  return this != internal_default_instance() && _impl_.area3_ != nullptr;
}
inline bool Protection_Mode::has_area3() const {
  return _internal_has_area3();
}
inline void Protection_Mode::clear_area3() {
  if (GetArenaForAllocation() == nullptr && _impl_.area3_ != nullptr) {
    delete _impl_.area3_;
  }
  _impl_.area3_ = nullptr;
}
inline const ::agv_map::Protection_Polygon& Protection_Mode::_internal_area3() const {
  const ::agv_map::Protection_Polygon* p = _impl_.area3_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Protection_Polygon&>(
      ::agv_map::_Protection_Polygon_default_instance_);
}
inline const ::agv_map::Protection_Polygon& Protection_Mode::area3() const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.Mode.area3)
  return _internal_area3();
}
inline void Protection_Mode::unsafe_arena_set_allocated_area3(
    ::agv_map::Protection_Polygon* area3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.area3_);
  }
  _impl_.area3_ = area3;
  if (area3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Protection.Mode.area3)
}
inline ::agv_map::Protection_Polygon* Protection_Mode::release_area3() {
  
  ::agv_map::Protection_Polygon* temp = _impl_.area3_;
  _impl_.area3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::unsafe_arena_release_area3() {
  // @@protoc_insertion_point(field_release:agv_map.Protection.Mode.area3)
  
  ::agv_map::Protection_Polygon* temp = _impl_.area3_;
  _impl_.area3_ = nullptr;
  return temp;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::_internal_mutable_area3() {
  
  if (_impl_.area3_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Protection_Polygon>(GetArenaForAllocation());
    _impl_.area3_ = p;
  }
  return _impl_.area3_;
}
inline ::agv_map::Protection_Polygon* Protection_Mode::mutable_area3() {
  ::agv_map::Protection_Polygon* _msg = _internal_mutable_area3();
  // @@protoc_insertion_point(field_mutable:agv_map.Protection.Mode.area3)
  return _msg;
}
inline void Protection_Mode::set_allocated_area3(::agv_map::Protection_Polygon* area3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.area3_;
  }
  if (area3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(area3);
    if (message_arena != submessage_arena) {
      area3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.area3_ = area3;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Protection.Mode.area3)
}

// -------------------------------------------------------------------

// Protection_Polygon

// repeated .agv_map.Coord coord = 1;
inline int Protection_Polygon::_internal_coord_size() const {
  return _impl_.coord_.size();
}
inline int Protection_Polygon::coord_size() const {
  return _internal_coord_size();
}
inline void Protection_Polygon::clear_coord() {
  _impl_.coord_.Clear();
}
inline ::agv_map::Coord* Protection_Polygon::mutable_coord(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Protection.Polygon.coord)
  return _impl_.coord_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >*
Protection_Polygon::mutable_coord() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Protection.Polygon.coord)
  return &_impl_.coord_;
}
inline const ::agv_map::Coord& Protection_Polygon::_internal_coord(int index) const {
  return _impl_.coord_.Get(index);
}
inline const ::agv_map::Coord& Protection_Polygon::coord(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.Polygon.coord)
  return _internal_coord(index);
}
inline ::agv_map::Coord* Protection_Polygon::_internal_add_coord() {
  return _impl_.coord_.Add();
}
inline ::agv_map::Coord* Protection_Polygon::add_coord() {
  ::agv_map::Coord* _add = _internal_add_coord();
  // @@protoc_insertion_point(field_add:agv_map.Protection.Polygon.coord)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Coord >&
Protection_Polygon::coord() const {
  // @@protoc_insertion_point(field_list:agv_map.Protection.Polygon.coord)
  return _impl_.coord_;
}

// -------------------------------------------------------------------

// Protection

// int32 scan_height = 1;
inline void Protection::clear_scan_height() {
  _impl_.scan_height_ = 0;
}
inline int32_t Protection::_internal_scan_height() const {
  return _impl_.scan_height_;
}
inline int32_t Protection::scan_height() const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.scan_height)
  return _internal_scan_height();
}
inline void Protection::_internal_set_scan_height(int32_t value) {
  
  _impl_.scan_height_ = value;
}
inline void Protection::set_scan_height(int32_t value) {
  _internal_set_scan_height(value);
  // @@protoc_insertion_point(field_set:agv_map.Protection.scan_height)
}

// string dev_type = 2;
inline void Protection::clear_dev_type() {
  _impl_.dev_type_.ClearToEmpty();
}
inline const std::string& Protection::dev_type() const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.dev_type)
  return _internal_dev_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Protection::set_dev_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dev_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Protection.dev_type)
}
inline std::string* Protection::mutable_dev_type() {
  std::string* _s = _internal_mutable_dev_type();
  // @@protoc_insertion_point(field_mutable:agv_map.Protection.dev_type)
  return _s;
}
inline const std::string& Protection::_internal_dev_type() const {
  return _impl_.dev_type_.Get();
}
inline void Protection::_internal_set_dev_type(const std::string& value) {
  
  _impl_.dev_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Protection::_internal_mutable_dev_type() {
  
  return _impl_.dev_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Protection::release_dev_type() {
  // @@protoc_insertion_point(field_release:agv_map.Protection.dev_type)
  return _impl_.dev_type_.Release();
}
inline void Protection::set_allocated_dev_type(std::string* dev_type) {
  if (dev_type != nullptr) {
    
  } else {
    
  }
  _impl_.dev_type_.SetAllocated(dev_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dev_type_.IsDefault()) {
    _impl_.dev_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Protection.dev_type)
}

// .agv_map.Position pos = 3;
inline bool Protection::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool Protection::has_pos() const {
  return _internal_has_pos();
}
inline void Protection::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::agv_map::Position& Protection::_internal_pos() const {
  const ::agv_map::Position* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Position&>(
      ::agv_map::_Position_default_instance_);
}
inline const ::agv_map::Position& Protection::pos() const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.pos)
  return _internal_pos();
}
inline void Protection::unsafe_arena_set_allocated_pos(
    ::agv_map::Position* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Protection.pos)
}
inline ::agv_map::Position* Protection::release_pos() {
  
  ::agv_map::Position* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Position* Protection::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:agv_map.Protection.pos)
  
  ::agv_map::Position* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::agv_map::Position* Protection::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Position>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::agv_map::Position* Protection::mutable_pos() {
  ::agv_map::Position* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:agv_map.Protection.pos)
  return _msg;
}
inline void Protection::set_allocated_pos(::agv_map::Position* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Protection.pos)
}

// sint32 pos_up = 4;
inline void Protection::clear_pos_up() {
  _impl_.pos_up_ = 0;
}
inline int32_t Protection::_internal_pos_up() const {
  return _impl_.pos_up_;
}
inline int32_t Protection::pos_up() const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.pos_up)
  return _internal_pos_up();
}
inline void Protection::_internal_set_pos_up(int32_t value) {
  
  _impl_.pos_up_ = value;
}
inline void Protection::set_pos_up(int32_t value) {
  _internal_set_pos_up(value);
  // @@protoc_insertion_point(field_set:agv_map.Protection.pos_up)
}

// repeated .agv_map.Protection.Mode mode = 5;
inline int Protection::_internal_mode_size() const {
  return _impl_.mode_.size();
}
inline int Protection::mode_size() const {
  return _internal_mode_size();
}
inline void Protection::clear_mode() {
  _impl_.mode_.Clear();
}
inline ::agv_map::Protection_Mode* Protection::mutable_mode(int index) {
  // @@protoc_insertion_point(field_mutable:agv_map.Protection.mode)
  return _impl_.mode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Protection_Mode >*
Protection::mutable_mode() {
  // @@protoc_insertion_point(field_mutable_list:agv_map.Protection.mode)
  return &_impl_.mode_;
}
inline const ::agv_map::Protection_Mode& Protection::_internal_mode(int index) const {
  return _impl_.mode_.Get(index);
}
inline const ::agv_map::Protection_Mode& Protection::mode(int index) const {
  // @@protoc_insertion_point(field_get:agv_map.Protection.mode)
  return _internal_mode(index);
}
inline ::agv_map::Protection_Mode* Protection::_internal_add_mode() {
  return _impl_.mode_.Add();
}
inline ::agv_map::Protection_Mode* Protection::add_mode() {
  ::agv_map::Protection_Mode* _add = _internal_add_mode();
  // @@protoc_insertion_point(field_add:agv_map.Protection.mode)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_map::Protection_Mode >&
Protection::mode() const {
  // @@protoc_insertion_point(field_list:agv_map.Protection.mode)
  return _impl_.mode_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ReplaceBatteryStation_Space

// int32 id = 1;
inline void ReplaceBatteryStation_Space::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ReplaceBatteryStation_Space::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ReplaceBatteryStation_Space::id() const {
  // @@protoc_insertion_point(field_get:agv_map.ReplaceBatteryStation.Space.id)
  return _internal_id();
}
inline void ReplaceBatteryStation_Space::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ReplaceBatteryStation_Space::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_map.ReplaceBatteryStation.Space.id)
}

// int32 type = 2;
inline void ReplaceBatteryStation_Space::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t ReplaceBatteryStation_Space::_internal_type() const {
  return _impl_.type_;
}
inline int32_t ReplaceBatteryStation_Space::type() const {
  // @@protoc_insertion_point(field_get:agv_map.ReplaceBatteryStation.Space.type)
  return _internal_type();
}
inline void ReplaceBatteryStation_Space::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void ReplaceBatteryStation_Space::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_map.ReplaceBatteryStation.Space.type)
}

// sint32 pos = 3;
inline void ReplaceBatteryStation_Space::clear_pos() {
  _impl_.pos_ = 0;
}
inline int32_t ReplaceBatteryStation_Space::_internal_pos() const {
  return _impl_.pos_;
}
inline int32_t ReplaceBatteryStation_Space::pos() const {
  // @@protoc_insertion_point(field_get:agv_map.ReplaceBatteryStation.Space.pos)
  return _internal_pos();
}
inline void ReplaceBatteryStation_Space::_internal_set_pos(int32_t value) {
  
  _impl_.pos_ = value;
}
inline void ReplaceBatteryStation_Space::set_pos(int32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:agv_map.ReplaceBatteryStation.Space.pos)
}

// -------------------------------------------------------------------

// ReplaceBatteryStation

// int32 index = 1;
inline void ReplaceBatteryStation::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t ReplaceBatteryStation::_internal_index() const {
  return _impl_.index_;
}
inline int32_t ReplaceBatteryStation::index() const {
  // @@protoc_insertion_point(field_get:agv_map.ReplaceBatteryStation.index)
  return _internal_index();
}
inline void ReplaceBatteryStation::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void ReplaceBatteryStation::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:agv_map.ReplaceBatteryStation.index)
}

// int32 dist_p1_p2 = 2;
inline void ReplaceBatteryStation::clear_dist_p1_p2() {
  _impl_.dist_p1_p2_ = 0;
}
inline int32_t ReplaceBatteryStation::_internal_dist_p1_p2() const {
  return _impl_.dist_p1_p2_;
}
inline int32_t ReplaceBatteryStation::dist_p1_p2() const {
  // @@protoc_insertion_point(field_get:agv_map.ReplaceBatteryStation.dist_p1_p2)
  return _internal_dist_p1_p2();
}
inline void ReplaceBatteryStation::_internal_set_dist_p1_p2(int32_t value) {
  
  _impl_.dist_p1_p2_ = value;
}
inline void ReplaceBatteryStation::set_dist_p1_p2(int32_t value) {
  _internal_set_dist_p1_p2(value);
  // @@protoc_insertion_point(field_set:agv_map.ReplaceBatteryStation.dist_p1_p2)
}

// map<int32, .agv_map.ReplaceBatteryStation.Space> space = 3;
inline int ReplaceBatteryStation::_internal_space_size() const {
  return _impl_.space_.size();
}
inline int ReplaceBatteryStation::space_size() const {
  return _internal_space_size();
}
inline void ReplaceBatteryStation::clear_space() {
  _impl_.space_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >&
ReplaceBatteryStation::_internal_space() const {
  return _impl_.space_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >&
ReplaceBatteryStation::space() const {
  // @@protoc_insertion_point(field_map:agv_map.ReplaceBatteryStation.space)
  return _internal_space();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >*
ReplaceBatteryStation::_internal_mutable_space() {
  return _impl_.space_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::agv_map::ReplaceBatteryStation_Space >*
ReplaceBatteryStation::mutable_space() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.ReplaceBatteryStation.space)
  return _internal_mutable_space();
}

// -------------------------------------------------------------------

// Reflector

// int32 id = 1;
inline void Reflector::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Reflector::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Reflector::id() const {
  // @@protoc_insertion_point(field_get:agv_map.Reflector.id)
  return _internal_id();
}
inline void Reflector::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Reflector::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_map.Reflector.id)
}

// .agv_map.Coord coord = 2;
inline bool Reflector::_internal_has_coord() const {
  return this != internal_default_instance() && _impl_.coord_ != nullptr;
}
inline bool Reflector::has_coord() const {
  return _internal_has_coord();
}
inline void Reflector::clear_coord() {
  if (GetArenaForAllocation() == nullptr && _impl_.coord_ != nullptr) {
    delete _impl_.coord_;
  }
  _impl_.coord_ = nullptr;
}
inline const ::agv_map::Coord& Reflector::_internal_coord() const {
  const ::agv_map::Coord* p = _impl_.coord_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_map::Coord&>(
      ::agv_map::_Coord_default_instance_);
}
inline const ::agv_map::Coord& Reflector::coord() const {
  // @@protoc_insertion_point(field_get:agv_map.Reflector.coord)
  return _internal_coord();
}
inline void Reflector::unsafe_arena_set_allocated_coord(
    ::agv_map::Coord* coord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coord_);
  }
  _impl_.coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_map.Reflector.coord)
}
inline ::agv_map::Coord* Reflector::release_coord() {
  
  ::agv_map::Coord* temp = _impl_.coord_;
  _impl_.coord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::agv_map::Coord* Reflector::unsafe_arena_release_coord() {
  // @@protoc_insertion_point(field_release:agv_map.Reflector.coord)
  
  ::agv_map::Coord* temp = _impl_.coord_;
  _impl_.coord_ = nullptr;
  return temp;
}
inline ::agv_map::Coord* Reflector::_internal_mutable_coord() {
  
  if (_impl_.coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_map::Coord>(GetArenaForAllocation());
    _impl_.coord_ = p;
  }
  return _impl_.coord_;
}
inline ::agv_map::Coord* Reflector::mutable_coord() {
  ::agv_map::Coord* _msg = _internal_mutable_coord();
  // @@protoc_insertion_point(field_mutable:agv_map.Reflector.coord)
  return _msg;
}
inline void Reflector::set_allocated_coord(::agv_map::Coord* coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coord_;
  }
  if (coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coord);
    if (message_arena != submessage_arena) {
      coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coord_ = coord;
  // @@protoc_insertion_point(field_set_allocated:agv_map.Reflector.coord)
}

// int32 area = 3;
inline void Reflector::clear_area() {
  _impl_.area_ = 0;
}
inline int32_t Reflector::_internal_area() const {
  return _impl_.area_;
}
inline int32_t Reflector::area() const {
  // @@protoc_insertion_point(field_get:agv_map.Reflector.area)
  return _internal_area();
}
inline void Reflector::_internal_set_area(int32_t value) {
  
  _impl_.area_ = value;
}
inline void Reflector::set_area(int32_t value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:agv_map.Reflector.area)
}

// int32 ap_area = 4;
inline void Reflector::clear_ap_area() {
  _impl_.ap_area_ = 0;
}
inline int32_t Reflector::_internal_ap_area() const {
  return _impl_.ap_area_;
}
inline int32_t Reflector::ap_area() const {
  // @@protoc_insertion_point(field_get:agv_map.Reflector.ap_area)
  return _internal_ap_area();
}
inline void Reflector::_internal_set_ap_area(int32_t value) {
  
  _impl_.ap_area_ = value;
}
inline void Reflector::set_ap_area(int32_t value) {
  _internal_set_ap_area(value);
  // @@protoc_insertion_point(field_set:agv_map.Reflector.ap_area)
}

// -------------------------------------------------------------------

// Pallet

// string describe = 1;
inline void Pallet::clear_describe() {
  _impl_.describe_.ClearToEmpty();
}
inline const std::string& Pallet::describe() const {
  // @@protoc_insertion_point(field_get:agv_map.Pallet.describe)
  return _internal_describe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pallet::set_describe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.describe_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Pallet.describe)
}
inline std::string* Pallet::mutable_describe() {
  std::string* _s = _internal_mutable_describe();
  // @@protoc_insertion_point(field_mutable:agv_map.Pallet.describe)
  return _s;
}
inline const std::string& Pallet::_internal_describe() const {
  return _impl_.describe_.Get();
}
inline void Pallet::_internal_set_describe(const std::string& value) {
  
  _impl_.describe_.Set(value, GetArenaForAllocation());
}
inline std::string* Pallet::_internal_mutable_describe() {
  
  return _impl_.describe_.Mutable(GetArenaForAllocation());
}
inline std::string* Pallet::release_describe() {
  // @@protoc_insertion_point(field_release:agv_map.Pallet.describe)
  return _impl_.describe_.Release();
}
inline void Pallet::set_allocated_describe(std::string* describe) {
  if (describe != nullptr) {
    
  } else {
    
  }
  _impl_.describe_.SetAllocated(describe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.describe_.IsDefault()) {
    _impl_.describe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Pallet.describe)
}

// string name = 2;
inline void Pallet::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Pallet::name() const {
  // @@protoc_insertion_point(field_get:agv_map.Pallet.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pallet::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.Pallet.name)
}
inline std::string* Pallet::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:agv_map.Pallet.name)
  return _s;
}
inline const std::string& Pallet::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Pallet::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Pallet::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Pallet::release_name() {
  // @@protoc_insertion_point(field_release:agv_map.Pallet.name)
  return _impl_.name_.Release();
}
inline void Pallet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.Pallet.name)
}

// int32 type = 3;
inline void Pallet::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Pallet::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Pallet::type() const {
  // @@protoc_insertion_point(field_get:agv_map.Pallet.type)
  return _internal_type();
}
inline void Pallet::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Pallet::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_map.Pallet.type)
}

// int32 length = 4;
inline void Pallet::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t Pallet::_internal_length() const {
  return _impl_.length_;
}
inline int32_t Pallet::length() const {
  // @@protoc_insertion_point(field_get:agv_map.Pallet.length)
  return _internal_length();
}
inline void Pallet::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void Pallet::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:agv_map.Pallet.length)
}

// int32 width = 5;
inline void Pallet::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Pallet::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Pallet::width() const {
  // @@protoc_insertion_point(field_get:agv_map.Pallet.width)
  return _internal_width();
}
inline void Pallet::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Pallet::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:agv_map.Pallet.width)
}

// int32 high = 6;
inline void Pallet::clear_high() {
  _impl_.high_ = 0;
}
inline int32_t Pallet::_internal_high() const {
  return _impl_.high_;
}
inline int32_t Pallet::high() const {
  // @@protoc_insertion_point(field_get:agv_map.Pallet.high)
  return _internal_high();
}
inline void Pallet::_internal_set_high(int32_t value) {
  
  _impl_.high_ = value;
}
inline void Pallet::set_high(int32_t value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:agv_map.Pallet.high)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DefautForkSet

// string agv_type = 1;
inline void DefautForkSet::clear_agv_type() {
  _impl_.agv_type_.ClearToEmpty();
}
inline const std::string& DefautForkSet::agv_type() const {
  // @@protoc_insertion_point(field_get:agv_map.DefautForkSet.agv_type)
  return _internal_agv_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefautForkSet::set_agv_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agv_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.DefautForkSet.agv_type)
}
inline std::string* DefautForkSet::mutable_agv_type() {
  std::string* _s = _internal_mutable_agv_type();
  // @@protoc_insertion_point(field_mutable:agv_map.DefautForkSet.agv_type)
  return _s;
}
inline const std::string& DefautForkSet::_internal_agv_type() const {
  return _impl_.agv_type_.Get();
}
inline void DefautForkSet::_internal_set_agv_type(const std::string& value) {
  
  _impl_.agv_type_.Set(value, GetArenaForAllocation());
}
inline std::string* DefautForkSet::_internal_mutable_agv_type() {
  
  return _impl_.agv_type_.Mutable(GetArenaForAllocation());
}
inline std::string* DefautForkSet::release_agv_type() {
  // @@protoc_insertion_point(field_release:agv_map.DefautForkSet.agv_type)
  return _impl_.agv_type_.Release();
}
inline void DefautForkSet::set_allocated_agv_type(std::string* agv_type) {
  if (agv_type != nullptr) {
    
  } else {
    
  }
  _impl_.agv_type_.SetAllocated(agv_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agv_type_.IsDefault()) {
    _impl_.agv_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.DefautForkSet.agv_type)
}

// string pallet_name = 2;
inline void DefautForkSet::clear_pallet_name() {
  _impl_.pallet_name_.ClearToEmpty();
}
inline const std::string& DefautForkSet::pallet_name() const {
  // @@protoc_insertion_point(field_get:agv_map.DefautForkSet.pallet_name)
  return _internal_pallet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DefautForkSet::set_pallet_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pallet_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:agv_map.DefautForkSet.pallet_name)
}
inline std::string* DefautForkSet::mutable_pallet_name() {
  std::string* _s = _internal_mutable_pallet_name();
  // @@protoc_insertion_point(field_mutable:agv_map.DefautForkSet.pallet_name)
  return _s;
}
inline const std::string& DefautForkSet::_internal_pallet_name() const {
  return _impl_.pallet_name_.Get();
}
inline void DefautForkSet::_internal_set_pallet_name(const std::string& value) {
  
  _impl_.pallet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DefautForkSet::_internal_mutable_pallet_name() {
  
  return _impl_.pallet_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DefautForkSet::release_pallet_name() {
  // @@protoc_insertion_point(field_release:agv_map.DefautForkSet.pallet_name)
  return _impl_.pallet_name_.Release();
}
inline void DefautForkSet::set_allocated_pallet_name(std::string* pallet_name) {
  if (pallet_name != nullptr) {
    
  } else {
    
  }
  _impl_.pallet_name_.SetAllocated(pallet_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pallet_name_.IsDefault()) {
    _impl_.pallet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agv_map.DefautForkSet.pallet_name)
}

// int32 load_high = 3;
inline void DefautForkSet::clear_load_high() {
  _impl_.load_high_ = 0;
}
inline int32_t DefautForkSet::_internal_load_high() const {
  return _impl_.load_high_;
}
inline int32_t DefautForkSet::load_high() const {
  // @@protoc_insertion_point(field_get:agv_map.DefautForkSet.load_high)
  return _internal_load_high();
}
inline void DefautForkSet::_internal_set_load_high(int32_t value) {
  
  _impl_.load_high_ = value;
}
inline void DefautForkSet::set_load_high(int32_t value) {
  _internal_set_load_high(value);
  // @@protoc_insertion_point(field_set:agv_map.DefautForkSet.load_high)
}

// map<int32, int32> pallet_load_highs = 4;
inline int DefautForkSet::_internal_pallet_load_highs_size() const {
  return _impl_.pallet_load_highs_.size();
}
inline int DefautForkSet::pallet_load_highs_size() const {
  return _internal_pallet_load_highs_size();
}
inline void DefautForkSet::clear_pallet_load_highs() {
  _impl_.pallet_load_highs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
DefautForkSet::_internal_pallet_load_highs() const {
  return _impl_.pallet_load_highs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
DefautForkSet::pallet_load_highs() const {
  // @@protoc_insertion_point(field_map:agv_map.DefautForkSet.pallet_load_highs)
  return _internal_pallet_load_highs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
DefautForkSet::_internal_mutable_pallet_load_highs() {
  return _impl_.pallet_load_highs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
DefautForkSet::mutable_pallet_load_highs() {
  // @@protoc_insertion_point(field_mutable_map:agv_map.DefautForkSet.pallet_load_highs)
  return _internal_mutable_pallet_load_highs();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace agv_map

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::agv_map::node_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agv_map::node_type>() {
  return ::agv_map::node_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_agv_5fmap_2eproto
